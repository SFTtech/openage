<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="misc__test_8cpp" kind="file" language="C++">
    <compoundname>misc_test.cpp</compoundname>
    <includes refid="misc_8h" local="yes">misc.h</includes>
    <includes refid="testing_8h" local="yes">../testing/testing.h</includes>
    <incdepgraph>
      <node id="31271">
        <label>list</label>
      </node>
      <node id="31262">
        <label>atomic</label>
      </node>
      <node id="31268">
        <label>iomanip</label>
      </node>
      <node id="31267">
        <label>functional</label>
      </node>
      <node id="31257">
        <label>cstdint</label>
      </node>
      <node id="31265">
        <label>strings.h</label>
        <link refid="strings_8h"/>
        <childnode refid="31266" relation="include">
        </childnode>
        <childnode refid="31267" relation="include">
        </childnode>
        <childnode refid="31268" relation="include">
        </childnode>
        <childnode refid="31249" relation="include">
        </childnode>
        <childnode refid="31269" relation="include">
        </childnode>
        <childnode refid="31247" relation="include">
        </childnode>
        <childnode refid="31248" relation="include">
        </childnode>
      </node>
      <node id="31245">
        <label>cmath</label>
      </node>
      <node id="31252">
        <label>stdexcept</label>
      </node>
      <node id="31270">
        <label>logsink.h</label>
        <link refid="logsink_8h"/>
        <childnode refid="31271" relation="include">
        </childnode>
        <childnode refid="31272" relation="include">
        </childnode>
        <childnode refid="31273" relation="include">
        </childnode>
      </node>
      <node id="31266">
        <label>cstdarg</label>
      </node>
      <node id="31247">
        <label>string</label>
      </node>
      <node id="31256">
        <label>../log/message.h</label>
        <link refid="message_8h"/>
        <childnode refid="31257" relation="include">
        </childnode>
        <childnode refid="31247" relation="include">
        </childnode>
        <childnode refid="31258" relation="include">
        </childnode>
        <childnode refid="31259" relation="include">
        </childnode>
        <childnode refid="31261" relation="include">
        </childnode>
        <childnode refid="31270" relation="include">
        </childnode>
        <childnode refid="31273" relation="include">
        </childnode>
      </node>
      <node id="31259">
        <label>../util/constexpr.h</label>
        <link refid="constexpr_8h"/>
        <childnode refid="31260" relation="include">
        </childnode>
      </node>
      <node id="31261">
        <label>../util/stringformatter.h</label>
        <link refid="stringformatter_8h"/>
        <childnode refid="31262" relation="include">
        </childnode>
        <childnode refid="31249" relation="include">
        </childnode>
        <childnode refid="31263" relation="include">
        </childnode>
        <childnode refid="31253" relation="include">
        </childnode>
        <childnode refid="31264" relation="include">
        </childnode>
        <childnode refid="31265" relation="include">
        </childnode>
      </node>
      <node id="31244">
        <label>limits.h</label>
      </node>
      <node id="31250">
        <label>../error/error.h</label>
        <link refid="error_2error_8h"/>
        <childnode refid="31251" relation="include">
        </childnode>
        <childnode refid="31249" relation="include">
        </childnode>
        <childnode refid="31252" relation="include">
        </childnode>
        <childnode refid="31247" relation="include">
        </childnode>
        <childnode refid="31253" relation="include">
        </childnode>
        <childnode refid="31256" relation="include">
        </childnode>
      </node>
      <node id="31242">
        <label>misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="31243" relation="include">
        </childnode>
        <childnode refid="31244" relation="include">
        </childnode>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31246" relation="include">
        </childnode>
        <childnode refid="31247" relation="include">
        </childnode>
        <childnode refid="31248" relation="include">
        </childnode>
        <childnode refid="31249" relation="include">
        </childnode>
        <childnode refid="31250" relation="include">
        </childnode>
        <childnode refid="31253" relation="include">
        </childnode>
      </node>
      <node id="31275">
        <label>typeinfo</label>
      </node>
      <node id="31248">
        <label>vector</label>
      </node>
      <node id="31254">
        <label>ciso646</label>
      </node>
      <node id="31269">
        <label>sstream</label>
      </node>
      <node id="31253">
        <label>../util/compiler.h</label>
        <link refid="compiler_8h"/>
        <childnode refid="31254" relation="include">
        </childnode>
        <childnode refid="31247" relation="include">
        </childnode>
        <childnode refid="31255" relation="include">
        </childnode>
      </node>
      <node id="31255">
        <label>signal.h</label>
        <link refid="signal_8h"/>
        <childnode refid="31255" relation="include">
        </childnode>
      </node>
      <node id="31264">
        <label>externalsstream.h</label>
        <link refid="externalsstream_8h"/>
        <childnode refid="31251" relation="include">
        </childnode>
        <childnode refid="31247" relation="include">
        </childnode>
      </node>
      <node id="31273">
        <label>level.h</label>
        <link refid="level_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31260">
        <label>cstdlib</label>
      </node>
      <node id="31251">
        <label>iostream</label>
      </node>
      <node id="31276">
        <label>../testing/testing.h</label>
        <link refid="testing_8h"/>
        <childnode refid="31250" relation="include">
        </childnode>
      </node>
      <node id="31272">
        <label>mutex</label>
      </node>
      <node id="31263">
        <label>type_traits</label>
      </node>
      <node id="31258">
        <label>config.h</label>
      </node>
      <node id="31243">
        <label>algorithm</label>
      </node>
      <node id="31241">
        <label>C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/misc_test.cpp</label>
        <link refid="misc__test_8cpp"/>
        <childnode refid="31242" relation="include">
        </childnode>
        <childnode refid="31276" relation="include">
        </childnode>
      </node>
      <node id="31246">
        <label>cstring</label>
      </node>
      <node id="31249">
        <label>memory</label>
      </node>
      <node id="31274">
        <label>../util/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="31251" relation="include">
        </childnode>
        <childnode refid="31275" relation="include">
        </childnode>
        <childnode refid="31253" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceopenage">openage</innernamespace>
    <innernamespace refid="namespaceopenage_1_1util">openage::util</innernamespace>
    <innernamespace refid="namespaceopenage_1_1util_1_1tests">openage::util::tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2017-2017<sp/>the<sp/>openage<sp/>authors.<sp/>See<sp/>copying.md<sp/>for<sp/>legal<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="misc_8h" kindref="compound">misc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../testing/testing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopenage" kindref="compound">openage</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tests<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespaceopenage_1_1util_1_1tests_1a48fcf768166ffb9362daf1fdf19acf45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1util_1_1tests_1a48fcf768166ffb9362daf1fdf19acf45" kindref="member">array_conversion</ref>()<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>test_array8_big{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01,<sp/>0x23,<sp/>0x45,<sp/>0x67,<sp/>0x89,<sp/>0xab,<sp/>0xcd,<sp/>0xef</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>test_array8_little{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xef,<sp/>0xcd,<sp/>0xab,<sp/>0x89,<sp/>0x67,<sp/>0x45,<sp/>0x23,<sp/>0x01</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>test_uint64{0x0123456789abcdef};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Big-endian<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1a69b6ecf2b5119f11c33d2b5b89cec86c" kindref="member">array8_to_uint64</ref>(test_array8_big.data(),<sp/>8,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>test_uint64<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1ae9d6c19aadc0f6a1d502f42852172de0" kindref="member">uint64_to_array8</ref>(test_uint64,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>test_array8_big<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Little-endian<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1a69b6ecf2b5119f11c33d2b5b89cec86c" kindref="member">array8_to_uint64</ref>(test_array8_little.data(),<sp/>8,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>test_uint64<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1ae9d6c19aadc0f6a1d502f42852172de0" kindref="member">uint64_to_array8</ref>(test_uint64,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>test_array8_little<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>test_array8_big{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01,<sp/>0x23,<sp/>0x45,<sp/>0x67,<sp/>0x89,<sp/>0xab,<sp/>0xcd,<sp/>0xef,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf0,<sp/>0xf1,<sp/>0xf2,<sp/>0xf3,<sp/>0xf4,<sp/>0xf5,<sp/>0xf6,<sp/>0xf7</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>test_array8_little{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xef,<sp/>0xcd,<sp/>0xab,<sp/>0x89,<sp/>0x67,<sp/>0x45,<sp/>0x23,<sp/>0x01,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf7,<sp/>0xf6,<sp/>0xf5,<sp/>0xf4,<sp/>0xf3,<sp/>0xf2,<sp/>0xf1,<sp/>0xf0</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint64_t&gt;<sp/>test_array64{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0123456789abcdef,<sp/>0xf0f1f2f3f4f5f6f7</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Big-endian<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1aa30219231e1ac7a89ef5d1fb44894e9e" kindref="member">array8_to_array64</ref>(test_array8_big.data(),<sp/>16,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>test_array64<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1af9f52b617e7434a421cd5f9de448b600" kindref="member">array64_to_array8</ref>(test_array64.data(),<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>test_array8_big<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Little-endian<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1aa30219231e1ac7a89ef5d1fb44894e9e" kindref="member">array8_to_array64</ref>(test_array8_little.data(),<sp/>16,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>test_array64<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1af9f52b617e7434a421cd5f9de448b600" kindref="member">array64_to_array8</ref>(test_array64.data(),<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>test_array8_little<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>I&apos;m<sp/>converting<sp/>14<sp/>instead<sp/>of<sp/>16<sp/>bytes,<sp/>when<sp/>using<sp/>array8_to_array64<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>bytes<sp/>should<sp/>be<sp/>filled<sp/>with<sp/>zeroes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>test_array8_big{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01,<sp/>0x23,<sp/>0x45,<sp/>0x67,<sp/>0x89,<sp/>0xab,<sp/>0xcd,<sp/>0xef,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf0,<sp/>0xf1,<sp/>0xf2,<sp/>0xf3,<sp/>0xf4,<sp/>0xf5,<sp/>0x00,<sp/>0x00</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint64_t&gt;<sp/>test_array64_big{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0123456789abcdef,<sp/>0xf0f1f2f3f4f50000</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;<sp/>test_array8_little{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01,<sp/>0x23,<sp/>0x45,<sp/>0x67,<sp/>0x89,<sp/>0xab,<sp/>0xcd,<sp/>0xef,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xf7,<sp/>0xf6,<sp/>0xf5,<sp/>0xf4,<sp/>0xf3,<sp/>0xf2,<sp/>0x00,<sp/>0x00</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint64_t&gt;<sp/>test_array64_little{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xefcdab8967452301,<sp/>0x0000f2f3f4f5f6f7</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Big-endian<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1aa30219231e1ac7a89ef5d1fb44894e9e" kindref="member">array8_to_array64</ref>(test_array8_big.data(),<sp/>14,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>test_array64_big<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1af9f52b617e7434a421cd5f9de448b600" kindref="member">array64_to_array8</ref>(test_array64_big.data(),<sp/>2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>test_array8_big<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Little-endian<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1aa30219231e1ac7a89ef5d1fb44894e9e" kindref="member">array8_to_array64</ref>(test_array8_little.data(),<sp/>14,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>test_array64_little<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1util_1af9f52b617e7434a421cd5f9de448b600" kindref="member">array64_to_array8</ref>(test_array64_little.data(),<sp/>2,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>==<sp/>test_array8_little<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>openage::util::tests</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/misc_test.cpp"/>
  </compounddef>
</doxygen>
