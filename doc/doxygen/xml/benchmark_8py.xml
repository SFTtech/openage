<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="benchmark_8py" kind="file" language="Python">
    <compoundname>benchmark.py</compoundname>
    <innernamespace refid="namespaceopenage_1_1testing_1_1benchmark">openage::testing::benchmark</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceopenage_1_1testing_1_1benchmark" refkind="compound"><highlight class="comment">#<sp/>Copyright<sp/>2017-2017<sp/>the<sp/>openage<sp/>authors.<sp/>See<sp/>copying.md<sp/>for<sp/>legal<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Benchmarking<sp/>tools<sp/>for<sp/>the<sp/>tests.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>timeit<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>timeit</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>sys<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>stdout</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>time<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sleep</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenage_1_1testing_1_1benchmark_1a63d543b18c18976981995d7956092a6d" kindref="member">benchmark_test_function</ref>():</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Simple<sp/>function<sp/>to<sp/>call<sp/>in<sp/>for<sp/>benchmarking.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(0.1)</highlight></codeline>
<codeline lineno="13" refid="namespaceopenage_1_1testing_1_1benchmark_1a63d543b18c18976981995d7956092a6d" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceopenage_1_1testing_1_1benchmark_1a9d88a8b97d8fe4063e17de181c9d0d0d" kindref="member">benchmark</ref>(func):</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Benchmark<sp/>the<sp/>given<sp/>function.<sp/>Repeated<sp/>execution<sp/>helps<sp/>to<sp/>give<sp/>a<sp/>maximum<sp/>to</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>consumed<sp/>time,<sp/>until<sp/>one<sp/>iteration<sp/>takes<sp/>more<sp/>than<sp/>5s,<sp/>summed<sp/>up<sp/>10s.</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="namespaceopenage_1_1testing_1_1benchmark_1a9d88a8b97d8fe4063e17de181c9d0d0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>[(0,<sp/>1)]</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>number<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>=<sp/>[0,<sp/>0]</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>str_row_format<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{:10}<sp/>{:12}<sp/><sp/>{:11}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>row_format1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{:10}<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>row_format2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{:11.8f}s<sp/><sp/>{:10.8f}s&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>row_format<sp/>=<sp/>row_format1<sp/>+<sp/>row_format2</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>print(str_row_format.format(</highlight><highlight class="stringliteral">&quot;Iterations&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Average<sp/>time<sp/>per<sp/>execution&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>number<sp/>&lt;<sp/>4<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>result[-1][0]<sp/>&lt;<sp/>5<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>number<sp/>&lt;<sp/>65537:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(row_format1.format(number),<sp/>end=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout.flush()</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>=<sp/>timeit(stmt=func,<sp/>number=number)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.append((time,<sp/>number))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(row_format2.format(time,<sp/>time<sp/>/<sp/>number))</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total[0]<sp/>+=<sp/>number</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total[1]<sp/>+=<sp/>time</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdout.flush()</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>*=<sp/>2</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>del<sp/>result[0]</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>print()</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Benchmark<sp/>Results:<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;------------------&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>print(str_row_format.format(</highlight><highlight class="stringliteral">&quot;Iterations&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Total<sp/>time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Average<sp/>time<sp/>per<sp/>execution&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>print(row_format.format(total[0],<sp/>total[1],<sp/>total[1]<sp/>/<sp/>total[0]))</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jameson/Documents/git-projects/openage/openage/testing/benchmark.py"/>
  </compounddef>
</doxygen>
