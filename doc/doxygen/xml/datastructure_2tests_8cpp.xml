<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="datastructure_2tests_8cpp" kind="file" language="C++">
    <compoundname>tests.cpp</compoundname>
    <includes refid="datastructure_2tests_8h" local="yes">tests.h</includes>
    <includes local="no">utility</includes>
    <includes refid="testing_8h" local="yes">../testing/testing.h</includes>
    <includes refid="constexpr__map_8h" local="yes">constexpr_map.h</includes>
    <includes refid="pairing__heap_8h" local="yes">pairing_heap.h</includes>
    <incdepgraph>
      <node id="2920">
        <label>list</label>
      </node>
      <node id="2911">
        <label>atomic</label>
      </node>
      <node id="2916">
        <label>iomanip</label>
      </node>
      <node id="2893">
        <label>functional</label>
      </node>
      <node id="2906">
        <label>cstdint</label>
      </node>
      <node id="2914">
        <label>strings.h</label>
        <link refid="strings_8h"/>
        <childnode refid="2915" relation="include">
        </childnode>
        <childnode refid="2893" relation="include">
        </childnode>
        <childnode refid="2916" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2917" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2918" relation="include">
        </childnode>
      </node>
      <node id="2900">
        <label>stdexcept</label>
      </node>
      <node id="2919">
        <label>logsink.h</label>
        <link refid="logsink_8h"/>
        <childnode refid="2920" relation="include">
        </childnode>
        <childnode refid="2921" relation="include">
        </childnode>
        <childnode refid="2922" relation="include">
        </childnode>
      </node>
      <node id="2915">
        <label>cstdarg</label>
      </node>
      <node id="2901">
        <label>string</label>
      </node>
      <node id="2905">
        <label>../log/message.h</label>
        <link refid="message_8h"/>
        <childnode refid="2906" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2907" relation="include">
        </childnode>
        <childnode refid="2908" relation="include">
        </childnode>
        <childnode refid="2910" relation="include">
        </childnode>
        <childnode refid="2919" relation="include">
        </childnode>
        <childnode refid="2922" relation="include">
        </childnode>
      </node>
      <node id="2908">
        <label>../util/constexpr.h</label>
        <link refid="constexpr_8h"/>
        <childnode refid="2909" relation="include">
        </childnode>
      </node>
      <node id="2910">
        <label>../util/stringformatter.h</label>
        <link refid="stringformatter_8h"/>
        <childnode refid="2911" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2912" relation="include">
        </childnode>
        <childnode refid="2902" relation="include">
        </childnode>
        <childnode refid="2913" relation="include">
        </childnode>
        <childnode refid="2914" relation="include">
        </childnode>
      </node>
      <node id="2927">
        <label>unordered_set</label>
      </node>
      <node id="2894">
        <label>stddef.h</label>
      </node>
      <node id="2897">
        <label>../error/error.h</label>
        <link refid="error_2error_8h"/>
        <childnode refid="2898" relation="include">
        </childnode>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2900" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2902" relation="include">
        </childnode>
        <childnode refid="2905" relation="include">
        </childnode>
      </node>
      <node id="2925">
        <label>constexpr_map.h</label>
        <link refid="constexpr__map_8h"/>
        <childnode refid="2893" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2897" relation="include">
        </childnode>
      </node>
      <node id="2924">
        <label>typeinfo</label>
      </node>
      <node id="2892">
        <label>tests.h</label>
        <link refid="datastructure_2tests_8h"/>
        <childnode refid="2893" relation="include">
        </childnode>
        <childnode refid="2894" relation="include">
        </childnode>
      </node>
      <node id="2918">
        <label>vector</label>
      </node>
      <node id="2903">
        <label>ciso646</label>
      </node>
      <node id="2895">
        <label>utility</label>
      </node>
      <node id="2917">
        <label>sstream</label>
      </node>
      <node id="2902">
        <label>../util/compiler.h</label>
        <link refid="compiler_8h"/>
        <childnode refid="2903" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
        <childnode refid="2904" relation="include">
        </childnode>
      </node>
      <node id="2904">
        <label>signal.h</label>
        <link refid="signal_8h"/>
        <childnode refid="2904" relation="include">
        </childnode>
      </node>
      <node id="2913">
        <label>externalsstream.h</label>
        <link refid="externalsstream_8h"/>
        <childnode refid="2898" relation="include">
        </childnode>
        <childnode refid="2901" relation="include">
        </childnode>
      </node>
      <node id="2922">
        <label>level.h</label>
        <link refid="level_8h"/>
        <childnode refid="2923" relation="include">
        </childnode>
      </node>
      <node id="2909">
        <label>cstdlib</label>
      </node>
      <node id="2898">
        <label>iostream</label>
      </node>
      <node id="2926">
        <label>pairing_heap.h</label>
        <link refid="pairing__heap_8h"/>
        <childnode refid="2899" relation="include">
        </childnode>
        <childnode refid="2893" relation="include">
        </childnode>
        <childnode refid="2912" relation="include">
        </childnode>
        <childnode refid="2927" relation="include">
        </childnode>
        <childnode refid="2902" relation="include">
        </childnode>
        <childnode refid="2897" relation="include">
        </childnode>
      </node>
      <node id="2896">
        <label>../testing/testing.h</label>
        <link refid="testing_8h"/>
        <childnode refid="2897" relation="include">
        </childnode>
      </node>
      <node id="2921">
        <label>mutex</label>
      </node>
      <node id="2891">
        <label>C:/Users/Jameson/Documents/git-projects/openage/libopenage/datastructure/tests.cpp</label>
        <link refid="datastructure_2tests_8cpp"/>
        <childnode refid="2892" relation="include">
        </childnode>
        <childnode refid="2895" relation="include">
        </childnode>
        <childnode refid="2896" relation="include">
        </childnode>
        <childnode refid="2925" relation="include">
        </childnode>
        <childnode refid="2926" relation="include">
        </childnode>
      </node>
      <node id="2912">
        <label>type_traits</label>
      </node>
      <node id="2907">
        <label>config.h</label>
      </node>
      <node id="2899">
        <label>memory</label>
      </node>
      <node id="2923">
        <label>../util/enum.h</label>
        <link refid="enum_8h"/>
        <childnode refid="2898" relation="include">
        </childnode>
        <childnode refid="2924" relation="include">
        </childnode>
        <childnode refid="2902" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceopenage">openage</innernamespace>
    <innernamespace refid="namespaceopenage_1_1datastructure">openage::datastructure</innernamespace>
    <innernamespace refid="namespaceopenage_1_1datastructure_1_1tests">openage::datastructure::tests</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2014-2018<sp/>the<sp/>openage<sp/>authors.<sp/>See<sp/>copying.md<sp/>for<sp/>legal<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="datastructure_2tests_8h" kindref="compound">tests.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../testing/testing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="constexpr__map_8h" kindref="compound">constexpr_map.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pairing__heap_8h" kindref="compound">pairing_heap.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceopenage" kindref="compound">openage</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">datastructure<sp/>{</highlight></codeline>
<codeline lineno="15" refid="namespaceopenage_1_1datastructure_1_1tests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tests<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespaceopenage_1_1datastructure_1_1tests_1a57b696ae13dfb3c80d6c8cc7224b7c51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1a57b696ae13dfb3c80d6c8cc7224b7c51" kindref="member">pairing_heap_0</ref>()<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopenage_1_1datastructure_1_1_pairing_heap" kindref="compound">PairingHeap&lt;int&gt;</ref><sp/>heap{};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>(heap.size()<sp/>==<sp/>0)<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(0);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(1);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(2);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(3);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(4);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>01234</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.size(),<sp/>5);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.top(),<sp/>0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>1);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>3);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.size(),<sp/>1);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(10);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>0<sp/>4<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>4);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>10);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.size(),<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(5);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(5);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(5);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(5);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>5);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>5);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>5);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop(),<sp/>5);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.size(),<sp/>0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="namespaceopenage_1_1datastructure_1_1tests_1af82ba08f4a466babf0ca5ca833b91fa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1af82ba08f4a466babf0ca5ca833b91fa9" kindref="member">pairing_heap_1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopenage_1_1datastructure_1_1_pairing_heap" kindref="compound">PairingHeap&lt;heap_elem&gt;</ref><sp/>heap{};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.<ref refid="classopenage_1_1datastructure_1_1_pairing_heap_1a75e9e7602b59aeee47a2fd84a10c8f74" kindref="member">push</ref>(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{1});</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_u1<sp/>=<sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{2});</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{3});</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>2<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>node_u1-&gt;data.data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.decrease(node_u1);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0<sp/>1<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>0);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>1);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{4});</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{0});</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{2});</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{5});</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{1});</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{6});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node_u2<sp/>=<sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{7});</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{8});</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{9});</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{10});</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>update<sp/>the<sp/>7-node<sp/>to<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>node_u2-&gt;data.data<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.update(node_u2);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>8<sp/>8<sp/>9<sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>2);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>3);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>4);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>5);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>6);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>8);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>8);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>9);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>10);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="namespaceopenage_1_1datastructure_1_1tests_1a4fbf658dd2eeeb34fb83295dd631e280" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1a4fbf658dd2eeeb34fb83295dd631e280" kindref="member">pairing_heap_2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopenage_1_1datastructure_1_1_pairing_heap" kindref="compound">PairingHeap&lt;heap_elem&gt;</ref><sp/>heap{};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.<ref refid="classopenage_1_1datastructure_1_1_pairing_heap_1a75e9e7602b59aeee47a2fd84a10c8f74" kindref="member">push</ref>(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{1});</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{2});</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{3});</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>1<sp/>2<sp/>3,<sp/>now<sp/>remove<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.unlink_node(node);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>state:<sp/>1<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>1);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.pop().data,<sp/>3);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="namespaceopenage_1_1datastructure_1_1tests_1ae3ac08d1b58fe615f03e6332d84011af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1ae3ac08d1b58fe615f03e6332d84011af" kindref="member">pairing_heap_3</ref>()<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classopenage_1_1datastructure_1_1_pairing_heap" kindref="compound">PairingHeap&lt;heap_elem&gt;</ref><sp/>heap{};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.<ref refid="classopenage_1_1datastructure_1_1_pairing_heap_1a75e9e7602b59aeee47a2fd84a10c8f74" kindref="member">push</ref>(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{0});</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{1});</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{2});</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{3});</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{4});</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.push(<ref refid="structopenage_1_1datastructure_1_1tests_1_1heap__elem" kindref="compound">heap_elem</ref>{5});</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.pop();<sp/></highlight><highlight class="comment">//<sp/>trigger<sp/>pairing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>heap.clear();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.size(),<sp/>0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(heap.empty(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exported<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="namespaceopenage_1_1datastructure_1_1tests_1a68c5daac0260fc457d5916be54f20a82" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1a68c5daac0260fc457d5916be54f20a82" kindref="member">pairing_heap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1a57b696ae13dfb3c80d6c8cc7224b7c51" kindref="member">pairing_heap_0</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1af82ba08f4a466babf0ca5ca833b91fa9" kindref="member">pairing_heap_1</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1a4fbf658dd2eeeb34fb83295dd631e280" kindref="member">pairing_heap_2</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1ae3ac08d1b58fe615f03e6332d84011af" kindref="member">pairing_heap_3</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exported<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="namespaceopenage_1_1datastructure_1_1tests_1ade00c39e05018597baff76d22dedff44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceopenage_1_1datastructure_1_1tests_1ade00c39e05018597baff76d22dedff44" kindref="member">constexpr_map</ref>()<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;().size()<sp/>==<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;(std::make_pair(0,<sp/>42)).size()<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;(std::make_pair(0,<sp/>42),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37)).size()<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrong<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(not<sp/>create_const_map&lt;int,<sp/>int&gt;().contains(9001),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;empty<sp/>map<sp/>doesn&apos;t<sp/>contain<sp/>anything&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;(std::make_pair(42,<sp/>0),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37)).contains(42),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;contained<sp/>element<sp/>missing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;(std::make_pair(42,<sp/>0),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37)).contains(13),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;contained<sp/>element<sp/>missing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(not<sp/>create_const_map&lt;int,<sp/>int&gt;(std::make_pair(42,<sp/>0),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37)).contains(9001),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uncontained<sp/>element<sp/>seems<sp/>to<sp/>be<sp/>contained.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER<sp/>//<sp/>HACK:<sp/>MSVC<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>C++14<sp/>constexpr<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;(std::make_pair(42,<sp/>9001),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37)).get(42)<sp/>==<sp/>9001,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fetched<sp/>wrong<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(create_const_map&lt;int,<sp/>int&gt;(std::make_pair(42,<sp/>9001),</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37)).get(13)<sp/>==<sp/>37,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fetched<sp/>wrong<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cmap<sp/>=<sp/>create_const_map&lt;int,<sp/>int&gt;(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(0,<sp/>0),</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(13,<sp/>37),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(42,<sp/>9001)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>cmap.contains(0)<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>not<sp/>cmap.contains(18)<sp/>or<sp/><ref refid="testing_8h_1a32253726c81e858197f39fbf0b56d17c" kindref="member">TESTFAIL</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(cmap.size(),<sp/>3);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(cmap.get(13),<sp/>37);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testing_8h_1a57b089ad5d574fad716e3b140c80d0e5" kindref="member">TESTEQUALS</ref>(cmap.get(42),<sp/>9001);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//<sp/>openage::datastructure::tests</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Jameson/Documents/git-projects/openage/libopenage/datastructure/tests.cpp"/>
  </compounddef>
</doxygen>
