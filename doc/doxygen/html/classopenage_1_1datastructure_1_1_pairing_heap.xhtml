<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1datastructure_1_1_pairing_heap.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classopenage_1_1datastructure_1_1_pairing_heap-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_pairing_heap__coll__graph.svg" width="192" height="522"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aecca499825c32d9f3763c58d7b8f7482"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">node_t</a> = heapnode_t</td></tr>
<tr class="separator:aecca499825c32d9f3763c58d7b8f7482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af89a07b90150d0d4606787f0ac202242"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> = std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">node_t</a> &gt;</td></tr>
<tr class="separator:af89a07b90150d0d4606787f0ac202242"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97080dca2abefa0817478c009f2ca67b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a97080dca2abefa0817478c009f2ca67b">this_type</a> = <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a>&lt; T, compare, <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">node_t</a> &gt;</td></tr>
<tr class="separator:a97080dca2abefa0817478c009f2ca67b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f19a6e5b26897b3fa79ccf610e31add"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a1f19a6e5b26897b3fa79ccf610e31add">cmp_t</a> = compare</td></tr>
<tr class="separator:a1f19a6e5b26897b3fa79ccf610e31add"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2087411c07ffe7d5d0762a700ee4e34e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a2087411c07ffe7d5d0762a700ee4e34e">PairingHeap</a> ()</td></tr>
<tr class="separator:a2087411c07ffe7d5d0762a700ee4e34e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa219dc574937f546b210dd0c04836219"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aa219dc574937f546b210dd0c04836219">~PairingHeap</a> ()=default</td></tr>
<tr class="separator:aa219dc574937f546b210dd0c04836219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e9e7602b59aeee47a2fd84a10c8f74"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a> (const T &amp;item)</td></tr>
<tr class="separator:a75e9e7602b59aeee47a2fd84a10c8f74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a684440bcb0466bd64164e9fe7e9df954"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a684440bcb0466bd64164e9fe7e9df954">push</a> (T &amp;&amp;item)</td></tr>
<tr class="separator:a684440bcb0466bd64164e9fe7e9df954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6bcfcb890dd8d546b1b4c466cf09009"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">pop</a> ()</td></tr>
<tr class="separator:ac6bcfcb890dd8d546b1b4c466cf09009"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17677ec830613746e38124b2eac7d2e6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">pop_node</a> ()</td></tr>
<tr class="separator:a17677ec830613746e38124b2eac7d2e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f6c87e73e47397b92a2766989a30c0f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a8f6c87e73e47397b92a2766989a30c0f">unlink_node</a> (const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node)</td></tr>
<tr class="separator:a8f6c87e73e47397b92a2766989a30c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad22ca21f8e7319ea14cd3e14cf5274c4"><td class="memItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ad22ca21f8e7319ea14cd3e14cf5274c4">top</a> () const</td></tr>
<tr class="separator:ad22ca21f8e7319ea14cd3e14cf5274c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74c5545ea2c581782effc648a0ecefab"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a74c5545ea2c581782effc648a0ecefab">top_node</a> () const</td></tr>
<tr class="separator:a74c5545ea2c581782effc648a0ecefab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94d37206816a45bcfe49f8631cc82a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ab94d37206816a45bcfe49f8631cc82a9">decrease</a> (const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node)</td></tr>
<tr class="separator:ab94d37206816a45bcfe49f8631cc82a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab81daeebac3d236ced4a85117483d76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aab81daeebac3d236ced4a85117483d76">update</a> (const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node)</td></tr>
<tr class="separator:aab81daeebac3d236ced4a85117483d76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a012519defd709aacae622b276c3f85eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a012519defd709aacae622b276c3f85eb">clear</a> ()</td></tr>
<tr class="separator:a012519defd709aacae622b276c3f85eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45599db3b89b27ad5c53ca900a67df85"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a45599db3b89b27ad5c53ca900a67df85">size</a> () const</td></tr>
<tr class="separator:a45599db3b89b27ad5c53ca900a67df85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a529d5ee64fa5002f6487d3821df5f6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">empty</a> () const</td></tr>
<tr class="separator:a7a529d5ee64fa5002f6487d3821df5f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59f56ca7e64a9a61213fb367da2be7ca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a59f56ca7e64a9a61213fb367da2be7ca">iter_all</a> (const std::function&lt; void(const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;)&gt; &amp;func) const</td></tr>
<tr class="separator:a59f56ca7e64a9a61213fb367da2be7ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a95fa745e6a81de8caae638621137d504"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">walk_tree</a> (const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;root, const std::function&lt; void(const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;)&gt; &amp;func) const</td></tr>
<tr class="separator:a95fa745e6a81de8caae638621137d504"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a493b9b6b7e82fe0633df628a2aa248e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">push_node</a> (const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node)</td></tr>
<tr class="separator:a493b9b6b7e82fe0633df628a2aa248e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b5d27df523155450ae777c9aa40f20"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af0b5d27df523155450ae777c9aa40f20">root_insert</a> (const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node)</td></tr>
<tr class="separator:af0b5d27df523155450ae777c9aa40f20"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a902a1342c704db376899206112ced595"><td class="memItemLeft" align="right" valign="top">compare&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a902a1342c704db376899206112ced595">cmp</a></td></tr>
<tr class="separator:a902a1342c704db376899206112ced595"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42a1379cfdaf1a7f2a5ff4da9544d9f7"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a></td></tr>
<tr class="separator:a42a1379cfdaf1a7f2a5ff4da9544d9f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a850aad20a2be9bfe164499a4462965b4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a></td></tr>
<tr class="separator:a850aad20a2be9bfe164499a4462965b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt;<br />
class openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;</h3>

<p>(Quite) efficient heap implementation. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00037">37</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a1f19a6e5b26897b3fa79ccf610e31add"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f19a6e5b26897b3fa79ccf610e31add">&#9670;&nbsp;</a></span>cmp_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a1f19a6e5b26897b3fa79ccf610e31add">cmp_t</a> =  compare</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00200">200</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="af89a07b90150d0d4606787f0ac202242"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af89a07b90150d0d4606787f0ac202242">&#9670;&nbsp;</a></span>element_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> =  std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">node_t</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00198">198</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="aecca499825c32d9f3763c58d7b8f7482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aecca499825c32d9f3763c58d7b8f7482">&#9670;&nbsp;</a></span>node_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">node_t</a> =  heapnode_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00197">197</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a97080dca2abefa0817478c009f2ca67b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97080dca2abefa0817478c009f2ca67b">&#9670;&nbsp;</a></span>this_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a97080dca2abefa0817478c009f2ca67b">this_type</a> =  <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a>&lt;T, compare, <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">node_t</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00199">199</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a2087411c07ffe7d5d0762a700ee4e34e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2087411c07ffe7d5d0762a700ee4e34e">&#9670;&nbsp;</a></span>PairingHeap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>create a empty heap. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00205">205</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="aa219dc574937f546b210dd0c04836219"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa219dc574937f546b210dd0c04836219">&#9670;&nbsp;</a></span>~PairingHeap()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::~<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a012519defd709aacae622b276c3f85eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a012519defd709aacae622b276c3f85eb">&#9670;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>erase all elements on the heap. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00411">411</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="ab94d37206816a45bcfe49f8631cc82a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab94d37206816a45bcfe49f8631cc82a9">&#9670;&nbsp;</a></span>decrease()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::decrease </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>You must call this after the node data decreased. This cuts the subtree and links the subtree again. If the node value <em>increased</em> and you call this, the heap is corrupted. Also known as the decrease_key operation.</p>
<p>O(1) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00380">380</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a7a529d5ee64fa5002f6487d3821df5f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a529d5ee64fa5002f6487d3821df5f6">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether there are no nodes stored on the heap. </dd></dl>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00429">429</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a59f56ca7e64a9a61213fb367da2be7ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59f56ca7e64a9a61213fb367da2be7ca">&#9670;&nbsp;</a></span>iter_all()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::iter_all </td>
          <td>(</td>
          <td class="paramtype">const std::function&lt; void(const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>func</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00585">585</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="ac6bcfcb890dd8d546b1b4c466cf09009"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6bcfcb890dd8d546b1b4c466cf09009">&#9670;&nbsp;</a></span>pop()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::pop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>returns and removes the smallest item on the heap. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00236">236</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a17677ec830613746e38124b2eac7d2e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17677ec830613746e38124b2eac7d2e6">&#9670;&nbsp;</a></span>pop_node()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::pop_node </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>returns the smallest item on the heap and deletes it. also known as delete_min.</p>
<hr/>
<p> Ω(log log n), O(2^(2*√log log n')) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00246">246</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a75e9e7602b59aeee47a2fd84a10c8f74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75e9e7602b59aeee47a2fd84a10c8f74">&#9670;&nbsp;</a></span>push() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::push </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>adds the given item to the heap. O(1) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00217">217</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a684440bcb0466bd64164e9fe7e9df954"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a684440bcb0466bd64164e9fe7e9df954">&#9670;&nbsp;</a></span>push() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::push </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>moves the given item to the heap. O(1) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00227">227</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a493b9b6b7e82fe0633df628a2aa248e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a493b9b6b7e82fe0633df628a2aa248e7">&#9670;&nbsp;</a></span>push_node()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::push_node </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>adds the given node to the heap. use this if the node was not in the heap before. O(1) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00613">613</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="af0b5d27df523155450ae777c9aa40f20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b5d27df523155450ae777c9aa40f20">&#9670;&nbsp;</a></span>root_insert()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::root_insert </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>insert a node into the heap. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00629">629</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a45599db3b89b27ad5c53ca900a67df85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45599db3b89b27ad5c53ca900a67df85">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of nodes stored on the heap. </dd></dl>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00422">422</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="ad22ca21f8e7319ea14cd3e14cf5274c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad22ca21f8e7319ea14cd3e14cf5274c4">&#9670;&nbsp;</a></span>top()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T&amp; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::top </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the smallest item on the heap. O(1) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00358">358</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a74c5545ea2c581782effc648a0ecefab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74c5545ea2c581782effc648a0ecefab">&#9670;&nbsp;</a></span>top_node()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a>&amp; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::top_node </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the smallest node on the heap.</p>
<p>O(1) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00367">367</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a8f6c87e73e47397b92a2766989a30c0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f6c87e73e47397b92a2766989a30c0f">&#9670;&nbsp;</a></span>unlink_node()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::unlink_node </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Unlink a node from the heap.</p>
<p>If the item is the current root, just <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">pop()</a>. else, cut the node from its parent, <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">pop()</a> that subtree and merge these trees.</p>
<p>O(pop_node) </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00334">334</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="aab81daeebac3d236ced4a85117483d76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab81daeebac3d236ced4a85117483d76">&#9670;&nbsp;</a></span>update()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::update </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>After a change, call this to reorganize the given node. Support increase and decrease of values.</p>
<p>Use <code>decrease</code> instead when you know the value decreased.</p>
<p>O(1) (but slower than decrease), and O(pop) when node is the root. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00397">397</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a95fa745e6a81de8caae638621137d504"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95fa745e6a81de8caae638621137d504">&#9670;&nbsp;</a></span>walk_tree()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::walk_tree </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::function&lt; void(const <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;)&gt; &amp;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00590">590</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a902a1342c704db376899206112ced595"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a902a1342c704db376899206112ced595">&#9670;&nbsp;</a></span>cmp</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">compare <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::cmp</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00638">638</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a42a1379cfdaf1a7f2a5ff4da9544d9f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42a1379cfdaf1a7f2a5ff4da9544d9f7">&#9670;&nbsp;</a></span>node_count</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::node_count</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00639">639</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="a850aad20a2be9bfe164499a4462965b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a850aad20a2be9bfe164499a4462965b4">&#9670;&nbsp;</a></span>root_node</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T, typename compare = std::less&lt;T&gt;, typename heapnode_t = PairingHeapNode&lt;T, compare&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a>&lt; T, compare, heapnode_t &gt;::root_node</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00640">640</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>libopenage/datastructure/<a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1datastructure.xhtml">datastructure</a></li><li class="navelem"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
