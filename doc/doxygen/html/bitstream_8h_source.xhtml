<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: libopenage/util/compress/bitstream.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('bitstream_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">bitstream.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="bitstream_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2017 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;../../error/error.h&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;../compiler.h&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span>util {</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util_1_1compress.xhtml">   15</a></span>&#160;<span class="keyword">namespace </span>compress {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util_1_1compress.xhtml#a129fc036a27a40e60785ce5bb1aa5627">   23</a></span>&#160;<span class="keyword">using</span> <a class="code" href="namespaceopenage_1_1util_1_1compress.xhtml#a129fc036a27a40e60785ce5bb1aa5627">read_callback_t</a> = std::function&lt;size_t (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *buf, <span class="keywordtype">size_t</span> size)&gt;;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> inbuf_size&gt;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml">   69</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml">BitStream</a> {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af838909174b3ceb524b2a84d601eae40">   74</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af838909174b3ceb524b2a84d601eae40">eof</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">   80</a></span>&#160;    <a class="code" href="namespaceopenage_1_1util_1_1compress.xhtml#a129fc036a27a40e60785ce5bb1aa5627">read_callback_t</a> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">read_callback</a>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aa35e71c7747a466560300921128c0311">   86</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aa35e71c7747a466560300921128c0311">inbuf</a>[inbuf_size];</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">   91</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">i_ptr</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ae7ce94956c72390c58d9a73752b4b78a">   96</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ae7ce94956c72390c58d9a73752b4b78a">i_end</a>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">  104</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">  111</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">bits_left</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaba7eceb80262c8b4e5c8e5bef734b41">  117</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaba7eceb80262c8b4e5c8e5bef734b41">stream_position</a>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ad394c424cb9dce3e7c79e07dacafee60">  122</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ad394c424cb9dce3e7c79e07dacafee60">bitstream_mode</a>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a3dd5d41385065ddc49e0038916e68197">  127</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a3dd5d41385065ddc49e0038916e68197">input_bytes_available</a>() {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(this-&gt;i_ptr &gt; this-&gt;i_end)) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;input byte buffer state invalid: i_ptr &gt; i_end&quot;</span>);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">return</span> this-&gt;i_end - this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">i_ptr</a>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a9acf1a67f1d14213c39e611068f8d435">  140</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a9acf1a67f1d14213c39e611068f8d435">ensure_input_bytes</a>() {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// check if we need to actually read some bytes.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a3dd5d41385065ddc49e0038916e68197">input_bytes_available</a>() == 0) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="comment">// fill the entire input buffer.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a> = this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">read_callback</a>(this-&gt;inbuf, inbuf_size);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">// we might overrun the input stream by asking for bits we don&#39;t use,</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="comment">// so fake 2 more bytes at the end of input</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a> == 0)) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">if</span> (this-&gt;eof) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Unexpected EOF in the middle of a block&quot;</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                    <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a> = 2;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    this-&gt;inbuf[0] = 0;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    this-&gt;inbuf[1] = 0;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    this-&gt;eof = <span class="keyword">true</span>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a> &gt; (<span class="keywordtype">int</span>) inbuf_size)) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;read() returned more data than requested&quot;</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="comment">// update i_ptr and i_end</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            this-&gt;i_ptr = this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aa35e71c7747a466560300921128c0311">inbuf</a>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            this-&gt;i_end = &amp;this-&gt;inbuf[<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a>];</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="comment">// check if the reading was successful.</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(this-&gt;i_ptr &gt;= this-&gt;i_end)) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;input byte buffer empty: failed to ensure_input_bytes&quot;</span>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">     * allow our friend HuffmanTable to directly use ensure_bits, peek_bits and remove_bits.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> maxsymbols_p, <span class="keywordtype">unsigned</span> tablebits_p, <span class="keywordtype">bool</span> allow_empty&gt;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a50503bd5290c8f14fae50bd980edc92a">  178</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">HuffmanTable</a>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaca412bb0ba077bf3239ec39b1f2fa82">  185</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaca412bb0ba077bf3239ec39b1f2fa82">load_next_16_bits</a>() {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// example: input stream contains bytes A, B. previous byte was J.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// 5 bits are left</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">// bit buffer is:                     jjjjj000 00000000 00000000 00000000</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="comment">// ensure_bits(9) is called.</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment">// b0 = aaaaaaaa</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// b1 = bbbbbbbb</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="comment">// bit_buffer |= bbbbbbbb aaaaaaaa &lt;&lt; (32 - 16 - 5) == 11</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">// new bit buffer:                    jjjjjbbb bbbbbaaa aaaaa000 00000000</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="comment">// read two bytes to b0, b1</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a9acf1a67f1d14213c39e611068f8d435">ensure_input_bytes</a>();</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> b0 = *<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">i_ptr</a>++;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a9acf1a67f1d14213c39e611068f8d435">ensure_input_bytes</a>();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> b1 = *<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">i_ptr</a>++;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="comment">// inject bits into bit_buffer</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a> |= ((b1 &lt;&lt; 8) | b0) &lt;&lt; (<span class="keyword">sizeof</span>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a>) * 8 - 16 - <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">bits_left</a>);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">bits_left</a> += 16;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">  214</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">ensure_bits</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits) {</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(!this-&gt;bitstream_mode)) {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;instream: attempted to ensure bits while in bytestream mode&quot;</span>);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        }</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">while</span> (<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">bits_left</a> &lt; nbits) {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaca412bb0ba077bf3239ec39b1f2fa82">load_next_16_bits</a>();</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">  229</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">peek_bits</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits) {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="comment">// example: bit buffer is:   abcdefgh ijkl0000 00000000 00000000</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="comment">// peek_bits(3) is called.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="comment">// return (bit_buffer &gt;&gt; (32 - 3) == 29</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="comment">// returned value is:        abc</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">ensure_bits</a>(nbits);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">return</span> (<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a> &gt;&gt; (<span class="keyword">sizeof</span>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a>) * 8 - nbits));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">  247</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">remove_bits</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="comment">// example: bit buffer is:  abcdefgh ijkl0000 00000000 00000000</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">// remove_bits(3) is called.</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="comment">// bit_buffer &lt;&lt;= 3</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="comment">//</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="comment">// resulting bit buffer is: defghijk l0000000 00000000 00000000</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">ensure_bits</a>(nbits);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a> &lt;&lt;= nbits;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">bits_left</a> -= nbits;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        this-&gt;stream_position += nbits;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a29bf6b73c439be6e72434af82309bc54">  269</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a29bf6b73c439be6e72434af82309bc54">align_bitstream</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> min_discard=0) {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits = this-&gt;stream_position % 16;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">if</span> (nbits != 0) {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            nbits = 16 - nbits;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        }</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">while</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(nbits &lt; min_discard)) {</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            nbits += 16;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">if</span> (nbits == 0) {</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">peek_bits</a>(nbits)) {</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">auto</span> errmsg = <a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>);</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            errmsg &lt;&lt; <span class="stringliteral">&quot;attempted to discard &quot;</span> &lt;&lt; nbits &lt;&lt; <span class="stringliteral">&quot; non-null bits: &quot;</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> ctr = 1; ctr &lt;= nbits; ctr++) {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                errmsg &lt;&lt; (this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">peek_bits</a>(ctr) &amp; 1);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            }</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(errmsg);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">remove_bits</a>(nbits);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a58f06b5edf346fb0c963a2f2c246021e">  295</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a58f06b5edf346fb0c963a2f2c246021e">BitStream</a>(<a class="code" href="namespaceopenage_1_1util_1_1compress.xhtml#a129fc036a27a40e60785ce5bb1aa5627">read_callback_t</a> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">read_callback</a>)</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        :</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af838909174b3ceb524b2a84d601eae40">eof</a>{<span class="keyword">false</span>},</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">read_callback</a>{<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">read_callback</a>},</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">i_ptr</a>{<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aa35e71c7747a466560300921128c0311">inbuf</a>},</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ae7ce94956c72390c58d9a73752b4b78a">i_end</a>{<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aa35e71c7747a466560300921128c0311">inbuf</a>},</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a>{0},</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">bits_left</a>{0},</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaba7eceb80262c8b4e5c8e5bef734b41">stream_position</a>{0},</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ad394c424cb9dce3e7c79e07dacafee60">bitstream_mode</a>{<span class="keyword">true</span>} {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        static_assert(inbuf_size &gt;= 2, <span class="stringliteral">&quot;inbuf size must be at least 2&quot;</span>);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        static_assert(inbuf_size % 2 == 0, <span class="stringliteral">&quot;inbuf size must be even&quot;</span>);</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">  315</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">read_bits</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits) {</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordtype">unsigned</span> ret = <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">peek_bits</a>(nbits);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">remove_bits</a>(nbits);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">  329</a></span>&#160;    <span class="keywordtype">unsigned</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *buf, <span class="keywordtype">unsigned</span> count) {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(this-&gt;bitstream_mode == <span class="keyword">true</span>)) {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;attempt to read_bytes while in bitstream mode&quot;</span>);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a9acf1a67f1d14213c39e611068f8d435">ensure_input_bytes</a>();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> available = this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a3dd5d41385065ddc49e0038916e68197">input_bytes_available</a>();</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="keywordflow">if</span> (available &lt; count) {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            count = available;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        memcpy(buf, this-&gt;i_ptr, count);</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        this-&gt;i_ptr += count;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        this-&gt;stream_position += count;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">return</span> count;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    }</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">  353</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">read_single_byte</a>() {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> buf;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">read_bytes</a>(&amp;buf, 1) != 1)) {</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;failed to read single byte in bytestream mode&quot;</span>);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        }</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keywordflow">return</span> buf;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a80c91d5b7ddc061dd9082827286f0e1e">  368</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a80c91d5b7ddc061dd9082827286f0e1e">read_4bytes_le</a>() {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>  = this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">read_single_byte</a>() &lt;&lt;  0;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        result |= this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">read_single_byte</a>() &lt;&lt;  8;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        result |= this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">read_single_byte</a>() &lt;&lt; 16;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        result |= this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">read_single_byte</a>() &lt;&lt; 24;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a0a33a092ac1b0b664ecf4ced11e1a313">  384</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a0a33a092ac1b0b664ecf4ced11e1a313">switch_to_bitstream_mode</a>() {</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">if</span> (this-&gt;bitstream_mode == <span class="keyword">true</span>) {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">if</span> (this-&gt;stream_position &amp; 1) {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="comment">// bytestream hat odd length; discard one nullbyte.</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> data = this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">read_single_byte</a>();</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;            <span class="keywordflow">if</span> (data != 0) {</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>).fmt(<span class="stringliteral">&quot;attempted to discard a non-zero byte at end of bytestream: %02x&quot;</span>, data));</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            }</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        }</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        this-&gt;bitstream_mode = <span class="keyword">true</span>;</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        this-&gt;stream_position = 0;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af9c25fda38455fbfc348a777e109d03e">  406</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af9c25fda38455fbfc348a777e109d03e">switch_to_bytestream_mode</a>() {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">if</span> (this-&gt;bitstream_mode == <span class="keyword">false</span>) {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <span class="keywordflow">return</span>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        }</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="comment">// for some weird reason, the alignment padding here is 1 to 16 bits, not 0 to 15.</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="comment">// thus, discard an additional bit.</span></div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a29bf6b73c439be6e72434af82309bc54">align_bitstream</a>(1);</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        this-&gt;bitstream_mode = <span class="keyword">false</span>;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        this-&gt;stream_position = 0;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        <span class="keywordflow">if</span> (this-&gt;bits_left) {</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;bits left after switching to bytestream mode: &quot;</span> &lt;&lt; this-&gt;bits_left);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        }</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a9740c842e2425f54ddfc168c0df8bb">  428</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a9740c842e2425f54ddfc168c0df8bb">align_if_in_bitstream_mode</a>() {</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordflow">if</span> (this-&gt;bitstream_mode == <span class="keyword">true</span>) {</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a29bf6b73c439be6e72434af82309bc54">align_bitstream</a>();</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    }</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;};</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;}}} <span class="comment">// openage::util::compress</span></div><div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a7a9740c842e2425f54ddfc168c0df8bb"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a9740c842e2425f54ddfc168c0df8bb">openage::util::compress::BitStream::align_if_in_bitstream_mode</a></div><div class="ttdeci">void align_if_in_bitstream_mode()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00428">bitstream.h:428</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_ac38c2ac02d9fa968f2c3e74a404e4014"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ac38c2ac02d9fa968f2c3e74a404e4014">openage::util::compress::BitStream::read_bytes</a></div><div class="ttdeci">unsigned read_bytes(unsigned char *buf, unsigned count)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00329">bitstream.h:329</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a3dd5d41385065ddc49e0038916e68197"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a3dd5d41385065ddc49e0038916e68197">openage::util::compress::BitStream::input_bytes_available</a></div><div class="ttdeci">unsigned int input_bytes_available()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00127">bitstream.h:127</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_aaba7eceb80262c8b4e5c8e5bef734b41"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaba7eceb80262c8b4e5c8e5bef734b41">openage::util::compress::BitStream::stream_position</a></div><div class="ttdeci">size_t stream_position</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00117">bitstream.h:117</a></div></div>
<div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_affde2836bacf9c151d2e948c6a63142c"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">openage::util::compress::BitStream::bit_buffer</a></div><div class="ttdeci">unsigned int bit_buffer</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00104">bitstream.h:104</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a2cb36e4bf92437f4d9f6a9f56709c5d4"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2cb36e4bf92437f4d9f6a9f56709c5d4">openage::util::compress::BitStream::read_callback</a></div><div class="ttdeci">read_callback_t read_callback</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00080">bitstream.h:80</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a2bb87ab9b57a3a5ef8f492c4cbe12b40"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">openage::util::compress::BitStream::peek_bits</a></div><div class="ttdeci">unsigned peek_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00229">bitstream.h:229</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_aa35e71c7747a466560300921128c0311"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aa35e71c7747a466560300921128c0311">openage::util::compress::BitStream::inbuf</a></div><div class="ttdeci">unsigned char inbuf[inbuf_size]</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00086">bitstream.h:86</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_af9c25fda38455fbfc348a777e109d03e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af9c25fda38455fbfc348a777e109d03e">openage::util::compress::BitStream::switch_to_bytestream_mode</a></div><div class="ttdeci">void switch_to_bytestream_mode()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00406">bitstream.h:406</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a5a9875f4e718027a319d43a5939d9d95"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">openage::util::compress::BitStream::ensure_bits</a></div><div class="ttdeci">void ensure_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00214">bitstream.h:214</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a58f06b5edf346fb0c963a2f2c246021e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a58f06b5edf346fb0c963a2f2c246021e">openage::util::compress::BitStream::BitStream</a></div><div class="ttdeci">BitStream(read_callback_t read_callback)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00295">bitstream.h:295</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_ad394c424cb9dce3e7c79e07dacafee60"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ad394c424cb9dce3e7c79e07dacafee60">openage::util::compress::BitStream::bitstream_mode</a></div><div class="ttdeci">bool bitstream_mode</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00122">bitstream.h:122</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a29bf6b73c439be6e72434af82309bc54"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a29bf6b73c439be6e72434af82309bc54">openage::util::compress::BitStream::align_bitstream</a></div><div class="ttdeci">void align_bitstream(unsigned int min_discard=0)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00269">bitstream.h:269</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a80c91d5b7ddc061dd9082827286f0e1e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a80c91d5b7ddc061dd9082827286f0e1e">openage::util::compress::BitStream::read_4bytes_le</a></div><div class="ttdeci">unsigned int read_4bytes_le()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00368">bitstream.h:368</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a0a33a092ac1b0b664ecf4ced11e1a313"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a0a33a092ac1b0b664ecf4ced11e1a313">openage::util::compress::BitStream::switch_to_bitstream_mode</a></div><div class="ttdeci">void switch_to_bitstream_mode()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00384">bitstream.h:384</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a9acf1a67f1d14213c39e611068f8d435"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a9acf1a67f1d14213c39e611068f8d435">openage::util::compress::BitStream::ensure_input_bytes</a></div><div class="ttdeci">void ensure_input_bytes()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00140">bitstream.h:140</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml">openage::util::compress::BitStream</a></div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00069">bitstream.h:69</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a7a6ffb1cd9c139eeaf11f1bfec7bc444"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">openage::util::compress::BitStream::remove_bits</a></div><div class="ttdeci">void remove_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00247">bitstream.h:247</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_aaca412bb0ba077bf3239ec39b1f2fa82"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#aaca412bb0ba077bf3239ec39b1f2fa82">openage::util::compress::BitStream::load_next_16_bits</a></div><div class="ttdeci">void load_next_16_bits()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00185">bitstream.h:185</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a135389936c8b0ccb1040d3dfcb891fcb"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a135389936c8b0ccb1040d3dfcb891fcb">openage::util::compress::BitStream::i_ptr</a></div><div class="ttdeci">unsigned char * i_ptr</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00091">bitstream.h:91</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1compress_xhtml_a129fc036a27a40e60785ce5bb1aa5627"><div class="ttname"><a href="namespaceopenage_1_1util_1_1compress.xhtml#a129fc036a27a40e60785ce5bb1aa5627">openage::util::compress::read_callback_t</a></div><div class="ttdeci">std::function&lt; size_t(unsigned char *buf, size_t size)&gt; read_callback_t</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00023">bitstream.h:23</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a32ee58040a10ca9b1b347f7d535d6439"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a32ee58040a10ca9b1b347f7d535d6439">openage::util::compress::BitStream::read_single_byte</a></div><div class="ttdeci">unsigned char read_single_byte()</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00353">bitstream.h:353</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_af4522bbae0ee989e1f5b45606fb2e673"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">openage::util::compress::BitStream::read_bits</a></div><div class="ttdeci">unsigned read_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00315">bitstream.h:315</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_ae7ce94956c72390c58d9a73752b4b78a"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#ae7ce94956c72390c58d9a73752b4b78a">openage::util::compress::BitStream::i_end</a></div><div class="ttdeci">unsigned char * i_end</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00096">bitstream.h:96</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a></div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00094">lzxd.cpp:94</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a21ca9188361a3509167a4aec70f31f75"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a21ca9188361a3509167a4aec70f31f75">openage::util::compress::BitStream::bits_left</a></div><div class="ttdeci">unsigned int bits_left</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00111">bitstream.h:111</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_af838909174b3ceb524b2a84d601eae40"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af838909174b3ceb524b2a84d601eae40">openage::util::compress::BitStream::eof</a></div><div class="ttdeci">unsigned char eof</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00074">bitstream.h:74</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="dir_ba3d381123465cb5dd7373109ded0835.xhtml">compress</a></li><li class="navelem"><a class="el" href="bitstream_8h.xhtml">bitstream.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
