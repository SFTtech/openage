<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/rng/rng.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('rng_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">rng.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="rng_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2017 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="rng_8h.xhtml">rng.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;../util/timing.h&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;../util/hash.h&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;../error/error.h&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">namespace </span>rng {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// Key for seed hashing, just some hardcoded key</span></div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#ade4748f2ea78310c4c2d84f1ce7d1990">   27</a></span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;uint8_t, 16&gt; <a class="code" href="namespaceopenage_1_1rng.xhtml#ade4748f2ea78310c4c2d84f1ce7d1990">seed_key</a> {{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    0xba, 0xda, 0x55, 0x00, 0x5e, 0xed, 0x00, 0x00,</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    0xab, 0xcd, 0xef, 0x12, 0x34, 0x56, 0x78, 0x90</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;}};</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ade1468036c9d6dcb19a7d32b500e049b">   33</a></span>&#160;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ade1468036c9d6dcb19a7d32b500e049b">RNG::RNG</a>(uint64_t v1) {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">seed</a>(v1);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a7a75b6d2b1900c1166d7aeea9c777f6f">   38</a></span>&#160;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ade1468036c9d6dcb19a7d32b500e049b">RNG::RNG</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *data, <span class="keywordtype">size_t</span> len) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">seed</a>(data, len);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a7afae418b44df4e10bbb3fcd09c21f56">   43</a></span>&#160;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ade1468036c9d6dcb19a7d32b500e049b">RNG::RNG</a>(<span class="keyword">const</span> std::string &amp;instr) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ad4167cc984c7979737fe798e9b79265f">from_string</a>(instr);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a7d14a4486213742ed28bcdd360cf0dc9">   48</a></span>&#160;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ade1468036c9d6dcb19a7d32b500e049b">RNG::RNG</a>(std::istream &amp;instream) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ae7d9467b4f3d76c68a9a7f85a78510cd">from_stream</a>(instream);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">   53</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">RNG::seed</a>(uint64_t <a class="code" href="constinit__vector_8cpp.xhtml#aa0ccb5ee6d882ee3605ff47745c6467b">val</a>) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">seed</a>(&amp;val, <span class="keyword">sizeof</span>(<a class="code" href="constinit__vector_8cpp.xhtml#aa0ccb5ee6d882ee3605ff47745c6467b">val</a>));</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a196e215960939e55ac626c9c75a451e0">   58</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">RNG::seed</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *dat, <span class="keywordtype">size_t</span> count) {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span> (count == 0) {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;0 bytes supplied as seed data&quot;</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> uint8_t *data = static_cast&lt;const uint8_t *&gt;(dat);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_siphash.xhtml">openage::util::Siphash</a> <a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>(<a class="code" href="namespaceopenage_1_1rng.xhtml#ade4748f2ea78310c4c2d84f1ce7d1990">seed_key</a>);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[0] = <a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>.digest(data, count);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// Previously, for state[1] we hashed (data ^ state[0])</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// As `data` now has variable length I can&#39;t do that, I think that just</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// hashing `state[0]` is enough</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[1] = <a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>.digest(<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[0]);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="comment">// This helps prevent low-zero states caused by a bad seed</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a36e03ae10106b4de88c7af38f0c0dedc">discard</a>(<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ad04d259df8af8d4f0bc1deed13641a12">discard_on_seed</a>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> * actually does the number crunching and state updates</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * http://en.wikipedia.org/wiki/Xorshift</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">   82</a></span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> uint64_t <a class="code" href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">do_rng</a>(uint64_t &amp;s0, uint64_t &amp;s1) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    s1 ^= s1 &lt;&lt; 23;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    s1 = (s1 ^ s0 ^ (s1 &gt;&gt; 17) ^ (s0 &gt;&gt; 26));</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> s1 + s0;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a95f8c2c7e00ab2531e0e6c33ae70e154">   89</a></span>&#160;uint64_t <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a95f8c2c7e00ab2531e0e6c33ae70e154">RNG::random</a>() {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    std::swap(this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[0], this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[1]);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">do_rng</a>(this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[0], this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[1]);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> * Provides serious performance optimizations over the standard</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * generator by eliminating memory writes and data dependencies.</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Lambda&gt;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#acffdd6abc0140eac8c12d879172f8566">  100</a></span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1rng.xhtml#acffdd6abc0140eac8c12d879172f8566">act_fill</a>(T *dat, uint64_t *state,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                            <span class="keywordtype">size_t</span> len, <span class="keyword">const</span> Lambda &amp;op) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    uint64_t s0 = state[0];</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    uint64_t s1 = state[1];</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">size_t</span> ev_len = len - (len &amp; 1);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; ev_len; i += 2) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        op(<a class="code" href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">do_rng</a>(s1, s0), dat, i);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        op(<a class="code" href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">do_rng</a>(s0, s1), dat, i + 1);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">if</span> (len &amp; 1) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        op(<a class="code" href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">do_rng</a>(s1, s0), dat, len-1);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        std::swap(s1, s0);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    state[0] = s0;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    state[1] = s1;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a77a4af9133abbcd242c9adf3921bbd89">  120</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a77a4af9133abbcd242c9adf3921bbd89">RNG::fill</a>(uint64_t *dat, <span class="keywordtype">size_t</span> len) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    act_fill&lt;&gt;(</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        dat, this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>, len,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        [](uint64_t v, uint64_t *d, <span class="keywordtype">size_t</span> i) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            d[i] = v;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    );</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a36e03ae10106b4de88c7af38f0c0dedc">  130</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a36e03ae10106b4de88c7af38f0c0dedc">RNG::discard</a>(<span class="keywordtype">size_t</span> len) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    act_fill&lt;uint64_t&gt;(</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keyword">nullptr</span>, this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>, len,</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        [](uint64_t, uint64_t *, <span class="keywordtype">size_t</span>) {}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    );</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;}</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ab7dbd0bef0c06a30b6724f2352af833c">  138</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ab7dbd0bef0c06a30b6724f2352af833c">RNG::fill_real</a>(<span class="keywordtype">double</span> *dat, <span class="keywordtype">size_t</span> len) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespaceopenage_1_1rng.xhtml#acffdd6abc0140eac8c12d879172f8566">act_fill</a>(</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        dat, this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>, len,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        [](<span class="keywordtype">double</span> v, <span class="keywordtype">double</span> *d, <span class="keywordtype">size_t</span> i) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            d[i] = v / <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#accd55f47ffd4049900e96f032f0a9375">RNG::max</a>();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    );</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a144e524ab2720b65d7369fdfaf6f3136">  148</a></span>&#160;std::ostream &amp;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a144e524ab2720b65d7369fdfaf6f3136">RNG::to_stream</a>(std::ostream &amp;out)<span class="keyword"> const </span>{</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> ((out &lt;&lt; this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[0] &lt;&lt; <span class="stringliteral">&quot; &quot;</span>).good() &amp;&amp;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        !(out &lt;&lt; this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[1]).<a class="code" href="namespaceopenage_1_1testing.xhtml#ab47bedd0a44345aab4aadb8378800e45">fail</a>()) {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> out;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Unable to write rng state serialization to output stream&quot;</span>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ae7d9467b4f3d76c68a9a7f85a78510cd">  157</a></span>&#160;std::istream &amp;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ae7d9467b4f3d76c68a9a7f85a78510cd">RNG::from_stream</a>(std::istream &amp;in) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">if</span> ((in &gt;&gt; this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[0]).good() &amp;&amp;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        !(in &gt;&gt; this-&gt;<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">state</a>[1]).<a class="code" href="namespaceopenage_1_1testing.xhtml#ab47bedd0a44345aab4aadb8378800e45">fail</a>()) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> in;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Unable to read rng state serialization from input stream&quot;</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a3d2fc24293e9eb420a93a696b544d812">  166</a></span>&#160;std::string <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a3d2fc24293e9eb420a93a696b544d812">RNG::to_string</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_f_string.xhtml">util::FString</a> fs;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    fs &lt;&lt; *<span class="keyword">this</span>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">return</span> fs;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ad4167cc984c7979737fe798e9b79265f">  173</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ad4167cc984c7979737fe798e9b79265f">RNG::from_string</a>(<span class="keyword">const</span> std::string &amp;instr) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    std::stringstream strstr(instr);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    strstr &gt;&gt; *<span class="keyword">this</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;}</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#acb0200a44ab02cc735041096cad88fbe">  179</a></span>&#160;std::ostream &amp;<a class="code" href="namespaceopenage_1_1rng.xhtml#acb0200a44ab02cc735041096cad88fbe">operator &lt;&lt;</a>(std::ostream &amp;ostream, <span class="keyword">const</span> <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml">RNG</a> &amp;inrng) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    inrng.<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#a144e524ab2720b65d7369fdfaf6f3136">to_stream</a>(ostream);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> ostream;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;}</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#ace26b663b1fa6bbbaeec1f5903bbc70c">  185</a></span>&#160;std::istream &amp;<a class="code" href="namespaceopenage_1_1rng.xhtml#ace26b663b1fa6bbbaeec1f5903bbc70c">operator &gt;&gt;</a>(std::istream &amp;instream, <a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml">RNG</a> &amp;inrng) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    inrng.<a class="code" href="classopenage_1_1rng_1_1_r_n_g.xhtml#ae7d9467b4f3d76c68a9a7f85a78510cd">from_stream</a>(instream);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> instream;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#a924b85bc82578378e68818dab9a247b6">  191</a></span>&#160;<span class="keyword">static</span> uint64_t <a class="code" href="namespaceopenage_1_1rng.xhtml#a924b85bc82578378e68818dab9a247b6">try_random_device</a>() {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    uint64_t rand1 = 0;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// std::random_device constructor may throw if it isn&#39;t available</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        std::random_device rnd;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> (rnd.entropy() &gt; 0) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            rand1 = rnd() + (uint64_t(rnd()) &lt;&lt; 32);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">catch</span> (std::exception &amp;e) {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;failed using std::random_device: &quot;</span> &lt;&lt; e.what());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> rand1;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#a4bdd2cc5c7f7f5d81ff514287f65eef0">  207</a></span>&#160;<span class="keyword">static</span> uint64_t <a class="code" href="namespaceopenage_1_1rng.xhtml#a4bdd2cc5c7f7f5d81ff514287f65eef0">time_seed</a>(<span class="keywordtype">bool</span> randomize) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    uint64_t nanos = <a class="code" href="namespaceopenage_1_1timing.xhtml#aea51f4c8e71a8c326e3dd9dcc05c00eb">timing::get_real_time</a>();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keywordflow">if</span> (randomize) {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        nanos ^= <a class="code" href="namespaceopenage_1_1rng.xhtml#a924b85bc82578378e68818dab9a247b6">try_random_device</a>();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> nanos;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#adde6a014119705e9ea92a28bae96f385">  217</a></span>&#160;uint64_t <a class="code" href="namespaceopenage_1_1rng.xhtml#a4bdd2cc5c7f7f5d81ff514287f65eef0">time_seed</a>() {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1rng.xhtml#a4bdd2cc5c7f7f5d81ff514287f65eef0">time_seed</a>(<span class="keyword">false</span>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;}</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1rng.xhtml#a510f1a8aa7487e18b60b1844cd2af86a">  222</a></span>&#160;uint64_t <a class="code" href="namespaceopenage_1_1rng.xhtml#a510f1a8aa7487e18b60b1844cd2af86a">random_seed</a>() {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1rng.xhtml#a4bdd2cc5c7f7f5d81ff514287f65eef0">time_seed</a>(<span class="keyword">true</span>);</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;}</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}} <span class="comment">// namespace openage::rng</span></div><div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a95f8c2c7e00ab2531e0e6c33ae70e154"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a95f8c2c7e00ab2531e0e6c33ae70e154">openage::rng::RNG::random</a></div><div class="ttdeci">uint64_t random()</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00089">rng.cpp:89</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_ab7dbd0bef0c06a30b6724f2352af833c"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#ab7dbd0bef0c06a30b6724f2352af833c">openage::rng::RNG::fill_real</a></div><div class="ttdeci">void fill_real(double *data, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00138">rng.cpp:138</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml">openage::rng::RNG</a></div><div class="ttdef"><b>Definition:</b> <a href="rng_8h_source.xhtml#l00016">rng.h:16</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_acb0200a44ab02cc735041096cad88fbe"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#acb0200a44ab02cc735041096cad88fbe">openage::rng::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;ostream, const RNG &amp;inrng)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00179">rng.cpp:179</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a6b0ce95fbbca6511dc9f1a683fa452f9"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a6b0ce95fbbca6511dc9f1a683fa452f9">openage::rng::RNG::state</a></div><div class="ttdeci">uint64_t state[2]</div><div class="ttdef"><b>Definition:</b> <a href="rng_8h_source.xhtml#l00179">rng.h:179</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a144e524ab2720b65d7369fdfaf6f3136"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a144e524ab2720b65d7369fdfaf6f3136">openage::rng::RNG::to_stream</a></div><div class="ttdeci">std::ostream &amp; to_stream(std::ostream &amp;out) const</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00148">rng.cpp:148</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_a4bdd2cc5c7f7f5d81ff514287f65eef0"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#a4bdd2cc5c7f7f5d81ff514287f65eef0">openage::rng::time_seed</a></div><div class="ttdeci">static uint64_t time_seed(bool randomize)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00207">rng.cpp:207</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_ad04d259df8af8d4f0bc1deed13641a12"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#ad04d259df8af8d4f0bc1deed13641a12">openage::rng::RNG::discard_on_seed</a></div><div class="ttdeci">static constexpr size_t discard_on_seed</div><div class="ttdef"><b>Definition:</b> <a href="rng_8h_source.xhtml#l00185">rng.h:185</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a36e03ae10106b4de88c7af38f0c0dedc"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a36e03ae10106b4de88c7af38f0c0dedc">openage::rng::RNG::discard</a></div><div class="ttdeci">void discard(size_t num_discard)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00130">rng.cpp:130</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a76d8d1e95491447e8b8ed7946ff4c695"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a76d8d1e95491447e8b8ed7946ff4c695">openage::rng::RNG::seed</a></div><div class="ttdeci">void seed(uint64_t val)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00053">rng.cpp:53</a></div></div>
<div class="ttc" id="rng_8h_xhtml"><div class="ttname"><a href="rng_8h.xhtml">rng.h</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_ae7d9467b4f3d76c68a9a7f85a78510cd"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#ae7d9467b4f3d76c68a9a7f85a78510cd">openage::rng::RNG::from_stream</a></div><div class="ttdeci">std::istream &amp; from_stream(std::istream &amp;in)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00157">rng.cpp:157</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1tests_xhtml_aec3c7190e428e8fd67bce6f0dd4d582f"><div class="ttname"><a href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">openage::util::tests::siphash</a></div><div class="ttdeci">void siphash()</div><div class="ttdef"><b>Definition:</b> <a href="hash__test_8cpp_source.xhtml#l00021">hash_test.cpp:21</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_af7d90437e58aaa4fe1d816ad7b62dc07"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#af7d90437e58aaa4fe1d816ad7b62dc07">openage::rng::do_rng</a></div><div class="ttdeci">static uint64_t do_rng(uint64_t &amp;s0, uint64_t &amp;s1)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00082">rng.cpp:82</a></div></div>
<div class="ttc" id="constinit__vector_8cpp_xhtml_aa0ccb5ee6d882ee3605ff47745c6467b"><div class="ttname"><a href="constinit__vector_8cpp.xhtml#aa0ccb5ee6d882ee3605ff47745c6467b">val</a></div><div class="ttdeci">int val</div><div class="ttdef"><b>Definition:</b> <a href="constinit__vector_8cpp_source.xhtml#l00017">constinit_vector.cpp:17</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_accd55f47ffd4049900e96f032f0a9375"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#accd55f47ffd4049900e96f032f0a9375">openage::rng::RNG::max</a></div><div class="ttdeci">static constexpr uint64_t max()</div><div class="ttdef"><b>Definition:</b> <a href="rng_8h_source.xhtml#l00165">rng.h:165</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_xhtml_ab47bedd0a44345aab4aadb8378800e45"><div class="ttname"><a href="namespaceopenage_1_1testing.xhtml#ab47bedd0a44345aab4aadb8378800e45">openage::testing::fail</a></div><div class="ttdeci">bool fail(const log::message &amp;msg)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8cpp_source.xhtml#l00009">testing.cpp:9</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_a924b85bc82578378e68818dab9a247b6"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#a924b85bc82578378e68818dab9a247b6">openage::rng::try_random_device</a></div><div class="ttdeci">static uint64_t try_random_device()</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00191">rng.cpp:191</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_ade1468036c9d6dcb19a7d32b500e049b"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#ade1468036c9d6dcb19a7d32b500e049b">openage::rng::RNG::RNG</a></div><div class="ttdeci">RNG(uint64_t seed)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00033">rng.cpp:33</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_ad4167cc984c7979737fe798e9b79265f"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#ad4167cc984c7979737fe798e9b79265f">openage::rng::RNG::from_string</a></div><div class="ttdeci">void from_string(const std::string &amp;instr)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00173">rng.cpp:173</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_a510f1a8aa7487e18b60b1844cd2af86a"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#a510f1a8aa7487e18b60b1844cd2af86a">openage::rng::random_seed</a></div><div class="ttdeci">uint64_t random_seed()</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00222">rng.cpp:222</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a3d2fc24293e9eb420a93a696b544d812"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a3d2fc24293e9eb420a93a696b544d812">openage::rng::RNG::to_string</a></div><div class="ttdeci">std::string to_string() const</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00166">rng.cpp:166</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_ade4748f2ea78310c4c2d84f1ce7d1990"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#ade4748f2ea78310c4c2d84f1ce7d1990">openage::rng::seed_key</a></div><div class="ttdeci">static const std::array&lt; uint8_t, 16 &gt; seed_key</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00027">rng.cpp:27</a></div></div>
<div class="ttc" id="namespaceopenage_1_1timing_xhtml_aea51f4c8e71a8c326e3dd9dcc05c00eb"><div class="ttname"><a href="namespaceopenage_1_1timing.xhtml#aea51f4c8e71a8c326e3dd9dcc05c00eb">openage::timing::get_real_time</a></div><div class="ttdeci">time_nsec_t get_real_time()</div><div class="ttdef"><b>Definition:</b> <a href="timing_8cpp_source.xhtml#l00013">timing.cpp:13</a></div></div>
<div class="ttc" id="classopenage_1_1rng_1_1_r_n_g_xhtml_a77a4af9133abbcd242c9adf3921bbd89"><div class="ttname"><a href="classopenage_1_1rng_1_1_r_n_g.xhtml#a77a4af9133abbcd242c9adf3921bbd89">openage::rng::RNG::fill</a></div><div class="ttdeci">void fill(uint64_t *data, size_t len)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00120">rng.cpp:120</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_ace26b663b1fa6bbbaeec1f5903bbc70c"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#ace26b663b1fa6bbbaeec1f5903bbc70c">openage::rng::operator &gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator &gt;&gt;(std::istream &amp;instream, RNG &amp;inrng)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00185">rng.cpp:185</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_xhtml_acffdd6abc0140eac8c12d879172f8566"><div class="ttname"><a href="namespaceopenage_1_1rng.xhtml#acffdd6abc0140eac8c12d879172f8566">openage::rng::act_fill</a></div><div class="ttdeci">static void act_fill(T *dat, uint64_t *state, size_t len, const Lambda &amp;op)</div><div class="ttdef"><b>Definition:</b> <a href="rng_8cpp_source.xhtml#l00100">rng.cpp:100</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_f_string_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_f_string.xhtml">openage::util::FString</a></div><div class="ttdef"><b>Definition:</b> <a href="stringformatter_8h_source.xhtml#l00270">stringformatter.h:270</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml">openage::util::Siphash</a></div><div class="ttdef"><b>Definition:</b> <a href="hash_8h_source.xhtml#l00023">hash.h:23</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_f3789cadf99dfd908eb4a711d92a558b.xhtml">rng</a></li><li class="navelem"><a class="el" href="rng_8cpp.xhtml">rng.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
