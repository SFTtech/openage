<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: libopenage/curve/tests/container.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('container_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">container.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="container_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2017-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;../../testing/testing.h&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;../curve.h&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;../continuous.h&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;../discrete.h&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;../queue.h&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;../map.h&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml">   14</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml">openage::curve::tests</a> {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">   16</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">map_test_element</a> {</div><div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#a7b2b75139511316eaab4d6442f64f18c">   17</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#a7b2b75139511316eaab4d6442f64f18c">value</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#ab5ee4a5eb2bcc16a37e523b7c86e05fc">   19</a></span>&#160;    <a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#ab5ee4a5eb2bcc16a37e523b7c86e05fc">map_test_element</a>(<span class="keywordtype">int</span> v) :</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#a7b2b75139511316eaab4d6442f64f18c">value</a>(v) {}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#ab64149aebddf040c8d0b526a6a0a3098">   22</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#ab64149aebddf040c8d0b526a6a0a3098">operator != </a>(<span class="keywordtype">int</span> rhs) {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="keywordflow">return</span> this-&gt;value != rhs;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;};</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae83c263763307d2e883c942afdeb6f2f">   28</a></span>&#160;std::ostream &amp;<a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae83c263763307d2e883c942afdeb6f2f">operator &lt;&lt;</a>(std::ostream &amp;o, <span class="keyword">const</span> <a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">map_test_element</a> &amp;e) {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    o &lt;&lt; e.<a class="code" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#a7b2b75139511316eaab4d6442f64f18c">value</a>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> o;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> key_t, <span class="keyword">typename</span> val_t&gt;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml#adaea2f0357531c64ef6af72d720e37f2">   34</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#adaea2f0357531c64ef6af72d720e37f2">dump</a>(<span class="keyword">const</span> std::unordered_map&lt;key_t, val_t&gt; &amp;<a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>) {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        std::cout &lt;&lt; i.first &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; i.second &lt;&lt; std::endl;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">   40</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">test_map</a>() {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    static_assert(std::is_copy_constructible&lt;<a class="code" href="classopenage_1_1curve_1_1_map_filter_iterator.xhtml">MapFilterIterator</a>&lt;<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <a class="code" href="classopenage_1_1curve_1_1_unordered_map.xhtml">UnorderedMap&lt;int, int&gt;</a>&gt;&gt;::value,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                  <span class="stringliteral">&quot;UnorderedMapIterator not Copy Constructable able&quot;</span>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    static_assert(std::is_copy_assignable&lt;<a class="code" href="classopenage_1_1curve_1_1_map_filter_iterator.xhtml">MapFilterIterator</a>&lt;<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <a class="code" href="classopenage_1_1curve_1_1_unordered_map.xhtml">UnorderedMap&lt;int, int&gt;</a>&gt;&gt;::value,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                  <span class="stringliteral">&quot;UnorderedMapIterator not Copy Assignable&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="classopenage_1_1curve_1_1_unordered_map.xhtml">UnorderedMap&lt;int, int&gt;</a> <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.insert(0, 10, 0, 0);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.insert(5, 10, 5, 1);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.insert(100, 200, 200, 2);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Basic tests test lookup in the middle of the range.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(2, 0); <span class="comment">//At timestamp 2 element 0</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 0);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(20, 5);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(7, 5);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 1);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(20, 5);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(2, 5);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(150, 200);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 2);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(500, 200);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(5, 200);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// test 2.0: test at the boundaries</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(0, 0);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 0);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(10, 0);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(5, 5);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 1);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(10, 5);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(100, 200);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 2);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(200, 200);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Test 3.0 Iterations</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// Iteration tests</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        std::unordered_map&lt;int, int&gt; reference;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        reference[0] = 0;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        reference[5] = 1;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        reference[200] = 2;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.begin(0); it != <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.end(); ++it) { <span class="comment">// Get all</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.key());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        reference[5] = 5;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.begin(1); it != <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.end(90); ++it) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.key());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        reference[5] = 5;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.between(1,90); it != <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.end(); ++it) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.key());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">  134</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">test_list</a>() {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">  138</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">test_queue</a>() {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    static_assert(std::is_copy_constructible&lt;<a class="code" href="classopenage_1_1curve_1_1_queue_filter_iterator.xhtml">QueueFilterIterator</a>&lt;<span class="keywordtype">int</span>, <a class="code" href="classopenage_1_1curve_1_1_queue.xhtml">Queue&lt;int&gt;</a>&gt;&gt;::value,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                  <span class="stringliteral">&quot;QueueIterator not Copy Constructable able&quot;</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    static_assert(std::is_copy_assignable&lt;<a class="code" href="classopenage_1_1curve_1_1_queue_filter_iterator.xhtml">QueueFilterIterator</a>&lt;<span class="keywordtype">int</span>, <a class="code" href="classopenage_1_1curve_1_1_queue.xhtml">Queue&lt;int&gt;</a>&gt;&gt;::value,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                  <span class="stringliteral">&quot;QueueIterator not Copy Assignable&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classopenage_1_1curve_1_1_queue.xhtml">Queue&lt;int&gt;</a> q;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#ae7d94b0875221550e5af663a64ea2aec">insert</a>(0, 1);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#ae7d94b0875221550e5af663a64ea2aec">insert</a>(2, 2);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#ae7d94b0875221550e5af663a64ea2aec">insert</a>(4, 3);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#ae7d94b0875221550e5af663a64ea2aec">insert</a>(10, 4);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#ae7d94b0875221550e5af663a64ea2aec">insert</a>(100001, 5);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(0), 1);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(1), 2);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(2), 2);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(3), 3);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(4), 3);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(5), 4);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(10), 4);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(12), 5);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">begin</a>(100000), 5);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        std::unordered_set&lt;int&gt; reference = {1,2,3};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3ba35a56fa550d939d0d16c71c63e56c">between</a>(0,6); it != q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3a60297cec80ae6d759ea3567922db8e">end</a>(); ++it) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        std::unordered_set&lt;int&gt; reference = {2,3,4};</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3ba35a56fa550d939d0d16c71c63e56c">between</a>(1,40); it != q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3a60297cec80ae6d759ea3567922db8e">end</a>(); ++it) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        std::unordered_set&lt;int&gt; reference = {};</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3ba35a56fa550d939d0d16c71c63e56c">between</a>(30,40); it != q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3a60297cec80ae6d759ea3567922db8e">end</a>(); ++it) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        std::unordered_set&lt;int&gt; reference = {1,2,3,4};</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3ba35a56fa550d939d0d16c71c63e56c">between</a>(0,40); it != q.<a class="code" href="classopenage_1_1curve_1_1_queue.xhtml#a3a60297cec80ae6d759ea3567922db8e">end</a>(); ++it) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">  205</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>() {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">test_map</a>();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">test_list</a>();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">test_queue</a>();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;} <span class="comment">// openage::curve::tests</span></div><div class="ttc" id="setup_8cpp_xhtml_a96dd93a55be2a0953e454b56d83f65da"><div class="ttname"><a href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a></div><div class="ttdeci">std::map&lt; void *, std::function&lt; bool()&gt; &gt; map</div><div class="ttdef"><b>Definition:</b> <a href="setup_8cpp_source.xhtml#l00025">setup.cpp:25</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_queue_filter_iterator_xhtml"><div class="ttname"><a href="classopenage_1_1curve_1_1_queue_filter_iterator.xhtml">openage::curve::QueueFilterIterator</a></div><div class="ttdef"><b>Definition:</b> <a href="queue__filter__iterator_8h_source.xhtml#l00024">queue_filter_iterator.h:24</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_ae83c263763307d2e883c942afdeb6f2f"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#ae83c263763307d2e883c942afdeb6f2f">openage::curve::tests::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;o, const map_test_element &amp;e)</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00028">container.cpp:28</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_ae4b27fadf76c2a10960f6b7e7ff7c724"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">openage::curve::tests::test_queue</a></div><div class="ttdeci">void test_queue()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00138">container.cpp:138</a></div></div>
<div class="ttc" id="structopenage_1_1curve_1_1tests_1_1map__test__element_xhtml_a7b2b75139511316eaab4d6442f64f18c"><div class="ttname"><a href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#a7b2b75139511316eaab4d6442f64f18c">openage::curve::tests::map_test_element::value</a></div><div class="ttdeci">int value</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00017">container.cpp:17</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_map_filter_iterator_xhtml"><div class="ttname"><a href="classopenage_1_1curve_1_1_map_filter_iterator.xhtml">openage::curve::MapFilterIterator</a></div><div class="ttdef"><b>Definition:</b> <a href="map__filter__iterator_8h_source.xhtml#l00024">map_filter_iterator.h:24</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_queue_xhtml_a3a60297cec80ae6d759ea3567922db8e"><div class="ttname"><a href="classopenage_1_1curve_1_1_queue.xhtml#a3a60297cec80ae6d759ea3567922db8e">openage::curve::Queue::end</a></div><div class="ttdeci">QueueFilterIterator&lt; T, Queue&lt; T &gt; &gt; end(const time_t &amp;t=std::numeric_limits&lt; time_t &gt;::max()) const</div><div class="ttdef"><b>Definition:</b> <a href="queue_8h_source.xhtml#l00095">queue.h:95</a></div></div>
<div class="ttc" id="structopenage_1_1curve_1_1tests_1_1map__test__element_xhtml"><div class="ttname"><a href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">openage::curve::tests::map_test_element</a></div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00016">container.cpp:16</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_queue_xhtml"><div class="ttname"><a href="classopenage_1_1curve_1_1_queue.xhtml">openage::curve::Queue</a></div><div class="ttdef"><b>Definition:</b> <a href="queue_8h_source.xhtml#l00019">queue.h:19</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_queue_xhtml_acbff846f0aad39b82c1dbffe83f80fba"><div class="ttname"><a href="classopenage_1_1curve_1_1_queue.xhtml#acbff846f0aad39b82c1dbffe83f80fba">openage::curve::Queue::begin</a></div><div class="ttdeci">QueueFilterIterator&lt; T, Queue&lt; T &gt; &gt; begin(const time_t &amp;t=-std::numeric_limits&lt; time_t &gt;::max()) const</div><div class="ttdef"><b>Definition:</b> <a href="queue_8h_source.xhtml#l00079">queue.h:79</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml">openage::curve::tests</a></div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00014">container.cpp:14</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_adaea2f0357531c64ef6af72d720e37f2"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#adaea2f0357531c64ef6af72d720e37f2">openage::curve::tests::dump</a></div><div class="ttdeci">void dump(const std::unordered_map&lt; key_t, val_t &gt; &amp;map)</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00034">container.cpp:34</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_queue_xhtml_a3ba35a56fa550d939d0d16c71c63e56c"><div class="ttname"><a href="classopenage_1_1curve_1_1_queue.xhtml#a3ba35a56fa550d939d0d16c71c63e56c">openage::curve::Queue::between</a></div><div class="ttdeci">QueueFilterIterator&lt; T, Queue&lt; T &gt; &gt; between(const time_t &amp;begin=std::numeric_limits&lt; time_t &gt;::max(), const time_t &amp;end=std::numeric_limits&lt; time_t &gt;::max()) const</div><div class="ttdef"><b>Definition:</b> <a href="queue_8h_source.xhtml#l00105">queue.h:105</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_unordered_map_xhtml"><div class="ttname"><a href="classopenage_1_1curve_1_1_unordered_map.xhtml">openage::curve::UnorderedMap</a></div><div class="ttdef"><b>Definition:</b> <a href="map_8h_source.xhtml#l00020">map.h:20</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_afc4e799a037edab37e1e35a74da593b7"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">openage::curve::tests::container</a></div><div class="ttdeci">void container()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00205">container.cpp:205</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_a994d019a14acd704605a0ccff85558c8"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">openage::curve::tests::test_list</a></div><div class="ttdeci">void test_list()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00134">container.cpp:134</a></div></div>
<div class="ttc" id="classopenage_1_1curve_1_1_queue_xhtml_ae7d94b0875221550e5af663a64ea2aec"><div class="ttname"><a href="classopenage_1_1curve_1_1_queue.xhtml#ae7d94b0875221550e5af663a64ea2aec">openage::curve::Queue::insert</a></div><div class="ttdeci">QueueFilterIterator&lt; T, Queue&lt; T &gt; &gt; insert(const time_t &amp;, const T &amp;e)</div><div class="ttdef"><b>Definition:</b> <a href="queue_8h_source.xhtml#l00129">queue.h:129</a></div></div>
<div class="ttc" id="structopenage_1_1curve_1_1tests_1_1map__test__element_xhtml_ab5ee4a5eb2bcc16a37e523b7c86e05fc"><div class="ttname"><a href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#ab5ee4a5eb2bcc16a37e523b7c86e05fc">openage::curve::tests::map_test_element::map_test_element</a></div><div class="ttdeci">map_test_element(int v)</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00019">container.cpp:19</a></div></div>
<div class="ttc" id="structopenage_1_1curve_1_1tests_1_1map__test__element_xhtml_ab64149aebddf040c8d0b526a6a0a3098"><div class="ttname"><a href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml#ab64149aebddf040c8d0b526a6a0a3098">openage::curve::tests::map_test_element::operator !=</a></div><div class="ttdeci">bool operator !=(int rhs)</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00022">container.cpp:22</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_aafe8d47259322a390c43cae62d308296"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">openage::curve::tests::test_map</a></div><div class="ttdeci">void test_map()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00040">container.cpp:40</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_ccad08bb708da2762bd629c3fb99a53c.xhtml">curve</a></li><li class="navelem"><a class="el" href="dir_e278ddfe79368c60cdfafbb290b31a25.xhtml">tests</a></li><li class="navelem"><a class="el" href="container_8cpp.xhtml">container.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
