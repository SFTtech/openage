<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::util::compress::HuffmanTable&lt; maxsymbols_p, tablebits_p, allow_empty &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classopenage_1_1util_1_1compress_1_1_huffman_table-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::util::compress::HuffmanTable&lt; maxsymbols_p, tablebits_p, allow_empty &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for openage::util::compress::HuffmanTable&lt; maxsymbols_p, tablebits_p, allow_empty &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1util_1_1compress_1_1_huffman_table__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for openage::util::compress::HuffmanTable&lt; maxsymbols_p, tablebits_p, allow_empty &gt;:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1util_1_1compress_1_1_huffman_table__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a041e0bae2c9b121a0c77682b940c42d3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a041e0bae2c9b121a0c77682b940c42d3">HuffmanTable</a> (class <a class="el" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml">LZXDStream</a> *<a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>)</td></tr>
<tr class="separator:a041e0bae2c9b121a0c77682b940c42d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6b32648570816ac41436130bd87f3be"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#ae6b32648570816ac41436130bd87f3be">read_sym</a> ()</td></tr>
<tr class="separator:ae6b32648570816ac41436130bd87f3be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e2e81d74fd03fd894c4acf72227cc2d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a1e2e81d74fd03fd894c4acf72227cc2d">make_decode_table</a> ()</td></tr>
<tr class="separator:a1e2e81d74fd03fd894c4acf72227cc2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a281ecfaf32eb7102310771c48034e107"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a281ecfaf32eb7102310771c48034e107">read_lengths</a> (unsigned int first, unsigned int last)</td></tr>
<tr class="separator:a281ecfaf32eb7102310771c48034e107"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a3bbe52e654dd6ad728e626cb84b1400e"><td class="memItemLeft" align="right" valign="top">unsigned char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a> [maxsymbols_p+<a class="el" href="namespaceopenage_1_1util_1_1compress.xhtml#aaeed04374c06ce503ff18341be17e29e">LZX_LENTABLE_SAFETY</a>]</td></tr>
<tr class="separator:a3bbe52e654dd6ad728e626cb84b1400e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b93c25503f0c98e4420d82e7b104213"><td class="memItemLeft" align="right" valign="top">uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a> [(1&lt;&lt; tablebits_p)+(maxsymbols_p *2)]</td></tr>
<tr class="separator:a2b93c25503f0c98e4420d82e7b104213"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7df946fa968a570c9bde8aaa9437d1f2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a7df946fa968a570c9bde8aaa9437d1f2">is_empty</a></td></tr>
<tr class="separator:a7df946fa968a570c9bde8aaa9437d1f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:abdc66dd010cb036245a0992a599ddff5"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#abdc66dd010cb036245a0992a599ddff5">HUFF_MAXBITS</a> = 16</td></tr>
<tr class="separator:abdc66dd010cb036245a0992a599ddff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaea7324005ce900ce270da741c53640"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a> = maxsymbols_p</td></tr>
<tr class="separator:aaaea7324005ce900ce270da741c53640"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72edd87d81a878e15a73138240999bda"><td class="memItemLeft" align="right" valign="top">static constexpr unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a> = tablebits_p</td></tr>
<tr class="separator:a72edd87d81a878e15a73138240999bda"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:af44253d3e7adef12c7a4c4371b97a2fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#af44253d3e7adef12c7a4c4371b97a2fd">try_make_decode_table</a> ()</td></tr>
<tr class="separator:af44253d3e7adef12c7a4c4371b97a2fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a997dcfba10999b15243bc36218e0782a"><td class="memItemLeft" align="right" valign="top">class <a class="el" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml">LZXDStream</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a></td></tr>
<tr class="separator:a997dcfba10999b15243bc36218e0782a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt;<br />
class openage::util::compress::HuffmanTable&lt; maxsymbols_p, tablebits_p, allow_empty &gt;</h3>


<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a041e0bae2c9b121a0c77682b940c42d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a041e0bae2c9b121a0c77682b940c42d3">&#9670;&nbsp;</a></span>HuffmanTable()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::<a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">HuffmanTable</a> </td>
          <td>(</td>
          <td class="paramtype">class <a class="el" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml">LZXDStream</a> *&#160;</td>
          <td class="paramname"><em>lzx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00123">123</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;: <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>{<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>}, <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a7df946fa968a570c9bde8aaa9437d1f2">is_empty</a>{<span class="keyword">true</span>} {}</div><div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a7df946fa968a570c9bde8aaa9437d1f2"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a7df946fa968a570c9bde8aaa9437d1f2">openage::util::compress::HuffmanTable::is_empty</a></div><div class="ttdeci">bool is_empty</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00121">lzxd.cpp:121</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a997dcfba10999b15243bc36218e0782a"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">openage::util::compress::HuffmanTable::lzx</a></div><div class="ttdeci">class LZXDStream * lzx</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00096">lzxd.cpp:96</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a1e2e81d74fd03fd894c4acf72227cc2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e2e81d74fd03fd894c4acf72227cc2d">&#9670;&nbsp;</a></span>make_decode_table()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::make_decode_table </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>calls try_make_decode_table, and, if allow_empty is false, raises an exception on failure. builds a huffman lookup table from code lengths. </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00259">259</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                                                             {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#af44253d3e7adef12c7a4c4371b97a2fd">try_make_decode_table</a>()) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a7df946fa968a570c9bde8aaa9437d1f2">is_empty</a> = <span class="keyword">false</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">if</span> (allow_empty) {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="comment">// allow an empty tree, but don&#39;t decode symbols with it</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="comment">// if any of the symbols has a greater-than-zero length, fail.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a>; i++) {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[i] &gt; 0)) {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    <span class="keywordflow">throw</span> Error(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;failed to build HuffmanTable&lt;allow_empty=true&gt;&quot;</span>);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a7df946fa968a570c9bde8aaa9437d1f2">is_empty</a> = <span class="keyword">true</span>;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">throw</span> Error(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;failed to build HuffmanTable&lt;allow_empty=false&gt;&quot;</span>);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    }</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_aaaea7324005ce900ce270da741c53640"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">openage::util::compress::HuffmanTable::maxsymbols</a></div><div class="ttdeci">static constexpr unsigned int maxsymbols</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00100">lzxd.cpp:100</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a7df946fa968a570c9bde8aaa9437d1f2"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a7df946fa968a570c9bde8aaa9437d1f2">openage::util::compress::HuffmanTable::is_empty</a></div><div class="ttdeci">bool is_empty</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00121">lzxd.cpp:121</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a3bbe52e654dd6ad728e626cb84b1400e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">openage::util::compress::HuffmanTable::len</a></div><div class="ttdeci">unsigned char len[maxsymbols_p+LZX_LENTABLE_SAFETY]</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00106">lzxd.cpp:106</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_af44253d3e7adef12c7a4c4371b97a2fd"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#af44253d3e7adef12c7a4c4371b97a2fd">openage::util::compress::HuffmanTable::try_make_decode_table</a></div><div class="ttdeci">bool try_make_decode_table()</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00281">lzxd.cpp:281</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="lzxd_8cpp_source.xhtml#l00477">openage::util::compress::LZXDStream::init_next_block()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1util_1_1compress_1_1_huffman_table_a1e2e81d74fd03fd894c4acf72227cc2d_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a281ecfaf32eb7102310771c48034e107"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a281ecfaf32eb7102310771c48034e107">&#9670;&nbsp;</a></span>read_lengths()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::read_lengths </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>last</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>reads in code lengths for symbols first to last in the given table. The code lengths are stored in their own special LZX way. </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00363">363</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                                                                                             {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">// bit buffer and huffman symbol decode variables</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x, y;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordtype">int</span> z;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="comment">// read lengths for pretree (20 symbols, lengths stored in fixed 4 bits)</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordflow">for</span> (x = 0; x &lt; 20; x++) {</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#a1c0734cf2170ca3e28f39602dc7f8219">htpre</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x] = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">read_bits</a>(4);</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#a1c0734cf2170ca3e28f39602dc7f8219">htpre</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a1e2e81d74fd03fd894c4acf72227cc2d">make_decode_table</a>();</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordflow">for</span> (x = first; x &lt; last; ) {</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        z = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#a1c0734cf2170ca3e28f39602dc7f8219">htpre</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#ae6b32648570816ac41436130bd87f3be">read_sym</a>();</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">if</span> (z == 17) {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            <span class="comment">// code = 17, run of ([read 4 bits]+4) zeros</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            y = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">read_bits</a>(4);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            y += 4;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keywordflow">while</span> (y--) {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x++] = 0;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            }</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (z == 18) {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="comment">// code = 18, run of ([read 5 bits]+20) zeros</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            y = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">read_bits</a>(5);</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            y += 20;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">while</span> (y--) {</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x++] = 0;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            }</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (z == 19) {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="comment">// code = 19, run of ([read 1 bit]+4) [read huffman symbol]</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            y = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">read_bits</a>(1);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            y += 4;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            z = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#a1c0734cf2170ca3e28f39602dc7f8219">htpre</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#ae6b32648570816ac41436130bd87f3be">read_sym</a>();</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            z = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x] - z;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            <span class="keywordflow">if</span> (z &lt; 0) {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                z += 17;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="keywordflow">while</span> (y--) {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x++] = z;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            }</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="comment">// code = 0 to 16, delta current length entry</span></div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            z = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x] - z; <span class="keywordflow">if</span> (z &lt; 0) z += 17;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[x++] = z;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    }</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;}</div><div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a1e2e81d74fd03fd894c4acf72227cc2d"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a1e2e81d74fd03fd894c4acf72227cc2d">openage::util::compress::HuffmanTable::make_decode_table</a></div><div class="ttdeci">void make_decode_table()</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00259">lzxd.cpp:259</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_ae6b32648570816ac41436130bd87f3be"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#ae6b32648570816ac41436130bd87f3be">openage::util::compress::HuffmanTable::read_sym</a></div><div class="ttdeci">int read_sym()</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00240">lzxd.cpp:240</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a3bbe52e654dd6ad728e626cb84b1400e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">openage::util::compress::HuffmanTable::len</a></div><div class="ttdeci">unsigned char len[maxsymbols_p+LZX_LENTABLE_SAFETY]</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00106">lzxd.cpp:106</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream_xhtml_afbee9a6150c8c52cf8404bf343da4692"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">openage::util::compress::LZXDStream::bits</a></div><div class="ttdeci">BitStream&lt; 4096 &gt; bits</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00179">lzxd.cpp:179</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_af4522bbae0ee989e1f5b45606fb2e673"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#af4522bbae0ee989e1f5b45606fb2e673">openage::util::compress::BitStream::read_bits</a></div><div class="ttdeci">unsigned read_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00315">bitstream.h:315</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a997dcfba10999b15243bc36218e0782a"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">openage::util::compress::HuffmanTable::lzx</a></div><div class="ttdeci">class LZXDStream * lzx</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00096">lzxd.cpp:96</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream_xhtml_a1c0734cf2170ca3e28f39602dc7f8219"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#a1c0734cf2170ca3e28f39602dc7f8219">openage::util::compress::LZXDStream::htpre</a></div><div class="ttdeci">HuffmanTable&lt; LZX_PRETREE_MAXSYMBOLS, LZX_PRETREE_TABLEBITS &gt; htpre</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00182">lzxd.cpp:182</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="lzxd_8cpp_source.xhtml#l00477">openage::util::compress::LZXDStream::init_next_block()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1util_1_1compress_1_1_huffman_table_a281ecfaf32eb7102310771c48034e107_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="ae6b32648570816ac41436130bd87f3be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6b32648570816ac41436130bd87f3be">&#9670;&nbsp;</a></span>read_sym()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::read_sym </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Decodes the next huffman symbol from the input bitstream, and returns it. Do not use this function on a table unless build_decode_table() succeeded. </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00240">240</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                                                   {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">ensure_bits</a>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#abdc66dd010cb036245a0992a599ddff5">HUFF_MAXBITS</a>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    uint16_t sym = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">peek_bits</a>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a>)];</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">unsigned</span> i = 1 &lt;&lt; (<span class="keyword">sizeof</span>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a>) * 8 - <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a>);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">while</span> (sym &gt;= <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a>) {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="comment">// huff_traverse</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>((i &gt;&gt;= 1) == 0)) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">throw</span> Error(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;huff_error in huff_traverse&quot;</span>);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        sym = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[(sym &lt;&lt; 1) | ((<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">bit_buffer</a> &amp; i) ? 1 : 0)];</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">lzx</a>-&gt;<a class="code" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">bits</a>.<a class="code" href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">remove_bits</a>(<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[sym]);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> sym;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_affde2836bacf9c151d2e948c6a63142c"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#affde2836bacf9c151d2e948c6a63142c">openage::util::compress::BitStream::bit_buffer</a></div><div class="ttdeci">unsigned int bit_buffer</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00104">bitstream.h:104</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a2bb87ab9b57a3a5ef8f492c4cbe12b40"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a2bb87ab9b57a3a5ef8f492c4cbe12b40">openage::util::compress::BitStream::peek_bits</a></div><div class="ttdeci">unsigned peek_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00229">bitstream.h:229</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_aaaea7324005ce900ce270da741c53640"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">openage::util::compress::HuffmanTable::maxsymbols</a></div><div class="ttdeci">static constexpr unsigned int maxsymbols</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00100">lzxd.cpp:100</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a5a9875f4e718027a319d43a5939d9d95"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a5a9875f4e718027a319d43a5939d9d95">openage::util::compress::BitStream::ensure_bits</a></div><div class="ttdeci">void ensure_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00214">bitstream.h:214</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a3bbe52e654dd6ad728e626cb84b1400e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">openage::util::compress::HuffmanTable::len</a></div><div class="ttdeci">unsigned char len[maxsymbols_p+LZX_LENTABLE_SAFETY]</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00106">lzxd.cpp:106</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream_xhtml_afbee9a6150c8c52cf8404bf343da4692"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml#afbee9a6150c8c52cf8404bf343da4692">openage::util::compress::LZXDStream::bits</a></div><div class="ttdeci">BitStream&lt; 4096 &gt; bits</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00179">lzxd.cpp:179</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_bit_stream_xhtml_a7a6ffb1cd9c139eeaf11f1bfec7bc444"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_bit_stream.xhtml#a7a6ffb1cd9c139eeaf11f1bfec7bc444">openage::util::compress::BitStream::remove_bits</a></div><div class="ttdeci">void remove_bits(unsigned int nbits)</div><div class="ttdef"><b>Definition:</b> <a href="bitstream_8h_source.xhtml#l00247">bitstream.h:247</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a2b93c25503f0c98e4420d82e7b104213"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">openage::util::compress::HuffmanTable::table</a></div><div class="ttdeci">uint16_t table[(1&lt;&lt; tablebits_p)+(maxsymbols_p *2)]</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00115">lzxd.cpp:115</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a72edd87d81a878e15a73138240999bda"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">openage::util::compress::HuffmanTable::tablebits</a></div><div class="ttdeci">static constexpr unsigned int tablebits</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00101">lzxd.cpp:101</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_abdc66dd010cb036245a0992a599ddff5"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#abdc66dd010cb036245a0992a599ddff5">openage::util::compress::HuffmanTable::HUFF_MAXBITS</a></div><div class="ttdeci">static constexpr unsigned int HUFF_MAXBITS</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00099">lzxd.cpp:99</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a997dcfba10999b15243bc36218e0782a"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a997dcfba10999b15243bc36218e0782a">openage::util::compress::HuffmanTable::lzx</a></div><div class="ttdeci">class LZXDStream * lzx</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00096">lzxd.cpp:96</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="lzxd_8cpp_source.xhtml#l00617">openage::util::compress::LZXDStream::decode_symbol_from_aligned_block()</a>, and <a class="el" href="lzxd_8cpp_source.xhtml#l00526">openage::util::compress::LZXDStream::decode_symbol_from_verbatim_block()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1util_1_1compress_1_1_huffman_table_ae6b32648570816ac41436130bd87f3be_icgraph.svg" width="100%" height="410"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="af44253d3e7adef12c7a4c4371b97a2fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af44253d3e7adef12c7a4c4371b97a2fd">&#9670;&nbsp;</a></span>try_make_decode_table()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::try_make_decode_table </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This function was originally coded by David Tritscher. It builds a fast huffman decoding table from a canonical huffman code lengths table. </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00281">281</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                                                                                 {</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    uint16_t sym, next_symbol;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> leaf, <a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> bit_num;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> pos = 0; <span class="comment">// the current position in the decode table</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> table_mask = 1 &lt;&lt; <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a>;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bit_mask = table_mask &gt;&gt; 1; <span class="comment">// don&#39;t do 0 length codes</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="comment">// fill entries for codes short enough for a direct mapping</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">for</span> (bit_num = 1; bit_num &lt;= <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a>; bit_num++) {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">for</span> (sym = 0; sym &lt; <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a>; sym++) {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[sym] != bit_num) {</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            }</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            leaf = pos;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">if</span> ((pos += bit_mask) &gt; table_mask) {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">// table overrun</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            <span class="comment">// fill all possible lookups of this symbol with the symbol itself</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">for</span> (<a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a> = bit_mask; <a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a>-- &gt; 0;) {</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[leaf++] = sym;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        }</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        bit_mask &gt;&gt;= 1;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="comment">// exit with success if table is now complete</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">if</span> (pos == table_mask) {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// mark all remaining table entries as unused</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">for</span> (sym = pos; sym &lt; table_mask; sym++) {</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[sym] = 0xFFFF;</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="comment">// next_symbol = base of allocation for long codes</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    next_symbol = ((table_mask &gt;&gt; 1) &lt; <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a>) ? <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a> : (table_mask &gt;&gt; 1);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// give ourselves room for codes to grow by up to 16 more bits.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="comment">// codes now start at bit (tablebits + 16) and end at (tablebits + 16 - codelength)</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    pos &lt;&lt;= 16;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    table_mask &lt;&lt;= 16;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    bit_mask = 1 &lt;&lt; 15;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordflow">for</span> (bit_num = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a> + 1; bit_num &lt;= <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#abdc66dd010cb036245a0992a599ddff5">HUFF_MAXBITS</a>; bit_num++) {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">for</span> (sym = 0; sym &lt; <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">maxsymbols</a>; sym++) {</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">len</a>[sym] != bit_num) {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            }</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            leaf = pos &gt;&gt; 16;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">for</span> (<a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a> = 0; <a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a> &lt; (bit_num - <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">tablebits</a>); <a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a>++) {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="comment">// if this path hasn&#39;t been taken yet, &#39;allocate&#39; two entries</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[leaf] == 0xFFFF) {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[(next_symbol &lt;&lt; 1) + 0] = 0xFFFF;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[(next_symbol &lt;&lt; 1) + 1] = 0xFFFF;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[leaf] = next_symbol++;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                <span class="comment">// follow the path and select either left or right for next bit</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                leaf = <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[leaf] &lt;&lt; 1;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keywordflow">if</span> ((pos &gt;&gt; (15-<a class="code" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill</a>)) &amp; 1) leaf++;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            <a class="code" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">table</a>[leaf] = sym;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordflow">if</span> ((pos += bit_mask) &gt; table_mask) {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                <span class="comment">// table overflow</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        bit_mask &gt;&gt;= 1;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="comment">// full table?</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> pos == table_mask;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div><div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_aaaea7324005ce900ce270da741c53640"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#aaaea7324005ce900ce270da741c53640">openage::util::compress::HuffmanTable::maxsymbols</a></div><div class="ttdeci">static constexpr unsigned int maxsymbols</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00100">lzxd.cpp:100</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a3bbe52e654dd6ad728e626cb84b1400e"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a3bbe52e654dd6ad728e626cb84b1400e">openage::util::compress::HuffmanTable::len</a></div><div class="ttdeci">unsigned char len[maxsymbols_p+LZX_LENTABLE_SAFETY]</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00106">lzxd.cpp:106</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a2b93c25503f0c98e4420d82e7b104213"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a2b93c25503f0c98e4420d82e7b104213">openage::util::compress::HuffmanTable::table</a></div><div class="ttdeci">uint16_t table[(1&lt;&lt; tablebits_p)+(maxsymbols_p *2)]</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00115">lzxd.cpp:115</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_a72edd87d81a878e15a73138240999bda"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#a72edd87d81a878e15a73138240999bda">openage::util::compress::HuffmanTable::tablebits</a></div><div class="ttdeci">static constexpr unsigned int tablebits</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00101">lzxd.cpp:101</a></div></div>
<div class="ttc" id="namespaceopenage_1_1rng_1_1tests_xhtml_a7c865b312f955cab3ff9ea078fd0cc95"><div class="ttname"><a href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">openage::rng::tests::fill</a></div><div class="ttdeci">void fill()</div><div class="ttdef"><b>Definition:</b> <a href="rng__tests_8cpp_source.xhtml#l00194">rng_tests.cpp:194</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1compress_1_1_huffman_table_xhtml_abdc66dd010cb036245a0992a599ddff5"><div class="ttname"><a href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#abdc66dd010cb036245a0992a599ddff5">openage::util::compress::HuffmanTable::HUFF_MAXBITS</a></div><div class="ttdeci">static constexpr unsigned int HUFF_MAXBITS</div><div class="ttdef"><b>Definition:</b> <a href="lzxd_8cpp_source.xhtml#l00099">lzxd.cpp:99</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="abdc66dd010cb036245a0992a599ddff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdc66dd010cb036245a0992a599ddff5">&#9670;&nbsp;</a></span>HUFF_MAXBITS</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr unsigned int <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::HUFF_MAXBITS = 16</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00099">99</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

</div>
</div>
<a id="a7df946fa968a570c9bde8aaa9437d1f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7df946fa968a570c9bde8aaa9437d1f2">&#9670;&nbsp;</a></span>is_empty</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::is_empty</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>the table could not be constructed and is empty (try_make_decode_table failed). this will lead to errors, should <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml#ae6b32648570816ac41436130bd87f3be">read_sym()</a> be called. </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00121">121</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="lzxd_8cpp_source.xhtml#l00617">openage::util::compress::LZXDStream::decode_symbol_from_aligned_block()</a>, <a class="el" href="lzxd_8cpp_source.xhtml#l00526">openage::util::compress::LZXDStream::decode_symbol_from_verbatim_block()</a>, and <a class="el" href="lzxd_8cpp_source.xhtml#l00477">openage::util::compress::LZXDStream::init_next_block()</a>.</p>

</div>
</div>
<a id="a3bbe52e654dd6ad728e626cb84b1400e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3bbe52e654dd6ad728e626cb84b1400e">&#9670;&nbsp;</a></span>len</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">unsigned char <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::len[maxsymbols_p+<a class="el" href="namespaceopenage_1_1util_1_1compress.xhtml#aaeed04374c06ce503ff18341be17e29e">LZX_LENTABLE_SAFETY</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>table of code lengths (in bits) for each symbol </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="lzxd_8cpp_source.xhtml#l00477">openage::util::compress::LZXDStream::init_next_block()</a>, and <a class="el" href="lzxd_8cpp_source.xhtml#l00458">openage::util::compress::LZXDStream::reset_state()</a>.</p>

</div>
</div>
<a id="a997dcfba10999b15243bc36218e0782a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a997dcfba10999b15243bc36218e0782a">&#9670;&nbsp;</a></span>lzx</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">class <a class="el" href="classopenage_1_1util_1_1compress_1_1_l_z_x_d_stream.xhtml">LZXDStream</a>* <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::lzx</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="lzxd_8cpp_source.xhtml#l00123">openage::util::compress::HuffmanTable&lt; LZX_PRETREE_MAXSYMBOLS, LZX_PRETREE_TABLEBITS &gt;::HuffmanTable()</a>.</p>

</div>
</div>
<a id="aaaea7324005ce900ce270da741c53640"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaea7324005ce900ce270da741c53640">&#9670;&nbsp;</a></span>maxsymbols</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr unsigned int <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::maxsymbols = maxsymbols_p</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00100">100</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

</div>
</div>
<a id="a2b93c25503f0c98e4420d82e7b104213"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b93c25503f0c98e4420d82e7b104213">&#9670;&nbsp;</a></span>table</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">uint16_t <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::table[(1&lt;&lt; tablebits_p)+(maxsymbols_p *2)]</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>table to fill up with decoded values for symbols, and pointers. symbols shorter than tablebits_p are decoded by direct lookup (that's the first (1&lt;&lt;tablebits_p) entries). longer symbols are decoded by following pointers to the appropriate leaf in the upper nsyms*2 fields. </p>

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00115">115</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

</div>
</div>
<a id="a72edd87d81a878e15a73138240999bda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72edd87d81a878e15a73138240999bda">&#9670;&nbsp;</a></span>tablebits</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int maxsymbols_p, unsigned int tablebits_p, bool allow_empty = false&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr unsigned int <a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">openage::util::compress::HuffmanTable</a>&lt; maxsymbols_p, tablebits_p, allow_empty &gt;::tablebits = tablebits_p</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="lzxd_8cpp_source.xhtml#l00101">101</a> of file <a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/compress/<a class="el" href="lzxd_8cpp_source.xhtml">lzxd.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1util.xhtml">util</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1util_1_1compress.xhtml">compress</a></li><li class="navelem"><a class="el" href="classopenage_1_1util_1_1compress_1_1_huffman_table.xhtml">HuffmanTable</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
