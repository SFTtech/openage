<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::curve::tests Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1curve_1_1tests.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">openage::curve::tests Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">map_test_element</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ae83c263763307d2e883c942afdeb6f2f"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae83c263763307d2e883c942afdeb6f2f">operator&lt;&lt;</a> (std::ostream &amp;o, const <a class="el" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">map_test_element</a> &amp;e)</td></tr>
<tr class="separator:ae83c263763307d2e883c942afdeb6f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaea2f0357531c64ef6af72d720e37f2"><td class="memTemplParams" colspan="2">template&lt;typename key_t , typename val_t &gt; </td></tr>
<tr class="memitem:adaea2f0357531c64ef6af72d720e37f2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#adaea2f0357531c64ef6af72d720e37f2">dump</a> (const std::unordered_map&lt; key_t, val_t &gt; &amp;<a class="el" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>)</td></tr>
<tr class="separator:adaea2f0357531c64ef6af72d720e37f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafe8d47259322a390c43cae62d308296"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">test_map</a> ()</td></tr>
<tr class="separator:aafe8d47259322a390c43cae62d308296"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a994d019a14acd704605a0ccff85558c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">test_list</a> ()</td></tr>
<tr class="separator:a994d019a14acd704605a0ccff85558c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4b27fadf76c2a10960f6b7e7ff7c724"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">test_queue</a> ()</td></tr>
<tr class="separator:ae4b27fadf76c2a10960f6b7e7ff7c724"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc4e799a037edab37e1e35a74da593b7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a> ()</td></tr>
<tr class="separator:afc4e799a037edab37e1e35a74da593b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6290e10c0af22b4a5bcbcf4ad20eb88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml#aa6290e10c0af22b4a5bcbcf4ad20eb88">curve_types</a> ()</td></tr>
<tr class="separator:aa6290e10c0af22b4a5bcbcf4ad20eb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="afc4e799a037edab37e1e35a74da593b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc4e799a037edab37e1e35a74da593b7">&#9670;&nbsp;</a></span>container()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::curve::tests::container </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="container_8cpp_source.xhtml#l00205">205</a> of file <a class="el" href="container_8cpp_source.xhtml">container.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                 {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">test_map</a>();</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">test_list</a>();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">test_queue</a>();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_ae4b27fadf76c2a10960f6b7e7ff7c724"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#ae4b27fadf76c2a10960f6b7e7ff7c724">openage::curve::tests::test_queue</a></div><div class="ttdeci">void test_queue()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00138">container.cpp:138</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_a994d019a14acd704605a0ccff85558c8"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#a994d019a14acd704605a0ccff85558c8">openage::curve::tests::test_list</a></div><div class="ttdeci">void test_list()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00134">container.cpp:134</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_aafe8d47259322a390c43cae62d308296"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#aafe8d47259322a390c43cae62d308296">openage::curve::tests::test_map</a></div><div class="ttdeci">void test_map()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00040">container.cpp:40</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="container_8cpp_source.xhtml#l00134">test_list()</a>, <a class="el" href="container_8cpp_source.xhtml#l00040">test_map()</a>, and <a class="el" href="container_8cpp_source.xhtml#l00138">test_queue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="queue_8h_source.xhtml#l00079">openage::curve::Queue&lt; T &gt;::begin()</a>, <a class="el" href="queue_8h_source.xhtml#l00105">openage::curve::Queue&lt; T &gt;::between()</a>, <a class="el" href="queue_8h_source.xhtml#l00164">openage::curve::Queue&lt; T &gt;::clean()</a>, <a class="el" href="queue_8h_source.xhtml#l00158">openage::curve::Queue&lt; T &gt;::clear()</a>, <a class="el" href="queue_8h_source.xhtml#l00095">openage::curve::Queue&lt; T &gt;::end()</a>, <a class="el" href="queue_8h_source.xhtml#l00122">openage::curve::Queue&lt; T &gt;::erase()</a>, <a class="el" href="keyframe__container_8h_source.xhtml#l00267">openage::curve::KeyframeContainer&lt; T &gt;::erase()</a>, <a class="el" href="keyframe__container_8h_source.xhtml#l00248">openage::curve::KeyframeContainer&lt; T &gt;::erase_after()</a>, <a class="el" href="unit_2action_8cpp_source.xhtml#l01227">openage::AttackAction::fire_projectile()</a>, <a class="el" href="algorithm_8h_source.xhtml#l00018">openage::util::for_each()</a>, <a class="el" href="value__container_8h_source.xhtml#l00091">openage::curve::ValueContainer&lt; T &gt;::frame()</a>, <a class="el" href="queue_8h_source.xhtml#l00073">openage::curve::Queue&lt; T &gt;::front()</a>, <a class="el" href="continuous_8h_source.xhtml#l00032">openage::curve::Continuous&lt; T &gt;::get()</a>, <a class="el" href="discrete_8h_source.xhtml#l00045">openage::curve::Discrete&lt; T &gt;::get()</a>, <a class="el" href="discrete_8h_source.xhtml#l00061">openage::curve::Discrete&lt; T &gt;::get_previous()</a>, <a class="el" href="discrete_8h_source.xhtml#l00053">openage::curve::Discrete&lt; T &gt;::get_time()</a>, <a class="el" href="queue_8h_source.xhtml#l00129">openage::curve::Queue&lt; T &gt;::insert()</a>, <a class="el" href="keyframe__container_8h_source.xhtml#l00194">openage::curve::KeyframeContainer&lt; T &gt;::last()</a>, <a class="el" href="value__container_8h_source.xhtml#l00098">openage::curve::ValueContainer&lt; T &gt;::next_frame()</a>, <a class="el" href="game__control_8cpp_source.xhtml#l00625">openage::EditorMode::paint_entity_at()</a>, <a class="el" href="game__control_8cpp_source.xhtml#l00411">openage::ActionMode::place_selection()</a>, <a class="el" href="algorithm_8h_source.xhtml#l00029">openage::util::remove_from()</a>, <a class="el" href="value__container_8h_source.xhtml#l00084">openage::curve::ValueContainer&lt; T &gt;::set_insert()</a>, <a class="el" href="value__container_8h_source.xhtml#l00063">openage::curve::ValueContainer&lt; T &gt;::set_last()</a>, and <a class="el" href="unit_2action_8cpp_source.xhtml#l00808">openage::TrainAction::update()</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_afc4e799a037edab37e1e35a74da593b7_cgraph.svg" width="100%" height="583"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_afc4e799a037edab37e1e35a74da593b7_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa6290e10c0af22b4a5bcbcf4ad20eb88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6290e10c0af22b4a5bcbcf4ad20eb88">&#9670;&nbsp;</a></span>curve_types()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::curve::tests::curve_types </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="curve__types_8cpp_source.xhtml#l00014">14</a> of file <a class="el" href="curve__types_8cpp_source.xhtml">curve_types.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;                   {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="comment">// Check the base container type</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;event::Loop&gt;();</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        KeyframeContainer&lt;int&gt; c{loop};</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="keyword">auto</span> p0 = c.insert(0, 0);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="keyword">auto</span> p1 = c.insert(1, 1);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">auto</span> p2 = c.insert(10, 2);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="comment">// last function tests without hints</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(0)-&gt;value, 0);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(1)-&gt;value, 1); <span class="comment">// last shall give &gt;= not only &gt; !</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(5)-&gt;value, 1);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(10)-&gt;value, 2);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47)-&gt;value, 2);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="comment">// last() with hints. Yes this can make a difference. we want to be</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="comment">// absolutely sure!</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(0, p0)-&gt;value, 0);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(1, p0)-&gt;value, 1); <span class="comment">// last shall give &gt;= not only &gt; !</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(5, p0)-&gt;value, 1);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(10, p0)-&gt;value, 2);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47, p0)-&gt;value, 2);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(0, p1)-&gt;value, 0);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(1, p1)-&gt;value, 1); <span class="comment">// last shall give &gt;= not only &gt; !</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(5, p1)-&gt;value, 1);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(10, p1)-&gt;value, 2);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47, p1)-&gt;value, 2);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(0, p2)-&gt;value, 0);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(1, p2)-&gt;value, 1); <span class="comment">// last shall give &gt;= not only &gt; !</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(5, p2)-&gt;value, 1);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(10, p2)-&gt;value, 2);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47, p2)-&gt;value, 2);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="comment">// Now test the basic erase() function</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="comment">// Delete the 1-element, new values should be [0, 2]</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        c.erase(c.last(1));</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(1)-&gt;value, 0);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(5)-&gt;value, 0);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47)-&gt;value, 2);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="comment">// should do nothing, since we delete all at &gt; 99,</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="comment">// but the last element is at 10.</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        c.erase_after(c.last(99));</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47)-&gt;value, 2);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="comment">// now since 5 &lt; 10, element with value 2 has to be gone</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        c.erase_after(c.last(5));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.last(47)-&gt;value, 0);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="comment">// Check the Simple Continuous type</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">auto</span> f = std::make_shared&lt;event::Loop&gt;();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        Continuous&lt;float&gt; c(f, 0);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        c.set_insert(0, 0);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        c.set_insert(10, 1);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(0), 0);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c.get(1), 0.1, 1e-7);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">auto</span> f = std::make_shared&lt;event::Loop&gt;();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        Continuous&lt;float&gt; c(f, 0);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing Continuous float&quot;</span>);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        c.set_insert(0, 0);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Inserting t:20, v:20&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        c.set_insert(20, 20);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(0), 0);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(1), 1);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(7), 7);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        c.set_last(20, 10);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Inserting t:20, v:10. This should overwrite the old values!&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(0), 0);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(2), 1);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(8), 4);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">//Check the discrete type</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keyword">auto</span> f = std::make_shared&lt;event::Loop&gt;();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        Discrete&lt;int&gt; c(f, 0);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        c.set_insert(0, 0);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        c.set_insert(10, 10);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(0), 0);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(1), 0);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(10), 10);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        Discrete&lt;std::string&gt; complex(f, 0);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        complex.set_insert(0, <span class="stringliteral">&quot;Test 0&quot;</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        complex.set_insert(10, <span class="stringliteral">&quot;Test 10&quot;</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(complex.get(0), <span class="stringliteral">&quot;Test 0&quot;</span>);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(complex.get(1), <span class="stringliteral">&quot;Test 0&quot;</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(complex.get(10), <span class="stringliteral">&quot;Test 10&quot;</span>);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">//check set_last</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keyword">auto</span> f = std::make_shared&lt;event::Loop&gt;();</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        Discrete&lt;int&gt; c(f, 0);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        c.set_insert(0, 0);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        c.set_insert(1, 1);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        c.set_insert(3, 3);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(3), 3);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        c.set_last(2, 10);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(2), 10);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// Encountered Errors</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">auto</span> f = std::make_shared&lt;event::Loop&gt;();</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        Continuous&lt;int&gt; c(f, 0);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        c.set_insert(1, 1);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        c.set_last(1, -5);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get(1), -5);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="testing_8h_xhtml_ae531a534fa7f4028ddf113ae72caa6aa"><div class="ttname"><a href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a></div><div class="ttdeci">#define TESTEQUALS_FLOAT(left, right, epsilon)</div><div class="ttdoc">Asserts that the left expression equals the right expression, within a margin of error epsilon,...</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00068">testing.h:68</a></div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="message_8h_source.xhtml#l00176">DBG</a>, <a class="el" href="continuous_8h_source.xhtml#l00032">openage::curve::Continuous&lt; T &gt;::get()</a>, <a class="el" href="discrete_8h_source.xhtml#l00045">openage::curve::Discrete&lt; T &gt;::get()</a>, <a class="el" href="keyframe__container_8h_source.xhtml#l00101">openage::curve::KeyframeContainer&lt; T &gt;::insert()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="value__container_8h_source.xhtml#l00084">openage::curve::ValueContainer&lt; T &gt;::set_insert()</a>, <a class="el" href="value__container_8h_source.xhtml#l00063">openage::curve::ValueContainer&lt; T &gt;::set_last()</a>, <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>, and <a class="el" href="testing_8h_source.xhtml#l00068">TESTEQUALS_FLOAT</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_aa6290e10c0af22b4a5bcbcf4ad20eb88_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="adaea2f0357531c64ef6af72d720e37f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaea2f0357531c64ef6af72d720e37f2">&#9670;&nbsp;</a></span>dump()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename key_t , typename val_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::curve::tests::dump </td>
          <td>(</td>
          <td class="paramtype">const std::unordered_map&lt; key_t, val_t &gt; &amp;&#160;</td>
          <td class="paramname"><em>map</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="container_8cpp_source.xhtml#l00034">34</a> of file <a class="el" href="container_8cpp_source.xhtml">container.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                                     {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;i : <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        std::cout &lt;&lt; i.first &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; i.second &lt;&lt; std::endl;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="ttc" id="setup_8cpp_xhtml_a96dd93a55be2a0953e454b56d83f65da"><div class="ttname"><a href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a></div><div class="ttdeci">std::map&lt; void *, std::function&lt; bool()&gt; &gt; map</div><div class="ttdef"><b>Definition:</b> <a href="setup_8cpp_source.xhtml#l00025">setup.cpp:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="setup_8cpp_source.xhtml#l00025">map</a>.</p>

</div>
</div>
<a id="ae83c263763307d2e883c942afdeb6f2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae83c263763307d2e883c942afdeb6f2f">&#9670;&nbsp;</a></span>operator&lt;&lt;()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::curve::tests::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>o</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1curve_1_1tests_1_1map__test__element.xhtml">map_test_element</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="container_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="container_8cpp_source.xhtml">container.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                                  {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    o &lt;&lt; e.value;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> o;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="container_8cpp_source.xhtml#l00017">openage::curve::tests::map_test_element::value</a>.</p>

</div>
</div>
<a id="a994d019a14acd704605a0ccff85558c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a994d019a14acd704605a0ccff85558c8">&#9670;&nbsp;</a></span>test_list()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::curve::tests::test_list </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="container_8cpp_source.xhtml#l00134">134</a> of file <a class="el" href="container_8cpp_source.xhtml">container.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                 {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="container_8cpp_source.xhtml#l00205">container()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_a994d019a14acd704605a0ccff85558c8_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aafe8d47259322a390c43cae62d308296"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafe8d47259322a390c43cae62d308296">&#9670;&nbsp;</a></span>test_map()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::curve::tests::test_map </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="container_8cpp_source.xhtml#l00040">40</a> of file <a class="el" href="container_8cpp_source.xhtml">container.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    static_assert(std::is_copy_constructible&lt;MapFilterIterator&lt;<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, UnorderedMap&lt;int, int&gt;&gt;&gt;::value,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                  <span class="stringliteral">&quot;UnorderedMapIterator not Copy Constructable able&quot;</span>);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    static_assert(std::is_copy_assignable&lt;MapFilterIterator&lt;<span class="keywordtype">int</span>, <span class="keywordtype">int</span>, UnorderedMap&lt;int, int&gt;&gt;&gt;::value,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                  <span class="stringliteral">&quot;UnorderedMapIterator not Copy Assignable&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    UnorderedMap&lt;int, int&gt; <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.insert(0, 10, 0, 0);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.insert(5, 10, 5, 1);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.insert(100, 200, 200, 2);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Basic tests test lookup in the middle of the range.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(2, 0); <span class="comment">//At timestamp 2 element 0</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 0);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(20, 5);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(7, 5);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 1);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(20, 5);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(2, 5);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(150, 200);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 2);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(500, 200);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(5, 200);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// test 2.0: test at the boundaries</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(0, 0);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 0);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(10, 0);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(5, 5);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 1);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(10, 5);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">auto</span> t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(100, 200);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">true</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.value().value(), 2);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        t = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.at(200, 200);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(t.has_value(), <span class="keyword">false</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// Test 3.0 Iterations</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">// Iteration tests</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        std::unordered_map&lt;int, int&gt; reference;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        reference[0] = 0;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        reference[5] = 1;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        reference[200] = 2;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.begin(0); it != <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.end(); ++it) { <span class="comment">// Get all</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.key());</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        reference[5] = 5;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.begin(1); it != <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.end(90); ++it) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.key());</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        reference[5] = 5;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.between(1,90); it != <a class="code" href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a>.end(); ++it) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.key());</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="ttc" id="setup_8cpp_xhtml_a96dd93a55be2a0953e454b56d83f65da"><div class="ttname"><a href="setup_8cpp.xhtml#a96dd93a55be2a0953e454b56d83f65da">map</a></div><div class="ttdeci">std::map&lt; void *, std::function&lt; bool()&gt; &gt; map</div><div class="ttdef"><b>Definition:</b> <a href="setup_8cpp_source.xhtml#l00025">setup.cpp:25</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="setup_8cpp_source.xhtml#l00025">map</a>, and <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="container_8cpp_source.xhtml#l00205">container()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_aafe8d47259322a390c43cae62d308296_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="ae4b27fadf76c2a10960f6b7e7ff7c724"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4b27fadf76c2a10960f6b7e7ff7c724">&#9670;&nbsp;</a></span>test_queue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::curve::tests::test_queue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="container_8cpp_source.xhtml#l00138">138</a> of file <a class="el" href="container_8cpp_source.xhtml">container.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                  {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    static_assert(std::is_copy_constructible&lt;QueueFilterIterator&lt;<span class="keywordtype">int</span>, Queue&lt;int&gt;&gt;&gt;::value,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                  <span class="stringliteral">&quot;QueueIterator not Copy Constructable able&quot;</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    static_assert(std::is_copy_assignable&lt;QueueFilterIterator&lt;<span class="keywordtype">int</span>, Queue&lt;int&gt;&gt;&gt;::value,</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                  <span class="stringliteral">&quot;QueueIterator not Copy Assignable&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    Queue&lt;int&gt; q;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    q.insert(0, 1);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    q.insert(2, 2);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    q.insert(4, 3);</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    q.insert(10, 4);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    q.insert(100001, 5);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(0), 1);</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(1), 2);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(2), 2);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(3), 3);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(4), 3);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(5), 4);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(10), 4);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(12), 5);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(*q.begin(100000), 5);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        std::unordered_set&lt;int&gt; reference = {1,2,3};</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.between(0,6); it != q.end(); ++it) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        std::unordered_set&lt;int&gt; reference = {2,3,4};</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.between(1,40); it != q.end(); ++it) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        std::unordered_set&lt;int&gt; reference = {};</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.between(30,40); it != q.end(); ++it) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        std::unordered_set&lt;int&gt; reference = {1,2,3,4};</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = q.between(0,40); it != q.end(); ++it) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keyword">auto</span> ri = reference.find(it.value());</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">if</span> (ri != reference.end()) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                reference.erase(ri);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(reference.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="queue_8h_source.xhtml#l00079">openage::curve::Queue&lt; T &gt;::begin()</a>, <a class="el" href="queue_8h_source.xhtml#l00105">openage::curve::Queue&lt; T &gt;::between()</a>, <a class="el" href="queue_8h_source.xhtml#l00095">openage::curve::Queue&lt; T &gt;::end()</a>, <a class="el" href="queue_8h_source.xhtml#l00129">openage::curve::Queue&lt; T &gt;::insert()</a>, and <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="container_8cpp_source.xhtml#l00205">container()</a>.</p>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_ae4b27fadf76c2a10960f6b7e7ff7c724_cgraph.svg" width="100%" height="515"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1curve_1_1tests_ae4b27fadf76c2a10960f6b7e7ff7c724_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1curve.xhtml">curve</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1curve_1_1tests.xhtml">tests</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
