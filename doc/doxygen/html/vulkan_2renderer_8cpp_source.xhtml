<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/renderer/vulkan/renderer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('vulkan_2renderer_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">renderer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="vulkan_2renderer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2017-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="vulkan_2renderer_8h.xhtml">renderer.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;../../error/error.h&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;../../util/fslike/directory.h&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;../resources/shader_source.h&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="util_8h.xhtml">util.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="graphics__device_8h.xhtml">graphics_device.h</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="vulkan_2render__target_8h.xhtml">render_target.h</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="vulkan_2shader__program_8h.xhtml">shader_program.h</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>renderer {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span>vulkan {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#a15177acc1d4eb10a786e021ea8eb0207">   20</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#a15177acc1d4eb10a786e021ea8eb0207">VlkRenderer::do_the_thing</a>(<a class="code" href="classopenage_1_1util_1_1_path.xhtml">util::Path</a>&amp; dir) {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="comment">// Please keep in mind that this function is only for testing and so might be messy.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="comment">// Enumerate available physical devices</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">auto</span> devices = <a class="code" href="util_8h.xhtml#a856371a624dd7d99cc9da19f0d7889f0">vk_do_ritual</a>(vkEnumeratePhysicalDevices, this-&gt;<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#aaf6e22301e773a2fad9130ae145578c1">instance</a>);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">if</span> (devices.empty()) {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;No Vulkan devices available.&quot;</span>);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    }</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::vector&lt;std::pair&lt;VkPhysicalDevice, SurfaceSupportDetails&gt;&gt; support_per_dev;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> dev : devices) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keyword">auto</span> support = <a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a5d8a1353bad85bd21c733fc21d8bef76">VlkGraphicsDevice::find_device_surface_support</a>(dev, <a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#ad05869503faae400ed15e68f930e4c77">surface</a>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> (support) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            support_per_dev.emplace_back(dev, *support);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (support_per_dev.empty()) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;No valid Vulkan device available.&quot;</span>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="comment">// TODO rate devices based on capabilities</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// Given an instance and surface, selects the best (fastest, most capable, etc.) graphics device</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// which supports rendering onto that particular surface and constructs the object.</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">auto</span> <span class="keyword">const</span>&amp; <a class="code" href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">info</a> = support_per_dev[0];</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="comment">// Create a logical device with a single queue for both graphics and present</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">info</a>.second.maybe_present_fam) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">throw</span> 0;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml">VlkGraphicsDevice</a> dev(<a class="code" href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">info</a>.first, { info.second.graphics_fam } );</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_drawable_display.xhtml">VlkDrawableDisplay</a> display(dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), <a class="code" href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">info</a>.second);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// TODO reinit swapchain on window resize</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">auto</span> vert = <a class="code" href="classopenage_1_1renderer_1_1resources_1_1_shader_source.xhtml">resources::ShaderSource</a>(</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="namespaceopenage_1_1renderer_1_1resources.xhtml#a4d61ee75465eff5bc5c4ce640faff96ca281026d966626615768589fa301ae6af">resources::shader_lang_t::spirv</a>,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="namespaceopenage_1_1renderer_1_1resources.xhtml#a2462ec4f102aa1b93c1676dbbadb0a7ba2b5bc093b09bd81f51de433bde9d202a">resources::shader_stage_t::vertex</a>,</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_path.xhtml">util::Path</a>(dir) / <span class="stringliteral">&quot;assets/shaders/vert.spv&quot;</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    );</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">auto</span> frag = <a class="code" href="classopenage_1_1renderer_1_1resources_1_1_shader_source.xhtml">resources::ShaderSource</a>(</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="namespaceopenage_1_1renderer_1_1resources.xhtml#a4d61ee75465eff5bc5c4ce640faff96ca281026d966626615768589fa301ae6af">resources::shader_lang_t::spirv</a>,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="namespaceopenage_1_1renderer_1_1resources.xhtml#a2462ec4f102aa1b93c1676dbbadb0a7ba02e918fc72837d7c2689be88684dceb1">resources::shader_stage_t::fragment</a>,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_path.xhtml">util::Path</a>(dir) / <span class="stringliteral">&quot;assets/shaders/frag.spv&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    );</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_shader_program.xhtml">VlkShaderProgram</a> prog(dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), { vert, frag } );</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    VkPipelineVertexInputStateCreateInfo cr_vert_in = {};</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    cr_vert_in.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// all init&#39;d to 0</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    VkPipelineInputAssemblyStateCreateInfo cr_in_asm = {};</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    cr_in_asm.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    cr_in_asm.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    cr_in_asm.primitiveRestartEnable = VK_FALSE;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    VkViewport viewport = {};</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    viewport.x = 0.0f;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    viewport.y = 0.0f;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    viewport.width = display.extent.width;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    viewport.height = display.extent.height;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    viewport.minDepth = 0.0f;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    viewport.maxDepth = 1.0f;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    VkRect2D scissor = {};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    scissor.offset = { 0, 0 };</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    scissor.extent = display.extent;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    VkPipelineViewportStateCreateInfo cr_view = {};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    cr_view.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    cr_view.viewportCount = 1;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    cr_view.pViewports = &amp;viewport;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    cr_view.scissorCount = 1;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    cr_view.pScissors = &amp;scissor;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    VkPipelineRasterizationStateCreateInfo cr_raster = {};</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    cr_raster.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    cr_raster.depthClampEnable = VK_FALSE;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    cr_raster.rasterizerDiscardEnable = VK_FALSE;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    cr_raster.polygonMode = VK_POLYGON_MODE_FILL;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    cr_raster.lineWidth = 1.0f;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    cr_raster.cullMode = VK_CULL_MODE_BACK_BIT;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    cr_raster.frontFace = VK_FRONT_FACE_CLOCKWISE;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    cr_raster.depthBiasEnable = VK_FALSE;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    VkPipelineMultisampleStateCreateInfo cr_msaa = {};</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    cr_msaa.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    cr_msaa.sampleShadingEnable = VK_FALSE;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    cr_msaa.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    VkPipelineColorBlendAttachmentState blend_state = {};</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    blend_state.colorWriteMask = VK_COLOR_COMPONENT_R_BIT</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                 | VK_COLOR_COMPONENT_G_BIT</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                 | VK_COLOR_COMPONENT_B_BIT</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                 | VK_COLOR_COMPONENT_A_BIT;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    blend_state.blendEnable = VK_TRUE;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    blend_state.srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    blend_state.dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    blend_state.colorBlendOp = VK_BLEND_OP_ADD;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    blend_state.srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    blend_state.dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    blend_state.alphaBlendOp = VK_BLEND_OP_ADD;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    VkPipelineColorBlendStateCreateInfo cr_blend = {};</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    cr_blend.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    cr_blend.logicOpEnable = VK_FALSE;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    cr_blend.attachmentCount = 1;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    cr_blend.pAttachments = &amp;blend_state;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    VkPipelineLayoutCreateInfo cr_layout = {};</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    cr_layout.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="comment">// empty object</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    VkPipelineLayout layout;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreatePipelineLayout, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_layout, <span class="keyword">nullptr</span>, &amp;layout);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    VkAttachmentDescription color_attachment = {};</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    color_attachment.format = display.format;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    color_attachment.samples = VK_SAMPLE_COUNT_1_BIT;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    color_attachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    color_attachment.storeOp = VK_ATTACHMENT_STORE_OP_STORE;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    color_attachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    color_attachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    color_attachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    color_attachment.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    VkAttachmentReference color_attachment_ref = {};</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    color_attachment_ref.attachment = 0;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    color_attachment_ref.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    VkSubpassDescription subpass = {};</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    subpass.pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    subpass.colorAttachmentCount = 1;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    subpass.pColorAttachments = &amp;color_attachment_ref;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    VkSubpassDependency dep = {};</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    dep.srcSubpass = VK_SUBPASS_EXTERNAL;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    dep.dstSubpass = 0;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    dep.srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    dep.srcAccessMask = 0;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    dep.dstStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    dep.dstAccessMask = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    VkRenderPassCreateInfo cr_render_pass = {};</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    cr_render_pass.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    cr_render_pass.attachmentCount = 1;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    cr_render_pass.pAttachments = &amp;color_attachment;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    cr_render_pass.subpassCount = 1;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    cr_render_pass.pSubpasses = &amp;subpass;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    cr_render_pass.dependencyCount = 1;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    cr_render_pass.pDependencies = &amp;dep;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    VkRenderPass render_pass;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreateRenderPass, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_render_pass, <span class="keyword">nullptr</span>, &amp;render_pass);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    VkGraphicsPipelineCreateInfo cr_pipeline = {};</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    cr_pipeline.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    cr_pipeline.stageCount = 2;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    cr_pipeline.pStages = prog.pipeline_stage_infos.data();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    cr_pipeline.pVertexInputState = &amp;cr_vert_in;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    cr_pipeline.pInputAssemblyState = &amp;cr_in_asm;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    cr_pipeline.pViewportState = &amp;cr_view;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    cr_pipeline.pRasterizationState = &amp;cr_raster;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    cr_pipeline.pMultisampleState = &amp;cr_msaa;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    cr_pipeline.pDepthStencilState = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    cr_pipeline.pColorBlendState = &amp;cr_blend;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    cr_pipeline.pDynamicState = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    cr_pipeline.layout = layout;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    cr_pipeline.renderPass = render_pass;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    cr_pipeline.subpass = 0;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    cr_pipeline.basePipelineHandle = VK_NULL_HANDLE;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    cr_pipeline.basePipelineIndex = -1;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    VkPipeline pipeline;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreateGraphicsPipelines, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), VK_NULL_HANDLE, 1, &amp;cr_pipeline, <span class="keyword">nullptr</span>, &amp;pipeline);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    std::vector&lt;VkFramebuffer&gt; fbufs;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> view : display.image_views) {</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        VkFramebufferCreateInfo cr_fbuf = {};</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        cr_fbuf.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        cr_fbuf.renderPass = render_pass;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        cr_fbuf.attachmentCount = 1;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        cr_fbuf.pAttachments = &amp;view;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        cr_fbuf.width = display.extent.width;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        cr_fbuf.height = display.extent.height;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        cr_fbuf.layers = 1;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        VkFramebuffer fbuf;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreateFramebuffer, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_fbuf, <span class="keyword">nullptr</span>, &amp;fbuf);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        fbufs.push_back(fbuf);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    VkCommandPoolCreateInfo cr_pool = {};</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    cr_pool.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    cr_pool.queueFamilyIndex = <a class="code" href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">info</a>.second.graphics_fam;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    cr_pool.flags = 0;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    VkCommandPool pool;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreateCommandPool, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_pool, <span class="keyword">nullptr</span>, &amp;pool);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    std::vector&lt;VkCommandBuffer&gt; cmd_bufs(fbufs.size());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    VkCommandBufferAllocateInfo cr_cmd_bufs = {};</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    cr_cmd_bufs.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    cr_cmd_bufs.commandPool = pool;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    cr_cmd_bufs.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    cr_cmd_bufs.commandBufferCount = static_cast&lt;uint32_t&gt;(cmd_bufs.size());</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkAllocateCommandBuffers, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_cmd_bufs, cmd_bufs.data());</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; cmd_bufs.size(); i++) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keyword">auto</span> cmd_buf = cmd_bufs[i];</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keyword">auto</span> fbuf = fbufs[i];</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        VkCommandBufferBeginInfo begin_info = {};</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        begin_info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        begin_info.flags = VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        begin_info.pInheritanceInfo = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        vkBeginCommandBuffer(cmd_buf, &amp;begin_info);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        VkRenderPassBeginInfo cmd_render = {};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        cmd_render.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        cmd_render.renderPass = render_pass;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        cmd_render.framebuffer = fbuf;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        cmd_render.renderArea.offset = { 0, 0 };</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        cmd_render.renderArea.extent = display.extent;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        VkClearValue clear_color = {{{ 0.0f, 0.0f, 0.0f, 1.0f }}};</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        cmd_render.clearValueCount = 1;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        cmd_render.pClearValues = &amp;clear_color;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        vkCmdBeginRenderPass(cmd_buf, &amp;cmd_render, VK_SUBPASS_CONTENTS_INLINE);</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        vkCmdBindPipeline(cmd_buf, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        vkCmdDraw(cmd_buf, 3, 1, 0, 0);</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        vkCmdEndRenderPass(cmd_buf);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkEndCommandBuffer, cmd_buf);</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        VkSemaphoreCreateInfo cr_sem = {};</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        cr_sem.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        VkSemaphore sem_image_ready;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        VkSemaphore sem_render_done;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreateSemaphore, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_sem, <span class="keyword">nullptr</span>, &amp;sem_image_ready);</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkCreateSemaphore, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), &amp;cr_sem, <span class="keyword">nullptr</span>, &amp;sem_render_done);</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        uint32_t img_idx = 0;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkAcquireNextImageKHR, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>(), display.swapchain, <a class="code" href="namespaceopenage_1_1console_1_1tests.xhtml#a46ebd3333dc9196558ac9aced828d117">std::numeric_limits&lt;uint64_t&gt;::max</a>(), sem_image_ready, VK_NULL_HANDLE, &amp;img_idx);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        VkSubmitInfo submit = {};</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        submit.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        submit.waitSemaphoreCount = 1;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        submit.pWaitSemaphores = &amp;sem_image_ready;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        VkPipelineStageFlags mask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        submit.pWaitDstStageMask = &amp;mask;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        submit.commandBufferCount = 1;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        submit.pCommandBuffers = &amp;cmd_bufs[img_idx];</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        submit.signalSemaphoreCount = 1;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        submit.pSignalSemaphores = &amp;sem_render_done;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <a class="code" href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a>(vkQueueSubmit, dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a94443fbae944ba5163514c6ea7397099">get_queue</a>(0), 1, &amp;submit, VK_NULL_HANDLE);</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        VkPresentInfoKHR present_info = {};</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        present_info.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        present_info.waitSemaphoreCount = 1;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        present_info.pWaitSemaphores = &amp;sem_render_done;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        present_info.swapchainCount = 1;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        present_info.pSwapchains = &amp;display.swapchain;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        present_info.pImageIndices = &amp;img_idx;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        present_info.pResults = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        vkQueuePresentKHR(dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a94443fbae944ba5163514c6ea7397099">get_queue</a>(0), &amp;present_info);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        vkQueueWaitIdle(dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a94443fbae944ba5163514c6ea7397099">get_queue</a>(0));</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        vkDeviceWaitIdle(dev.<a class="code" href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">get_device</a>());</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;}}} <span class="comment">// openage::renderer::vulkan</span></div><div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device_xhtml_a94443fbae944ba5163514c6ea7397099"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a94443fbae944ba5163514c6ea7397099">openage::renderer::vulkan::VlkGraphicsDevice::get_queue</a></div><div class="ttdeci">VkQueue get_queue(size_t idx) const</div><div class="ttdef"><b>Definition:</b> <a href="graphics__device_8cpp_source.xhtml#l00162">graphics_device.cpp:162</a></div></div>
<div class="ttc" id="namespaceopenage_1_1renderer_1_1resources_xhtml_a4d61ee75465eff5bc5c4ce640faff96ca281026d966626615768589fa301ae6af"><div class="ttname"><a href="namespaceopenage_1_1renderer_1_1resources.xhtml#a4d61ee75465eff5bc5c4ce640faff96ca281026d966626615768589fa301ae6af">openage::renderer::resources::shader_lang_t::spirv</a></div></div>
<div class="ttc" id="namespaceopenage_1_1renderer_1_1resources_xhtml_a2462ec4f102aa1b93c1676dbbadb0a7ba2b5bc093b09bd81f51de433bde9d202a"><div class="ttname"><a href="namespaceopenage_1_1renderer_1_1resources.xhtml#a2462ec4f102aa1b93c1676dbbadb0a7ba2b5bc093b09bd81f51de433bde9d202a">openage::renderer::resources::shader_stage_t::vertex</a></div></div>
<div class="ttc" id="vulkan_2render__target_8h_xhtml"><div class="ttname"><a href="vulkan_2render__target_8h.xhtml">render_target.h</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_path_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_path.xhtml">openage::util::Path</a></div><div class="ttdef"><b>Definition:</b> <a href="util_2path_8h_source.xhtml#l00046">path.h:46</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device_xhtml"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml">openage::renderer::vulkan::VlkGraphicsDevice</a></div><div class="ttdoc">Owns a device capable of graphics operations and surface presentation using WSI.</div><div class="ttdef"><b>Definition:</b> <a href="graphics__device_8h_source.xhtml#l00042">graphics_device.h:42</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device_xhtml_a19d43547d0fa2d45ae1b9299637c2f8e"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a19d43547d0fa2d45ae1b9299637c2f8e">openage::renderer::vulkan::VlkGraphicsDevice::get_device</a></div><div class="ttdeci">VkDevice get_device() const</div><div class="ttdef"><b>Definition:</b> <a href="graphics__device_8cpp_source.xhtml#l00158">graphics_device.cpp:158</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1resources_1_1_shader_source_xhtml"><div class="ttname"><a href="classopenage_1_1renderer_1_1resources_1_1_shader_source.xhtml">openage::renderer::resources::ShaderSource</a></div><div class="ttdoc">Stores source code for a part of a shader program.</div><div class="ttdef"><b>Definition:</b> <a href="shader__source_8h_source.xhtml#l00030">shader_source.h:30</a></div></div>
<div class="ttc" id="graphics__device_8h_xhtml"><div class="ttname"><a href="graphics__device_8h.xhtml">graphics_device.h</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer_xhtml_aaf6e22301e773a2fad9130ae145578c1"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#aaf6e22301e773a2fad9130ae145578c1">openage::renderer::vulkan::VlkRenderer::instance</a></div><div class="ttdeci">VkInstance instance</div><div class="ttdef"><b>Definition:</b> <a href="vulkan_2renderer_8h_source.xhtml#l00019">renderer.h:19</a></div></div>
<div class="ttc" id="util_8h_xhtml"><div class="ttname"><a href="util_8h.xhtml">util.h</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_drawable_display_xhtml"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_drawable_display.xhtml">openage::renderer::vulkan::VlkDrawableDisplay</a></div><div class="ttdef"><b>Definition:</b> <a href="vulkan_2render__target_8h_source.xhtml#l00018">render_target.h:18</a></div></div>
<div class="ttc" id="vulkan_2shader__program_8h_xhtml"><div class="ttname"><a href="vulkan_2shader__program_8h.xhtml">shader_program.h</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device_xhtml_a5d8a1353bad85bd21c733fc21d8bef76"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_graphics_device.xhtml#a5d8a1353bad85bd21c733fc21d8bef76">openage::renderer::vulkan::VlkGraphicsDevice::find_device_surface_support</a></div><div class="ttdeci">static std::optional&lt; SurfaceSupportDetails &gt; find_device_surface_support(VkPhysicalDevice, VkSurfaceKHR)</div><div class="ttdef"><b>Definition:</b> <a href="graphics__device_8cpp_source.xhtml#l00017">graphics_device.cpp:17</a></div></div>
<div class="ttc" id="util_8h_xhtml_a6be5ebed2b0abfd022e22c9ca2dab4b6"><div class="ttname"><a href="util_8h.xhtml#a6be5ebed2b0abfd022e22c9ca2dab4b6">VK_CALL_CHECKED</a></div><div class="ttdeci">#define VK_CALL_CHECKED(fun,...)</div><div class="ttdef"><b>Definition:</b> <a href="util_8h_source.xhtml#l00050">util.h:50</a></div></div>
<div class="ttc" id="util_8h_xhtml_a856371a624dd7d99cc9da19f0d7889f0"><div class="ttname"><a href="util_8h.xhtml#a856371a624dd7d99cc9da19f0d7889f0">vk_do_ritual</a></div><div class="ttdeci">std::vector&lt; R &gt; vk_do_ritual(R2(*func)(uint32_t *, R *))</div><div class="ttdef"><b>Definition:</b> <a href="util_8h_source.xhtml#l00011">util.h:11</a></div></div>
<div class="ttc" id="vulkan_2renderer_8h_xhtml"><div class="ttname"><a href="vulkan_2renderer_8h.xhtml">renderer.h</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer_xhtml_ad05869503faae400ed15e68f930e4c77"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#ad05869503faae400ed15e68f930e4c77">openage::renderer::vulkan::VlkRenderer::surface</a></div><div class="ttdeci">VkSurfaceKHR surface</div><div class="ttdef"><b>Definition:</b> <a href="vulkan_2renderer_8h_source.xhtml#l00021">renderer.h:21</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_shader_program_xhtml"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_shader_program.xhtml">openage::renderer::vulkan::VlkShaderProgram</a></div><div class="ttdef"><b>Definition:</b> <a href="vulkan_2shader__program_8h_source.xhtml#l00027">shader_program.h:27</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a3f1815b698faf5786fc5e20bcac7704b"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">openage::log.info</a></div><div class="ttdeci">def info(msg, *args, **kwargs)</div><div class="ttdoc">info message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00114">__init__.py:114</a></div></div>
<div class="ttc" id="namespaceopenage_1_1console_1_1tests_xhtml_a46ebd3333dc9196558ac9aced828d117"><div class="ttname"><a href="namespaceopenage_1_1console_1_1tests.xhtml#a46ebd3333dc9196558ac9aced828d117">openage::console::tests::max</a></div><div class="ttdeci">int max(int a, int b)</div><div class="ttdef"><b>Definition:</b> <a href="console_2tests_8cpp_source.xhtml#l00031">tests.cpp:31</a></div></div>
<div class="ttc" id="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer_xhtml_a15177acc1d4eb10a786e021ea8eb0207"><div class="ttname"><a href="classopenage_1_1renderer_1_1vulkan_1_1_vlk_renderer.xhtml#a15177acc1d4eb10a786e021ea8eb0207">openage::renderer::vulkan::VlkRenderer::do_the_thing</a></div><div class="ttdeci">void do_the_thing(util::Path &amp;dir)</div><div class="ttdoc">Testing function that draws a triangle. Not part of the final renderer implementation.</div><div class="ttdef"><b>Definition:</b> <a href="vulkan_2renderer_8cpp_source.xhtml#l00020">renderer.cpp:20</a></div></div>
<div class="ttc" id="namespaceopenage_1_1renderer_1_1resources_xhtml_a2462ec4f102aa1b93c1676dbbadb0a7ba02e918fc72837d7c2689be88684dceb1"><div class="ttname"><a href="namespaceopenage_1_1renderer_1_1resources.xhtml#a2462ec4f102aa1b93c1676dbbadb0a7ba02e918fc72837d7c2689be88684dceb1">openage::renderer::resources::shader_stage_t::fragment</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_4a01dee474130c13b802372087a79ed7.xhtml">renderer</a></li><li class="navelem"><a class="el" href="dir_5e283aaea65a5b19f33079dd4e180ef8.xhtml">vulkan</a></li><li class="navelem"><a class="el" href="vulkan_2renderer_8cpp.xhtml">renderer.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
