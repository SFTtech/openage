<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: libopenage/util/compiler.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('compiler_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">compiler.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="compiler_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2019 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="compiler_8h.xhtml">compiler.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#ifndef _WIN32</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;cxxabi.h&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;dlfcn.h&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define WIN32_LEAN_AND_MEAN</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;Windows.h&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;DbgHelp.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="strings_8h.xhtml">strings.h</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;optional&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">namespace </span>util {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">   25</a></span>&#160;std::string <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *symbol) {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// TODO: demangle names for MSVC; Possibly using UnDecorateSymbolName</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// https://msdn.microsoft.com/en-us/library/windows/desktop/ms681400(v=vs.85).aspx</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="comment">// Could it be that MSVC&#39;s typeid(T).name() already returns a demangled name? It seems that .raw_name() returns the mangled name</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> symbol;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordtype">int</span> status;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordtype">char</span> *buf = abi::__cxa_demangle(symbol, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>, &amp;status);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> (status != 0) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> symbol;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        std::string <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>{buf};</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        free(buf);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">   46</a></span>&#160;std::string <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *addr) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">sformat</a>(<span class="stringliteral">&quot;[%p]&quot;</span>, addr);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">namespace </span>{</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keywordtype">bool</span> initialized_symbol_handler_successfully = <span class="keyword">false</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;std::optional&lt;std::string&gt; symbol_name_win(<span class="keyword">const</span> <span class="keywordtype">void</span> *addr) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Handle to the current process</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">static</span> HANDLE process_handle = INVALID_HANDLE_VALUE;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> initialized_symbol_handler = <span class="keyword">false</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// SymInitialize &amp; SymFromAddr are, according to MSDN, not thread-safe.</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">static</span> std::mutex sym_mutex;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    std::lock_guard&lt;std::mutex&gt; sym_lock_guard{sym_mutex};</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Initialize symbol handler for process, if it has not yet been initialized</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// If we are not succesful on the first try, leave it, since MSDN says that searching for symbol files is very time consuming</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (!initialized_symbol_handler) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        initialized_symbol_handler = <span class="keyword">true</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        process_handle = GetCurrentProcess();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        initialized_symbol_handler_successfully = SymInitialize(process_handle, <span class="keyword">nullptr</span>, TRUE);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">if</span> (initialized_symbol_handler_successfully) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="comment">// The magic of winapi</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        constexpr <span class="keywordtype">int</span> name_buffer_size = 1024;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        constexpr <span class="keywordtype">int</span> buffer_size = <span class="keyword">sizeof</span>(SYMBOL_INFO) + name_buffer_size * <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        std::array&lt;char, buffer_size&gt; buffer;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        SYMBOL_INFO *symbol_info = reinterpret_cast&lt;SYMBOL_INFO*&gt;(buffer.data());</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        symbol_info-&gt;SizeOfStruct = <span class="keyword">sizeof</span>(SYMBOL_INFO);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        symbol_info-&gt;MaxNameLen = name_buffer_size;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> (SymFromAddr(process_handle, reinterpret_cast&lt;DWORD64&gt;(addr), <span class="keyword">nullptr</span>, symbol_info)) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keywordflow">return</span> std::string(symbol_info-&gt;Name);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> std::optional&lt;std::string&gt;();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">   98</a></span>&#160;std::string <a class="code" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">symbol_name</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *addr, <span class="keywordtype">bool</span> require_exact_addr, <span class="keywordtype">bool</span> no_pure_addrs) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">auto</span> symbol_name_result = symbol_name_win(addr);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (!initialized_symbol_handler_successfully ||</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        !symbol_name_result.has_value()) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> no_pure_addrs ? <span class="stringliteral">&quot;&quot;</span> : <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(addr);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> symbol_name_result.value();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    Dl_info addr_info;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (dladdr(addr, &amp;addr_info) == 0) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// dladdr has... failed.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> no_pure_addrs ? <span class="stringliteral">&quot;&quot;</span> : <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(addr);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">size_t</span> symbol_offset = (size_t) addr - (<span class="keywordtype">size_t</span>) addr_info.dli_saddr;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (addr_info.dli_sname == <span class="keyword">nullptr</span> or (symbol_offset != 0 and require_exact_addr)) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">return</span> no_pure_addrs ? <span class="stringliteral">&quot;&quot;</span> : <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(addr);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span> (symbol_offset == 0) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// this is our symbol name.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a>(addr_info.dli_sname);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">util::sformat</a>(<span class="stringliteral">&quot;%s+0x%lx&quot;</span>,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                 <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a>(addr_info.dli_sname).c_str(),</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                 symbol_offset);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#ae411a50a0e24d32ab564979b2df6ed24">  136</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopenage_1_1util.xhtml#ae411a50a0e24d32ab564979b2df6ed24">is_symbol</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *addr) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (!initialized_symbol_handler_successfully) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> symbol_name_win(addr).has_value();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    Dl_info addr_info;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (dladdr(addr, &amp;addr_info) == 0) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> (addr_info.dli_saddr == addr);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}} <span class="comment">// openage::util</span></div><div class="ttc" id="strings_8h_xhtml"><div class="ttname"><a href="strings_8h.xhtml">strings.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a5546877ed3bcad568ab21989a40ec088"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">openage::util::sformat</a></div><div class="ttdeci">std::string sformat(const char *fmt,...)</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00020">strings.cpp:20</a></div></div>
<div class="ttc" id="compiler_8h_xhtml"><div class="ttname"><a href="compiler_8h.xhtml">compiler.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abe26c67b0463cb53c33b0659ebb89370"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">openage::util::addr_to_string</a></div><div class="ttdeci">std::string addr_to_string(const void *addr)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00046">compiler.cpp:46</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aebed129b2a0773520cdd8d40b0f70318"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">openage::util::demangle</a></div><div class="ttdeci">std::string demangle(const char *symbol)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00025">compiler.cpp:25</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ac6219374623d05b075782ea1adb09c0c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">openage::util::symbol_name</a></div><div class="ttdeci">std::string symbol_name(const void *addr, bool require_exact_addr, bool no_pure_addrs)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00098">compiler.cpp:98</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ae411a50a0e24d32ab564979b2df6ed24"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ae411a50a0e24d32ab564979b2df6ed24">openage::util::is_symbol</a></div><div class="ttdeci">bool is_symbol(const void *addr)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00136">compiler.cpp:136</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="compiler_8cpp.xhtml">compiler.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
