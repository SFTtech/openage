<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/pyinterface/functional.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('functional_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">functional.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="functional_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2016 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;../util/compiler.h&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;../util/language.h&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="exctranslate_8h.xhtml">exctranslate.h</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="setup_8h.xhtml">setup.h</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span>pyinterface {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span> ... ArgTypes&gt;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml">   58</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a> {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a9aafa14c1e14d75e4c65258650e2281b">   60</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a9aafa14c1e14d75e4c65258650e2281b">Func</a>()</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        :</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>{<span class="keyword">nullptr</span>} {}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="comment">// for construction from lambdas and other callables (from C++).</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a411404c88e1c3a1e94d5491aadcf444b">   66</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a411404c88e1c3a1e94d5491aadcf444b">Func</a>(F &amp;&amp;f) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa7c97b27e57c92dd099c84d52d19697d">   71</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa7c97b27e57c92dd099c84d52d19697d">Func</a>(std::reference_wrapper&lt;F&gt; f) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// for construction from std::function objects (from C++).</span></div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a81cf56998f2138465da539c140b15443">   76</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a81cf56998f2138465da539c140b15443">Func</a>(<span class="keyword">const</span> std::function&lt;ReturnType (ArgTypes ...)&gt; &amp;f) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa841aafdf6e5a35761599c6e57188541">   80</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa841aafdf6e5a35761599c6e57188541">Func</a>(std::function&lt;ReturnType (ArgTypes ...)&gt; &amp;&amp;f) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// for assignment of lambdas and other callables (from C++).</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a29df3bfe5f42965d194fd061e8c38d92">   86</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a29df3bfe5f42965d194fd061e8c38d92">operator =</a>(F &amp;&amp;f) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a79f4926a369a8e3cf54214abe80257a6">   92</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a29df3bfe5f42965d194fd061e8c38d92">operator =</a>(std::reference_wrapper&lt;F&gt; f) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="comment">// for assignment of std::function objects (from C++).</span></div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa4c47359a02ab210750ba35bf012ff37">   98</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a29df3bfe5f42965d194fd061e8c38d92">operator =</a>(<span class="keyword">const</span> std::function&lt;ReturnType (ArgTypes ...)&gt; &amp;f) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a0193d5a98fe674619cd1d9b8d00d6b55">  103</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a29df3bfe5f42965d194fd061e8c38d92">operator =</a>(std::function&lt;ReturnType (ArgTypes ...)&gt; &amp;&amp;f) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = f;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">  111</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">check_fptr</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(not this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>)) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Uninitialized Func object at &quot;</span> &lt;&lt;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <a class="code" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">util::symbol_name</a>(static_cast&lt;const void *&gt;(<span class="keyword">this</span>)) &lt;&lt; <span class="stringliteral">&quot;: &quot;</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="stringliteral">&quot;Can not call or convert to std::function.&quot;</span>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keyword">true</span> <span class="comment">// collect backtrace info</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            );</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a6f751ca999eabb5bd65e5bc73acc50b1">  126</a></span>&#160;    ReturnType <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a6f751ca999eabb5bd65e5bc73acc50b1">call</a>(ArgTypes ...args)<span class="keyword"> const </span>{</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">check_fptr</a>();</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>(args...);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#aaed99bb0f4d5ec8a33f23db333df3fce">  135</a></span>&#160;    <span class="keyword">operator</span> <span class="keyword">const</span> std::function&lt;ReturnType (ArgTypes ...)&gt; &amp;() <span class="keyword">const</span> {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">check_fptr</a>();</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a523f9e78c668fd6192a81cab5e6c72cb">  143</a></span>&#160;    <span class="keyword">const</span> std::function&lt;ReturnType (ArgTypes ...)&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a523f9e78c668fd6192a81cab5e6c72cb">get</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">check_fptr</a>();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... BoundArgTypes&gt;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa519971fccd473cdb5de2f8c39a377a1">  158</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#aa519971fccd473cdb5de2f8c39a377a1">bind</a>(<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgTypes ..., ArgTypes ...&gt;</a> f, BoundArgTypes ...bound_args) {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        this-&gt;bind_catchexcept_impl&lt;std::is_void&lt;ReturnType&gt;::value, BoundArgTypes ...&gt;(f, bound_args...);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> return_type_is_void, <span class="keyword">typename</span> ... BoundArgTypes&gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#acea6cb67bc0e8ea78d513f6db4e2e477">  168</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">typename</span> std::enable_if&lt;return_type_is_void&gt;::type <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#acea6cb67bc0e8ea78d513f6db4e2e477">bind_catchexcept_impl</a>(<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgTypes ..., ArgTypes ...&gt;</a> f, BoundArgTypes ...bound_args) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = [=](ArgTypes ...args) -&gt; ReturnType {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            f.<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml#ab5cdb320863a46abc561330527a01e3d">ptr</a>(bound_args..., args...);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <a class="code" href="namespaceopenage_1_1pyinterface.xhtml#a89529648faa2ef530fefcc90f1c1ab70">translate_exc_py_to_cpp</a>();</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        };</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> return_type_is_void, <span class="keyword">typename</span> ... BoundArgTypes&gt;</div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a46b2a8ba15d152e0d0ef9110dbf7b3f2">  180</a></span>&#160;    <span class="keyword">inline</span> <span class="keyword">typename</span> std::enable_if&lt;not return_type_is_void&gt;::type <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a46b2a8ba15d152e0d0ef9110dbf7b3f2">bind_catchexcept_impl</a>(<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgTypes ..., ArgTypes ...&gt;</a> f, BoundArgTypes ...bound_args) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = [=](ArgTypes ...args) -&gt; ReturnType {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            ReturnType &amp;&amp;<a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> = f.<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml#ab5cdb320863a46abc561330527a01e3d">ptr</a>(bound_args..., args...);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <a class="code" href="namespaceopenage_1_1pyinterface.xhtml#a89529648faa2ef530fefcc90f1c1ab70">translate_exc_py_to_cpp</a>();</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... BoundArgTypes&gt;</div><div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a543c66d2cfec84be7ea1cc38b413e74b">  194</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a543c66d2cfec84be7ea1cc38b413e74b">bind_noexcept</a>(<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgTypes ..., ArgTypes ...&gt;</a> f, BoundArgTypes ...bound_args) {</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a> = [=](ArgTypes ...args) -&gt; ReturnType {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> f.<a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml#ab5cdb320863a46abc561330527a01e3d">ptr</a>(bound_args..., args...);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        };</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="comment">// non-variadic aliases for bind, for use by Cython</span></div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a5e41d36722ffdb915f78dd3db9019489">  201</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a5e41d36722ffdb915f78dd3db9019489">bind0</a>(ReturnType (*f)(ArgTypes ...)) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        this-&gt;bind&lt;&gt;(</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, ArgTypes ...&gt;</a>(f));</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#ad9131b2925896e28440f173fd5e7e3c1">  206</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#ad9131b2925896e28440f173fd5e7e3c1">bind_noexcept0</a>(ReturnType (*f)(ArgTypes ...)) {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        this-&gt;bind_noexcept&lt;&gt;(</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, ArgTypes ...&gt;</a>(f));</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> BoundArgType0&gt;</div><div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#ad1eef53a086eafc1ced966d45e549e58">  212</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#ad1eef53a086eafc1ced966d45e549e58">bind1</a>(ReturnType (*f)(BoundArgType0, ArgTypes ...), BoundArgType0 bound_arg0) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        this-&gt;bind&lt;BoundArgType0&gt;(</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgType0, ArgTypes ...&gt;</a>(f), bound_arg0);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> BoundArgType0&gt;</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a2b05c1be5593865d85e1c2a50dcbe14e">  218</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a2b05c1be5593865d85e1c2a50dcbe14e">bind_noexcept1</a>(ReturnType (*f)(BoundArgType0, ArgTypes ...), BoundArgType0 bound_arg0) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        this-&gt;bind_noexcept&lt;BoundArgType0&gt;(</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgType0, ArgTypes ...&gt;</a>(f), bound_arg0);</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> BoundArgType0, <span class="keyword">typename</span> BoundArgType1&gt;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#ac1830958fb682c3036ea8a6d6add24f3">  224</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#ac1830958fb682c3036ea8a6d6add24f3">bind2</a>(ReturnType (*f)(BoundArgType0, BoundArgType1, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        this-&gt;bind&lt;BoundArgType0, BoundArgType1&gt;(</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgType0, BoundArgType1, ArgTypes ...&gt;</a>(f), bound_arg0, bound_arg1);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> BoundArgType0, <span class="keyword">typename</span> BoundArgType1&gt;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a76b8e4db1b1c8b9077f251f9c2cb1c40">  230</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a76b8e4db1b1c8b9077f251f9c2cb1c40">bind_noexcept2</a>(ReturnType (*f)(BoundArgType0, BoundArgType1, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1) {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        this-&gt;bind_noexcept&lt;BoundArgType0, BoundArgType1&gt;(</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgType0, BoundArgType1, ArgTypes ...&gt;</a>(f), bound_arg0, bound_arg1);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> BoundArgType0, <span class="keyword">typename</span> BoundArgType1, <span class="keyword">typename</span> BoundArgType2&gt;</div><div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#ace88962df6215e31b2961581e5fae4c3">  236</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#ace88962df6215e31b2961581e5fae4c3">bind3</a>(ReturnType (*f)(BoundArgType0, BoundArgType1, BoundArgType2, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1, BoundArgType2 bound_arg2) {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        this-&gt;bind&lt;BoundArgType0, BoundArgType1, BoundArgType2&gt;(</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgType0, BoundArgType1, BoundArgType2, ArgTypes ...&gt;</a>(f), bound_arg0, bound_arg1, bound_arg2);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> BoundArgType0, <span class="keyword">typename</span> BoundArgType1, <span class="keyword">typename</span> BoundArgType2&gt;</div><div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a995b506379e9550f1ca6c39fb7bb4f5e">  242</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a995b506379e9550f1ca6c39fb7bb4f5e">bind_noexcept3</a>(ReturnType (*f)(BoundArgType0, BoundArgType1, BoundArgType2, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1, BoundArgType2 bound_arg2) {</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        this-&gt;bind_noexcept&lt;BoundArgType0, BoundArgType1, BoundArgType2&gt;(</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_function_ptr.xhtml">util::FunctionPtr&lt;ReturnType, BoundArgType0, BoundArgType1, BoundArgType2, ArgTypes ...&gt;</a>(f), bound_arg0, bound_arg1, bound_arg2);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">  248</a></span>&#160;    std::function&lt;ReturnType (ArgTypes ...)&gt; <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;};</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"> * Now follow the glorious, aforementioned aliases for Cython, and accompanying pxd declarations.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"> * No arguments.</span></div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"> * cppclass Func0[RT]:</span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"> *     RT call() except +</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"> *     void bind0                          (RT (*f)()              except * with gil               ) except +</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"> *     void bind1          [BT0]           (RT (*f)(BT0)           except * with gil, BT0          ) except +</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"> *     void bind2          [BT0, BT1]      (RT (*f)(BT0, BT1)      except * with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"> *     void bind3          [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2) except * with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"> *     void bind_noexcept0                 (RT (*f)()                       with gil               ) except +</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment"> *     void bind_noexcept1 [BT0]           (RT (*f)(BT0)                    with gil, BT0          ) except +</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"> *     void bind_noexcept2 [BT0, BT1]      (RT (*f)(BT0, BT1)               with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment"> *     void bind_noexcept3 [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2)          with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT&gt;</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1pyinterface.xhtml#ac5982090c06dd898f6ae31eb91d0eb03">  275</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func0</a> = <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func&lt;RT&gt;</a>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"> * One argument.</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"> * cppclass Func1[RT, AT0]:</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"> *     RT call(AT0) except +</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"> *     void bind0                          (RT (*f)(AT0)                except * with gil               ) except +</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"> *     void bind1          [BT0]           (RT (*f)(BT0, AT0)           except * with gil, BT0          ) except +</span></div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"> *     void bind2          [BT0, BT1]      (RT (*f)(BT0, BT1, AT0)      except * with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment"> *     void bind3          [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0) except * with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"> *     void bind_noexcept0                 (RT (*f)(AT0)                         with gil               ) except +</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"> *     void bind_noexcept1 [BT0]           (RT (*f)(BT0, AT0)                    with gil, BT0          ) except +</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment"> *     void bind_noexcept2 [BT0, BT1]      (RT (*f)(BT0, BT1, AT0)               with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"> *     void bind_noexcept3 [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0)          with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> AT0&gt;</div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1pyinterface.xhtml#af2af31f0399e7a2975248aa5d1b90770">  296</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func1</a> = <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func&lt;RT, AT0&gt;</a>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"> * Two arguments.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"> * cppclass Func2[RT, AT0, AT1]:</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"> *     RT call(AT0, AT1) except +</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment"> *     void bind0                          (RT (*f)(AT0, AT1)                except * with gil               ) except +</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"> *     void bind1          [BT0]           (RT (*f)(BT0, AT0, AT1)           except * with gil, BT0          ) except +</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment"> *     void bind2          [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1)      except * with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"> *     void bind3          [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1) except * with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment"> *     void bind_noexcept0                 (RT (*f)(AT0, AT1)                         with gil               ) except +</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"> *     void bind_noexcept1 [BT0]           (RT (*f)(BT0, AT0, AT1)                    with gil, BT0          ) except +</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"> *     void bind_noexcept2 [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1)               with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"> *     void bind_noexcept3 [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1)          with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> AT0, <span class="keyword">typename</span> AT1&gt;</div><div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1pyinterface.xhtml#aa8a4b7d9f80e0eb01b608e76e63f0200">  318</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func2</a> = <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func&lt;RT, AT0, AT1&gt;</a>;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"> * Three arguments.</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment"> * cppclass Func3[RT, AT0, AT1, AT2]:</span></div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"> *     RT call(AT0, AT1, AT2) except +</span></div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"> *     void bind0                          (RT (*f)(AT0, AT1, AT2)                except * with gil               ) except +</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment"> *     void bind1          [BT0]           (RT (*f)(BT0, AT0, AT1, AT2)           except * with gil, BT0          ) except +</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment"> *     void bind2          [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1, AT2)      except * with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"> *     void bind3          [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1, AT2) except * with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment"> *     void bind_noexcept0                 (RT (*f)(AT0, AT1, AT2)                         with gil               ) except +</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment"> *     void bind_noexcept1 [BT0]           (RT (*f)(BT0, AT0, AT1, AT2)                    with gil, BT0          ) except +</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"> *     void bind_noexcept2 [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1, AT2)               with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment"> *     void bind_noexcept3 [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1, AT2)          with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> AT0, <span class="keyword">typename</span> AT1, <span class="keyword">typename</span> AT2&gt;</div><div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1pyinterface.xhtml#aa3e403feb31c12f6da74581bdd27e7d7">  340</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func3</a> = <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func&lt;RT, AT0, AT1, AT2&gt;</a>;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"> * Four arguments.</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment"> * cppclass Func4[RT, AT0, AT1, AT2, AT3]:</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment"> *     RT call(AT0, AT1, AT2, AT3) except +</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment"> *     void bind0                          (RT (*f)(AT0, AT1, AT2, AT3)                except * with gil               ) except +</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"> *     void bind1          [BT0]           (RT (*f)(BT0, AT0, AT1, AT2, AT3)           except * with gil, BT0          ) except +</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"> *     void bind2          [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1, AT2, AT3)      except * with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment"> *     void bind3          [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1, AT2, AT3) except * with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"> *     void bind_noexcept0                 (RT (*f)(AT0, AT1, AT2, AT3)                         with gil               ) except +</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment"> *     void bind_noexcept1 [BT0]           (RT (*f)(BT0, AT0, AT1, AT2, AT3)                    with gil, BT0          ) except +</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment"> *     void bind_noexcept2 [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1, AT2, AT3)               with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="comment"> *     void bind_noexcept3 [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1, AT2, AT3)          with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> AT0, <span class="keyword">typename</span> AT1, <span class="keyword">typename</span> AT2, <span class="keyword">typename</span> AT3&gt;</div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1pyinterface.xhtml#a5cac3c9ec570cd62730cd4b0c8861f54">  362</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func4</a> = <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func&lt;RT, AT0, AT1, AT2, AT3&gt;</a>;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"> * Five arguments.</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment"> * cppclass Func5[RT, AT0, AT1, AT2, AT3, AT4]:</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"> *     RT call(AT0, AT1, AT2, AT3, AT4) except +</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment"> *     void bind0                          (RT (*f)(AT0, AT1, AT2, AT3, AT4)                except * with gil               ) except +</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"> *     void bind1          [BT0]           (RT (*f)(BT0, AT0, AT1, AT2, AT3, AT4)           except * with gil, BT0          ) except +</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment"> *     void bind2          [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1, AT2, AT3, AT4)      except * with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment"> *     void bind3          [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1, AT2, AT3, AT4) except * with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment"> *     void bind_noexcept0                 (RT (*f)(AT0, AT1, AT2, AT3, AT4)                         with gil               ) except +</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment"> *     void bind_noexcept1 [BT0]           (RT (*f)(BT0, AT0, AT1, AT2, AT3, AT4)                    with gil, BT0          ) except +</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment"> *     void bind_noexcept2 [BT0, BT1]      (RT (*f)(BT0, BT1, AT0, AT1, AT2, AT3, AT4)               with gil, BT0, BT1     ) except +</span></div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment"> *     void bind_noexcept3 [BT0, BT1, BT2] (RT (*f)(BT0, BT1, BT2, AT0, AT1, AT2, AT3, AT4)          with gil, BT0, BT1, BT2) except +</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> RT, <span class="keyword">typename</span> AT0, <span class="keyword">typename</span> AT1, <span class="keyword">typename</span> AT2, <span class="keyword">typename</span> AT3, <span class="keyword">typename</span> AT4&gt;</div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1pyinterface.xhtml#ad60b5c16d79c409477eefd3791832f41">  385</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func5</a> = <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func&lt;RT, AT0, AT1, AT2, AT3, AT4&gt;</a>;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> ReturnType, <span class="keyword">typename</span> ... ArgTypes&gt;</div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">  407</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a> : <span class="keyword">public</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...&gt; {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a151c2faee8d91169645204f1eb3a6a22">  409</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a151c2faee8d91169645204f1eb3a6a22">PyIfFunc</a>() {</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <a class="code" href="namespaceopenage_1_1pyinterface.xhtml#a591d9bd55fa1f9904547f3f2dcb3796d">add_py_if_component</a>(<span class="keyword">this</span>, [=]() -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <span class="keywordflow">try</span> {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">check_fptr</a>();</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            } <span class="keywordflow">catch</span> (<a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a> &amp;) {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            }</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        });</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    }</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a1ac0419304a48f6c323317604c117388">  420</a></span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a1ac0419304a48f6c323317604c117388">~PyIfFunc</a>() {</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <a class="code" href="namespaceopenage_1_1pyinterface.xhtml#a3eda9726ffb3eeec9b423f300ec70c07">destroy_py_if_component</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// no copy construction!</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a>&lt;ReturnType, ArgTypes ...&gt;(<span class="keyword">const</span> <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a>&lt;ReturnType, ArgTypes ...&gt; &amp;other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a>&lt;ReturnType, ArgTypes ...&gt;(<a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a>&lt;ReturnType, ArgTypes ...&gt; &amp;&amp;other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a>&lt;ReturnType, ArgTypes ...&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#aa6f654b601f7c6beabcd05796c2b87ee">operator =</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc&lt;ReturnType, ArgTypes ...&gt;</a> &amp;other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    <a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc</a>&lt;ReturnType, ArgTypes ...&gt; &amp;<a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#aa6f654b601f7c6beabcd05796c2b87ee">operator =</a>(<a class="code" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">PyIfFunc&lt;ReturnType, ArgTypes ...&gt;</a> &amp;&amp;other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="comment">// but you may convert this to a regular Func object.</span></div><div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a411242c89ae252742b481bba3d94a4fa">  431</a></span>&#160;    <span class="keyword">operator</span> <a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...&gt; &amp;() <span class="keyword">const</span> {</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml">Func</a>&lt;ReturnType, ArgTypes ...<span class="keyword">&gt;</span>&gt;(this-&gt;<a class="code" href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">fptr</a>);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    }</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;};</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}} <span class="comment">// openage::pyinterface</span></div><div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_aa519971fccd473cdb5de2f8c39a377a1"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#aa519971fccd473cdb5de2f8c39a377a1">openage::pyinterface::Func::bind</a></div><div class="ttdeci">void bind(util::FunctionPtr&lt; ReturnType, BoundArgTypes ..., ArgTypes ... &gt; f, BoundArgTypes ...bound_args)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00158">functional.h:158</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_aa841aafdf6e5a35761599c6e57188541"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#aa841aafdf6e5a35761599c6e57188541">openage::pyinterface::Func::Func</a></div><div class="ttdeci">Func(std::function&lt; ReturnType(ArgTypes ...)&gt; &amp;&amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00080">functional.h:80</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_ad9131b2925896e28440f173fd5e7e3c1"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#ad9131b2925896e28440f173fd5e7e3c1">openage::pyinterface::Func::bind_noexcept0</a></div><div class="ttdeci">void bind_noexcept0(ReturnType(*f)(ArgTypes ...))</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00206">functional.h:206</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a9aafa14c1e14d75e4c65258650e2281b"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a9aafa14c1e14d75e4c65258650e2281b">openage::pyinterface::Func::Func</a></div><div class="ttdeci">Func()</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00060">functional.h:60</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_ac1830958fb682c3036ea8a6d6add24f3"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#ac1830958fb682c3036ea8a6d6add24f3">openage::pyinterface::Func::bind2</a></div><div class="ttdeci">void bind2(ReturnType(*f)(BoundArgType0, BoundArgType1, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00224">functional.h:224</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_py_if_func_xhtml_aa6f654b601f7c6beabcd05796c2b87ee"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#aa6f654b601f7c6beabcd05796c2b87ee">openage::pyinterface::PyIfFunc::operator=</a></div><div class="ttdeci">PyIfFunc&lt; ReturnType, ArgTypes ... &gt; &amp; operator=(const PyIfFunc&lt; ReturnType, ArgTypes ... &gt; &amp;other)=delete</div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_ad1eef53a086eafc1ced966d45e549e58"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#ad1eef53a086eafc1ced966d45e549e58">openage::pyinterface::Func::bind1</a></div><div class="ttdeci">void bind1(ReturnType(*f)(BoundArgType0, ArgTypes ...), BoundArgType0 bound_arg0)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00212">functional.h:212</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a995b506379e9550f1ca6c39fb7bb4f5e"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a995b506379e9550f1ca6c39fb7bb4f5e">openage::pyinterface::Func::bind_noexcept3</a></div><div class="ttdeci">void bind_noexcept3(ReturnType(*f)(BoundArgType0, BoundArgType1, BoundArgType2, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1, BoundArgType2 bound_arg2)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00242">functional.h:242</a></div></div>
<div class="ttc" id="exctranslate_8h_xhtml"><div class="ttname"><a href="exctranslate_8h.xhtml">exctranslate.h</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml">openage::pyinterface::Func</a></div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00058">functional.h:58</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_acea6cb67bc0e8ea78d513f6db4e2e477"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#acea6cb67bc0e8ea78d513f6db4e2e477">openage::pyinterface::Func::bind_catchexcept_impl</a></div><div class="ttdeci">std::enable_if&lt; return_type_is_void &gt;::type bind_catchexcept_impl(util::FunctionPtr&lt; ReturnType, BoundArgTypes ..., ArgTypes ... &gt; f, BoundArgTypes ...bound_args)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00168">functional.h:168</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_function_ptr_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_function_ptr.xhtml">openage::util::FunctionPtr</a></div><div class="ttdef"><b>Definition:</b> <a href="language_8h_source.xhtml#l00020">language.h:20</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a6f751ca999eabb5bd65e5bc73acc50b1"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a6f751ca999eabb5bd65e5bc73acc50b1">openage::pyinterface::Func::call</a></div><div class="ttdeci">ReturnType call(ArgTypes ...args) const</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00126">functional.h:126</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a46b2a8ba15d152e0d0ef9110dbf7b3f2"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a46b2a8ba15d152e0d0ef9110dbf7b3f2">openage::pyinterface::Func::bind_catchexcept_impl</a></div><div class="ttdeci">std::enable_if&lt; not return_type_is_void &gt;::type bind_catchexcept_impl(util::FunctionPtr&lt; ReturnType, BoundArgTypes ..., ArgTypes ... &gt; f, BoundArgTypes ...bound_args)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00180">functional.h:180</a></div></div>
<div class="ttc" id="setup_8h_xhtml"><div class="ttname"><a href="setup_8h.xhtml">setup.h</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a411404c88e1c3a1e94d5491aadcf444b"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a411404c88e1c3a1e94d5491aadcf444b">openage::pyinterface::Func::Func</a></div><div class="ttdeci">Func(F &amp;&amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00066">functional.h:66</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a523f9e78c668fd6192a81cab5e6c72cb"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a523f9e78c668fd6192a81cab5e6c72cb">openage::pyinterface::Func::get</a></div><div class="ttdeci">const std::function&lt; ReturnType(ArgTypes ...)&gt; &amp; get() const</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00143">functional.h:143</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_ace88962df6215e31b2961581e5fae4c3"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#ace88962df6215e31b2961581e5fae4c3">openage::pyinterface::Func::bind3</a></div><div class="ttdeci">void bind3(ReturnType(*f)(BoundArgType0, BoundArgType1, BoundArgType2, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1, BoundArgType2 bound_arg2)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00236">functional.h:236</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a83b9691db46167c2637c86f5a71cb40f"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a83b9691db46167c2637c86f5a71cb40f">openage::pyinterface::Func::check_fptr</a></div><div class="ttdeci">void check_fptr() const</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00111">functional.h:111</a></div></div>
<div class="ttc" id="namespaceopenage_1_1pyinterface_xhtml_a591d9bd55fa1f9904547f3f2dcb3796d"><div class="ttname"><a href="namespaceopenage_1_1pyinterface.xhtml#a591d9bd55fa1f9904547f3f2dcb3796d">openage::pyinterface::add_py_if_component</a></div><div class="ttdeci">void add_py_if_component(void *thisptr, std::function&lt; bool()&gt; checker)</div><div class="ttdef"><b>Definition:</b> <a href="setup_8cpp_source.xhtml#l00044">setup.cpp:44</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a2b05c1be5593865d85e1c2a50dcbe14e"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a2b05c1be5593865d85e1c2a50dcbe14e">openage::pyinterface::Func::bind_noexcept1</a></div><div class="ttdeci">void bind_noexcept1(ReturnType(*f)(BoundArgType0, ArgTypes ...), BoundArgType0 bound_arg0)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00218">functional.h:218</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a29df3bfe5f42965d194fd061e8c38d92"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a29df3bfe5f42965d194fd061e8c38d92">openage::pyinterface::Func::operator=</a></div><div class="ttdeci">Func&lt; ReturnType, ArgTypes ... &gt; &amp; operator=(F &amp;&amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00086">functional.h:86</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_py_if_func_xhtml_a1ac0419304a48f6c323317604c117388"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a1ac0419304a48f6c323317604c117388">openage::pyinterface::PyIfFunc::~PyIfFunc</a></div><div class="ttdeci">~PyIfFunc()</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00420">functional.h:420</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_py_if_func_xhtml_a151c2faee8d91169645204f1eb3a6a22"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml#a151c2faee8d91169645204f1eb3a6a22">openage::pyinterface::PyIfFunc::PyIfFunc</a></div><div class="ttdeci">PyIfFunc()</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00409">functional.h:409</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_py_if_func_xhtml"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_py_if_func.xhtml">openage::pyinterface::PyIfFunc</a></div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00407">functional.h:407</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a543c66d2cfec84be7ea1cc38b413e74b"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a543c66d2cfec84be7ea1cc38b413e74b">openage::pyinterface::Func::bind_noexcept</a></div><div class="ttdeci">void bind_noexcept(util::FunctionPtr&lt; ReturnType, BoundArgTypes ..., ArgTypes ... &gt; f, BoundArgTypes ...bound_args)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00194">functional.h:194</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a5e41d36722ffdb915f78dd3db9019489"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a5e41d36722ffdb915f78dd3db9019489">openage::pyinterface::Func::bind0</a></div><div class="ttdeci">void bind0(ReturnType(*f)(ArgTypes ...))</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00201">functional.h:201</a></div></div>
<div class="ttc" id="namespaceopenage_1_1pyinterface_xhtml_a3eda9726ffb3eeec9b423f300ec70c07"><div class="ttname"><a href="namespaceopenage_1_1pyinterface.xhtml#a3eda9726ffb3eeec9b423f300ec70c07">openage::pyinterface::destroy_py_if_component</a></div><div class="ttdeci">void destroy_py_if_component(void *thisptr)</div><div class="ttdef"><b>Definition:</b> <a href="setup_8cpp_source.xhtml#l00063">setup.cpp:63</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ac6219374623d05b075782ea1adb09c0c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">openage::util::symbol_name</a></div><div class="ttdeci">std::string symbol_name(const void *addr, bool require_exact_addr, bool no_pure_addrs)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00098">compiler.cpp:98</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a76b8e4db1b1c8b9077f251f9c2cb1c40"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a76b8e4db1b1c8b9077f251f9c2cb1c40">openage::pyinterface::Func::bind_noexcept2</a></div><div class="ttdeci">void bind_noexcept2(ReturnType(*f)(BoundArgType0, BoundArgType1, ArgTypes ...), BoundArgType0 bound_arg0, BoundArgType1 bound_arg1)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00230">functional.h:230</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_aa7c97b27e57c92dd099c84d52d19697d"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#aa7c97b27e57c92dd099c84d52d19697d">openage::pyinterface::Func::Func</a></div><div class="ttdeci">Func(std::reference_wrapper&lt; F &gt; f)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00071">functional.h:71</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a81cf56998f2138465da539c140b15443"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a81cf56998f2138465da539c140b15443">openage::pyinterface::Func::Func</a></div><div class="ttdeci">Func(const std::function&lt; ReturnType(ArgTypes ...)&gt; &amp;f)</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00076">functional.h:76</a></div></div>
<div class="ttc" id="namespaceopenage_1_1pyinterface_xhtml_a89529648faa2ef530fefcc90f1c1ab70"><div class="ttname"><a href="namespaceopenage_1_1pyinterface.xhtml#a89529648faa2ef530fefcc90f1c1ab70">openage::pyinterface::translate_exc_py_to_cpp</a></div><div class="ttdeci">void translate_exc_py_to_cpp()</div><div class="ttdef"><b>Definition:</b> <a href="exctranslate_8cpp_source.xhtml#l00110">exctranslate.cpp:110</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_function_ptr_xhtml_ab5cdb320863a46abc561330527a01e3d"><div class="ttname"><a href="classopenage_1_1util_1_1_function_ptr.xhtml#ab5cdb320863a46abc561330527a01e3d">openage::util::FunctionPtr::ptr</a></div><div class="ttdeci">ReturnType(* ptr)(ArgTypes ...)</div><div class="ttdef"><b>Definition:</b> <a href="language_8h_source.xhtml#l00028">language.h:28</a></div></div>
<div class="ttc" id="classopenage_1_1pyinterface_1_1_func_xhtml_a4d8d1e21e00ba9a5da7606354abb136a"><div class="ttname"><a href="classopenage_1_1pyinterface_1_1_func.xhtml#a4d8d1e21e00ba9a5da7606354abb136a">openage::pyinterface::Func::fptr</a></div><div class="ttdeci">std::function&lt; ReturnType(ArgTypes ...)&gt; fptr</div><div class="ttdef"><b>Definition:</b> <a href="functional_8h_source.xhtml#l00248">functional.h:248</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_1079b96b1d02d2a41f45efcea4bd852f.xhtml">pyinterface</a></li><li class="navelem"><a class="el" href="functional_8h.xhtml">functional.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
