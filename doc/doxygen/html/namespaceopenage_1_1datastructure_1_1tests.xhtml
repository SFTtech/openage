<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::datastructure::tests Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1datastructure_1_1tests.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">openage::datastructure::tests Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a57b696ae13dfb3c80d6c8cc7224b7c51"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">pairing_heap_0</a> ()</td></tr>
<tr class="separator:a57b696ae13dfb3c80d6c8cc7224b7c51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af82ba08f4a466babf0ca5ca833b91fa9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">pairing_heap_1</a> ()</td></tr>
<tr class="separator:af82ba08f4a466babf0ca5ca833b91fa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fbf658dd2eeeb34fb83295dd631e280"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">pairing_heap_2</a> ()</td></tr>
<tr class="separator:a4fbf658dd2eeeb34fb83295dd631e280"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3ac08d1b58fe615f03e6332d84011af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">pairing_heap_3</a> ()</td></tr>
<tr class="separator:ae3ac08d1b58fe615f03e6332d84011af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68c5daac0260fc457d5916be54f20a82"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a68c5daac0260fc457d5916be54f20a82">pairing_heap</a> ()</td></tr>
<tr class="separator:a68c5daac0260fc457d5916be54f20a82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade00c39e05018597baff76d22dedff44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ade00c39e05018597baff76d22dedff44">constexpr_map</a> ()</td></tr>
<tr class="separator:ade00c39e05018597baff76d22dedff44"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ade00c39e05018597baff76d22dedff44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade00c39e05018597baff76d22dedff44">&#9670;&nbsp;</a></span>constexpr_map()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::datastructure::tests::constexpr_map </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="datastructure_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                     {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    static_assert(create_const_map&lt;int, int&gt;().size() == 0, <span class="stringliteral">&quot;wrong size&quot;</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(0, 42)).size() == 1,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                  <span class="stringliteral">&quot;wrong size&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(0, 42),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                             std::make_pair(13, 37)).size() == 2,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                  <span class="stringliteral">&quot;wrong size&quot;</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    static_assert(not create_const_map&lt;int, int&gt;().contains(9001),</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                  <span class="stringliteral">&quot;empty map doesn&#39;t contain anything&quot;</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 0),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                             std::make_pair(13, 37)).contains(42),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                  <span class="stringliteral">&quot;contained element missing&quot;</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 0),</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                             std::make_pair(13, 37)).contains(13),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                  <span class="stringliteral">&quot;contained element missing&quot;</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    static_assert(not create_const_map&lt;int, int&gt;(std::make_pair(42, 0),</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                 std::make_pair(13, 37)).contains(9001),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                  <span class="stringliteral">&quot;uncontained element seems to be contained.&quot;</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">#ifndef _MSC_VER // HACK: MSVC doesn&#39;t have full C++14 constexpr support</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 9001),</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                             std::make_pair(13, 37)).get(42) == 9001,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                  <span class="stringliteral">&quot;fetched wrong value&quot;</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 9001),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                             std::make_pair(13, 37)).get(13) == 37,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                  <span class="stringliteral">&quot;fetched wrong value&quot;</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    constexpr <span class="keyword">auto</span> cmap = create_const_map&lt;int, int&gt;(</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        std::make_pair(0, 0),</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        std::make_pair(13, 37),</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        std::make_pair(42, 9001)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    );</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    cmap.contains(0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    not cmap.contains(18) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(cmap.size(), 3);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(cmap.get(13), 37);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(cmap.get(42), 9001);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>, and <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>.</p>

</div>
</div>
<a id="a68c5daac0260fc457d5916be54f20a82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68c5daac0260fc457d5916be54f20a82">&#9670;&nbsp;</a></span>pairing_heap()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::datastructure::tests::pairing_heap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00145">145</a> of file <a class="el" href="datastructure_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">pairing_heap_0</a>();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">pairing_heap_1</a>();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">pairing_heap_2</a>();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">pairing_heap_3</a>();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_a57b696ae13dfb3c80d6c8cc7224b7c51"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">openage::datastructure::tests::pairing_heap_0</a></div><div class="ttdeci">void pairing_heap_0()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00018">tests.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_af82ba08f4a466babf0ca5ca833b91fa9"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">openage::datastructure::tests::pairing_heap_1</a></div><div class="ttdeci">void pairing_heap_1()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00065">tests.cpp:65</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_ae3ac08d1b58fe615f03e6332d84011af"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">openage::datastructure::tests::pairing_heap_3</a></div><div class="ttdeci">void pairing_heap_3()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00127">tests.cpp:127</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_a4fbf658dd2eeeb34fb83295dd631e280"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">openage::datastructure::tests::pairing_heap_2</a></div><div class="ttdeci">void pairing_heap_2()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00112">tests.cpp:112</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00018">pairing_heap_0()</a>, <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00065">pairing_heap_1()</a>, <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00112">pairing_heap_2()</a>, and <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00127">pairing_heap_3()</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_a68c5daac0260fc457d5916be54f20a82_cgraph.svg" width="571" height="248"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a57b696ae13dfb3c80d6c8cc7224b7c51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57b696ae13dfb3c80d6c8cc7224b7c51">&#9670;&nbsp;</a></span>pairing_heap_0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::datastructure::tests::pairing_heap_0 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="datastructure_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                      {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    PairingHeap&lt;int&gt; heap{};</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    (heap.size() == 0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    heap.push(0);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    heap.push(1);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    heap.push(2);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    heap.push(3);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    heap.push(4);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="comment">// state: 01234</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 5);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.top(), 0);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 0);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 1);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 2);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 3);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 1);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    heap.push(0);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    heap.push(10);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// state: 0 4 10</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 0);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 4);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 10);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 0);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    heap.push(5);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    heap.push(5);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    heap.push(0);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    heap.push(5);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    heap.push(5);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 0);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 0);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>, and <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>.</p>

<p class="reference">Referenced by <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00145">pairing_heap()</a>.</p>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_a57b696ae13dfb3c80d6c8cc7224b7c51_icgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af82ba08f4a466babf0ca5ca833b91fa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af82ba08f4a466babf0ca5ca833b91fa9">&#9670;&nbsp;</a></span>pairing_heap_1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::datastructure::tests::pairing_heap_1 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00065">65</a> of file <a class="el" href="datastructure_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                      {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    PairingHeap&lt;heap_elem&gt; heap{};</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    heap.push(heap_elem{1});</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">auto</span> node_u1 = heap.push(heap_elem{2});</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    heap.push(heap_elem{3});</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// 1 2 3</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    node_u1-&gt;data.data = 0;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    heap.decrease(node_u1);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// 0 1 3</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 0);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 1);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// 3</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    heap.push(heap_elem{4});</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    heap.push(heap_elem{0});</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    heap.push(heap_elem{2});</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    heap.push(heap_elem{5});</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    heap.push(heap_elem{1});</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    heap.push(heap_elem{6});</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">auto</span> node_u2 = heap.push(heap_elem{7});</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    heap.push(heap_elem{8});</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    heap.push(heap_elem{9});</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    heap.push(heap_elem{10});</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 0);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 1);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// now update the 7-node to 8</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    node_u2-&gt;data.data = 8;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    heap.update(node_u2);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// 2 3 4 5 6 8 8 9 10</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 2);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 3);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 4);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 5);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 6);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 8);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 8);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 9);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 10);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00217">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::push()</a>, and <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00145">pairing_heap()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_af82ba08f4a466babf0ca5ca833b91fa9_cgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_af82ba08f4a466babf0ca5ca833b91fa9_icgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4fbf658dd2eeeb34fb83295dd631e280"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fbf658dd2eeeb34fb83295dd631e280">&#9670;&nbsp;</a></span>pairing_heap_2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::datastructure::tests::pairing_heap_2 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="datastructure_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                      {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    PairingHeap&lt;heap_elem&gt; heap{};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    heap.push(heap_elem{1});</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">auto</span> node = heap.push(heap_elem{2});</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    heap.push(heap_elem{3});</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// state: 1 2 3, now remove 2</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    heap.unlink_node(node);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// state: 1 3</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 1);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 3);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00217">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::push()</a>, and <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00145">pairing_heap()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_a4fbf658dd2eeeb34fb83295dd631e280_cgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_a4fbf658dd2eeeb34fb83295dd631e280_icgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae3ac08d1b58fe615f03e6332d84011af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3ac08d1b58fe615f03e6332d84011af">&#9670;&nbsp;</a></span>pairing_heap_3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::datastructure::tests::pairing_heap_3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="datastructure_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                      {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    PairingHeap&lt;heap_elem&gt; heap{};</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    heap.push(heap_elem{0});</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    heap.push(heap_elem{1});</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    heap.push(heap_elem{2});</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    heap.push(heap_elem{3});</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    heap.push(heap_elem{4});</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    heap.push(heap_elem{5});</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    heap.pop(); <span class="comment">// trigger pairing</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    heap.clear();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 0);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00217">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::push()</a>, and <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="datastructure_2tests_8cpp_source.xhtml#l00145">pairing_heap()</a>.</p>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_ae3ac08d1b58fe615f03e6332d84011af_cgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1datastructure_1_1tests_ae3ac08d1b58fe615f03e6332d84011af_icgraph.svg" width="368" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1datastructure.xhtml">datastructure</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1datastructure_1_1tests.xhtml">tests</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
