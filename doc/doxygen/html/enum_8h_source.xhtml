<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/enum.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('enum_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">enum.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="enum_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="compiler_8h.xhtml">compiler.h</a>&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// pxd: from libcpp cimport bool</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span>util {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * C++&#39;s enum class has various deficits:</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *  - Wrapping it via Cython requires hacks.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> *  - enum objects can&#39;t have any associated data.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *  - they can&#39;t have member methods</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * In cases where those features are required, we recommend to use references</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * to non-copyable objects instead of enum values. Which is what this class provides.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> * This class provides is a simple base which</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> *  - forbids copying</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> *  - provides an equality operator which compares the memory addresses of the objects.</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> *  - contains a const char *name, for use in operator &lt;&lt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> *  - provides operator &lt;&lt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> *  - contains a numeric value, as enums do</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> *  - provides comparison operators which use the numeric value</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"> * In order to contain the const references to these objects,</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"> * and as a namespace for static objects which contain the values,</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"> * use the Enum class below.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * For a full usage example, see enum_test.{h, cpp}.</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * pxd:</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"> * cppclass EnumValue[DerivedType, NumericType]:</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment"> *     const char *name</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"> *     NumericType numeric</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DerivedType, <span class="keyword">typename</span> NumericType=<span class="keywordtype">int</span>&gt;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml">   47</a></span>&#160;<span class="keyword">class </span><a class="code" href="compiler_8h.xhtml#aea581b919984cda327632efe3d11f8b3">OAAPI</a> <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a> {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="comment">// implicit constructor: EnumValue(const char *value_name, int numeric_value)</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// enum values cannot be copied</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a> &amp;other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a> &amp;operator =(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a> &amp;other) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// an explicit deletion of the implicitly defined copy constructor and assignment operator</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// will implicitly delete the implicitly defined move constructor and assignment operator.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="comment">// yay for C++</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// enum values are equal if the pointers are equal.</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#a0796e1f8a1fa21cc20f1ad2c7da69415">   60</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="namespaceopenage_1_1input.xhtml#a1d09cb9758cee29027f1ddfea81cf1ac">operator ==</a>(<span class="keyword">const</span> DerivedType &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">return</span> (<span class="keyword">this</span> == &amp;other);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#ad3945ffef23580f7a64757b886c2e2ce">   64</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml#ad3945ffef23580f7a64757b886c2e2ce">operator !=</a>(<span class="keyword">const</span> DerivedType &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#a9bb6a21bf004e58196e4bda16b7e849a">   68</a></span>&#160;    constexpr <span class="keywordtype">bool</span> operator &lt;=(<span class="keyword">const</span> DerivedType &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> this-&gt;numeric &lt;= other.numeric;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#adbb6e103305a98ca4ffd7ede8f3a527c">   72</a></span>&#160;    constexpr <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> DerivedType &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> this-&gt;numeric &lt; other.numeric;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#afcd1b51f6b424f2752c26122f426d49b">   76</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml#afcd1b51f6b424f2752c26122f426d49b">operator &gt;=</a>(<span class="keyword">const</span> DerivedType &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> this-&gt;numeric &gt;= other.numeric;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#ab3e1f8bcc46314730c71ae5af29dd306">   80</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml#ab3e1f8bcc46314730c71ae5af29dd306">operator &gt;</a>(<span class="keyword">const</span> DerivedType &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">return</span> this-&gt;numeric &gt; other.numeric;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#a87eacf2dd2baa94e8796f3d805c16150">   84</a></span>&#160;    <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="namespaceopenage_1_1util.xhtml#abe7e29a3d1ac620fb9d0eb6830be84cf">operator &lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> DerivedType &amp;arg) {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        os &lt;&lt; <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">util::demangle</a>(<span class="keyword">typeid</span>(DerivedType).name()) &lt;&lt; <span class="stringliteral">&quot;::&quot;</span> &lt;&lt; arg.name;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#ad6ba970c60f26a001d569a2eb2d34242">   89</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml#ad6ba970c60f26a001d569a2eb2d34242">name</a>;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum_value.xhtml#aac09469400ad13bdfba4926dd02d3164">   90</a></span>&#160;    NumericType <a class="code" href="classopenage_1_1util_1_1_enum_value.xhtml#aac09469400ad13bdfba4926dd02d3164">numeric</a>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;};</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> DerivedType&gt;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml">  126</a></span>&#160;<span class="keyword">class </span><a class="code" href="compiler_8h.xhtml#aea581b919984cda327632efe3d11f8b3">OAAPI</a> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">Enum</a> {</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#aaeca436c1f91cf52fabeb93251e2df79">  127</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> = <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">Enum&lt;DerivedType&gt;</a>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="comment">// disallow the empty constructor to ensure that value is always a valid pointer.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">Enum</a>() = <span class="keyword">delete</span>;</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a67a56834bdbd7aef19486a14b61cdba8">  132</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a67a56834bdbd7aef19486a14b61cdba8">Enum</a>(<span class="keyword">const</span> DerivedType &amp;value) : value{&amp;value} {}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a06a4d8b673fa27f5d873930171d10d1a">  134</a></span>&#160;    constexpr <span class="keyword">operator</span> <span class="keyword">const</span> DerivedType &amp;() <span class="keyword">const</span> {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    }</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#abc185aa7b915efdfb5bcf8edec8b98e1">  138</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">Enum</a> &amp;operator =(<span class="keyword">const</span> DerivedType &amp;value) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        this-&gt;value = &amp;value;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#abfa660f3b5d7f6668b2a40f5f5b95ba3">  142</a></span>&#160;    constexpr <span class="keyword">const</span> DerivedType *<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#abfa660f3b5d7f6668b2a40f5f5b95ba3">operator -&gt;</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">return</span> this-&gt;value;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a0613b8677f79eca71fb4787585829214">  146</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="namespaceopenage_1_1input.xhtml#a1d09cb9758cee29027f1ddfea81cf1ac">operator ==</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value == *other.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#aedce56a0c2cf6f835fe371537e4150d8">  150</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml#aedce56a0c2cf6f835fe371537e4150d8">operator !=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value != *other.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a6343dd8d8acecbc4f73720bac4878a04">  154</a></span>&#160;    constexpr <span class="keywordtype">bool</span> operator &lt;=(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value &lt;= *other.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#acb44dc8456c6a8c7fb1169a7a5f7c270">  158</a></span>&#160;    constexpr <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value &lt; *other.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a647ce80feed655c478a29a2b5fb26db7">  162</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a647ce80feed655c478a29a2b5fb26db7">operator &gt;=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value &gt;= *other.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#ad2bf0cdcee9b179d62b542e9f8811e1a">  166</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml#ad2bf0cdcee9b179d62b542e9f8811e1a">operator &gt;</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value &gt; *other.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#aedee70eaf15269cf90225d2e3628e31c">  170</a></span>&#160;    constexpr <span class="keyword">const</span> DerivedType &amp;<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#aedee70eaf15269cf90225d2e3628e31c">get</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">return</span> *this-&gt;value;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a97288799574469e31fde4a44c30435d2">  174</a></span>&#160;    <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="namespaceopenage_1_1util.xhtml#abe7e29a3d1ac620fb9d0eb6830be84cf">operator &lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_enum.xhtml">this_type</a> &amp;arg) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        os &lt;&lt; *arg.<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">  180</a></span>&#160;    <span class="keyword">const</span> DerivedType *<a class="code" href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">value</a>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;};</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}} <span class="comment">// openage::util</span></div><div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_abfa660f3b5d7f6668b2a40f5f5b95ba3"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#abfa660f3b5d7f6668b2a40f5f5b95ba3">openage::util::Enum::operator -&gt;</a></div><div class="ttdeci">constexpr const DerivedType * operator -&gt;() const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00142">enum.h:142</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abe7e29a3d1ac620fb9d0eb6830be84cf"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abe7e29a3d1ac620fb9d0eb6830be84cf">openage::util::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;stream, const File &amp;file)</div><div class="ttdef"><b>Definition:</b> <a href="file_8cpp_source.xhtml#l00122">file.cpp:122</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_aedee70eaf15269cf90225d2e3628e31c"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#aedee70eaf15269cf90225d2e3628e31c">openage::util::Enum::get</a></div><div class="ttdeci">constexpr const DerivedType &amp; get() const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00170">enum.h:170</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_aea581b919984cda327632efe3d11f8b3"><div class="ttname"><a href="compiler_8h.xhtml#aea581b919984cda327632efe3d11f8b3">OAAPI</a></div><div class="ttdeci">#define OAAPI</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00026">compiler.h:26</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_a8a96b1d10893e34cdb9583ef54a9c556"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#a8a96b1d10893e34cdb9583ef54a9c556">openage::util::Enum::value</a></div><div class="ttdeci">const DerivedType * value</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00180">enum.h:180</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_ad2bf0cdcee9b179d62b542e9f8811e1a"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#ad2bf0cdcee9b179d62b542e9f8811e1a">openage::util::Enum::operator &gt;</a></div><div class="ttdeci">constexpr bool operator &gt;(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00166">enum.h:166</a></div></div>
<div class="ttc" id="compiler_8h_xhtml"><div class="ttname"><a href="compiler_8h.xhtml">compiler.h</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_a647ce80feed655c478a29a2b5fb26db7"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#a647ce80feed655c478a29a2b5fb26db7">openage::util::Enum::operator &gt;=</a></div><div class="ttdeci">constexpr bool operator &gt;=(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00162">enum.h:162</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_value_xhtml_ab3e1f8bcc46314730c71ae5af29dd306"><div class="ttname"><a href="classopenage_1_1util_1_1_enum_value.xhtml#ab3e1f8bcc46314730c71ae5af29dd306">openage::util::EnumValue::operator &gt;</a></div><div class="ttdeci">constexpr bool operator &gt;(const DerivedType &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00080">enum.h:80</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_aedce56a0c2cf6f835fe371537e4150d8"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#aedce56a0c2cf6f835fe371537e4150d8">openage::util::Enum::operator !=</a></div><div class="ttdeci">constexpr bool operator !=(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00150">enum.h:150</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_value_xhtml_ad6ba970c60f26a001d569a2eb2d34242"><div class="ttname"><a href="classopenage_1_1util_1_1_enum_value.xhtml#ad6ba970c60f26a001d569a2eb2d34242">openage::util::EnumValue::name</a></div><div class="ttdeci">const char * name</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00089">enum.h:89</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_value_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_enum_value.xhtml">openage::util::EnumValue</a></div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00047">enum.h:47</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_value_xhtml_ad3945ffef23580f7a64757b886c2e2ce"><div class="ttname"><a href="classopenage_1_1util_1_1_enum_value.xhtml#ad3945ffef23580f7a64757b886c2e2ce">openage::util::EnumValue::operator !=</a></div><div class="ttdeci">constexpr bool operator !=(const DerivedType &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00064">enum.h:64</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml_a67a56834bdbd7aef19486a14b61cdba8"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml#a67a56834bdbd7aef19486a14b61cdba8">openage::util::Enum::Enum</a></div><div class="ttdeci">constexpr Enum(const DerivedType &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00132">enum.h:132</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aebed129b2a0773520cdd8d40b0f70318"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">openage::util::demangle</a></div><div class="ttdeci">std::string demangle(const char *symbol)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00025">compiler.cpp:25</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_enum.xhtml">openage::util::Enum</a></div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00126">enum.h:126</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_value_xhtml_aac09469400ad13bdfba4926dd02d3164"><div class="ttname"><a href="classopenage_1_1util_1_1_enum_value.xhtml#aac09469400ad13bdfba4926dd02d3164">openage::util::EnumValue::numeric</a></div><div class="ttdeci">NumericType numeric</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00090">enum.h:90</a></div></div>
<div class="ttc" id="namespaceopenage_1_1input_xhtml_a1d09cb9758cee29027f1ddfea81cf1ac"><div class="ttname"><a href="namespaceopenage_1_1input.xhtml#a1d09cb9758cee29027f1ddfea81cf1ac">openage::input::operator==</a></div><div class="ttdeci">bool operator==(ClassCode a, ClassCode b)</div><div class="ttdef"><b>Definition:</b> <a href="input_2event_8cpp_source.xhtml#l00041">event.cpp:41</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_enum_value_xhtml_afcd1b51f6b424f2752c26122f426d49b"><div class="ttname"><a href="classopenage_1_1util_1_1_enum_value.xhtml#afcd1b51f6b424f2752c26122f426d49b">openage::util::EnumValue::operator &gt;=</a></div><div class="ttdeci">constexpr bool operator &gt;=(const DerivedType &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="enum_8h_source.xhtml#l00076">enum.h:76</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="enum_8h.xhtml">enum.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
