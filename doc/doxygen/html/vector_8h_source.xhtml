<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: libopenage/util/vector.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('vector_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">vector.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="vector_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;../error/error.h&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;../log/log.h&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1util.xhtml">openage::util</a> {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> N, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml">   24</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a> : <span class="keyword">public</span> std::array&lt;T, N&gt; {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    static_assert(N &gt; 0, <span class="stringliteral">&quot;0-dimensional vector not allowed&quot;</span>);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a894800d1b4e24bd90d5b763862706e02">   28</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;N, T&gt;</a>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#ab843994301eeadb19467f7cbb131fc0b">   33</a></span>&#160;    <span class="keyword">static</span> constexpr T <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#ab843994301eeadb19467f7cbb131fc0b">default_eps</a> = 1e-4;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a0b8ac439682bcb1b54b2fbb1968e0850">   38</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a0b8ac439682bcb1b54b2fbb1968e0850">Vector</a>() {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            (*this)[i] = 0;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a70020e31b16b6c886cd7d5956c961141">~Vector</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... Ts&gt;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#aea1fe198f712888e82582be0bb73e450">   50</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#aea1fe198f712888e82582be0bb73e450">Vector</a>(Ts ... args)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        :</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="namespacestd.xhtml">std</a>::array&lt;T, N&gt;{static_cast&lt;T&gt;(args)...} {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        static_assert(<span class="keyword">sizeof</span>...(args) == N, <span class="stringliteral">&quot;not all values supplied.&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#adb9d43a588f0d7044f201a2dff2db844">   60</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#adb9d43a588f0d7044f201a2dff2db844">equals</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other, T eps=<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#ab843994301eeadb19467f7cbb131fc0b">default_eps</a>) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            T diff = <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>((*<span class="keyword">this</span>)[i] - other[i]);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">if</span> (diff &gt;= eps) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#afbfaf8fb98199182caa50e1a45bab12c">   73</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#afbfaf8fb98199182caa50e1a45bab12c">operator +=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other) {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            (*this)[i] += other[i];</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a3f1ab0e66323a2d08bd8c320425af1a8">   83</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a3f1ab0e66323a2d08bd8c320425af1a8">operator +</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> res(*<span class="keyword">this</span>);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        res += other;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#af9fdfbcf69edc87d219f35b239d4e77c">   92</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#af9fdfbcf69edc87d219f35b239d4e77c">operator -=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            (*this)[i] -= other[i];</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a0d7a217ad63a77da59f2ddcc7f7b87e2">  102</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a0d7a217ad63a77da59f2ddcc7f7b87e2">operator -</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> res(*<span class="keyword">this</span>);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        res -= other;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a0b9910495f73ffb032e4b12be3b72d34">  111</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a0b9910495f73ffb032e4b12be3b72d34">operator *=</a>(T a) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            (*this)[i] *= a;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#af730cbb108d9e8966f4524efab3f0fe3">  121</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#af730cbb108d9e8966f4524efab3f0fe3">operator *</a>(T a)<span class="keyword"> const </span>{</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> res(*<span class="keyword">this</span>);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        res *= a;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a2d28e8ece216fef011431a1ababa4bfc">  130</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a2d28e8ece216fef011431a1ababa4bfc">operator /=</a>(T a) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            (*this)[i] /= a;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#af3c9dfb3fd444c92cd4af8384809241d">  140</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#af3c9dfb3fd444c92cd4af8384809241d">operator /</a>(T a)<span class="keyword"> const </span>{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> res(*<span class="keyword">this</span>);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        res /= a;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#ab534732ef33d7e047d612bdf8bc98322">  149</a></span>&#160;    T <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#ab534732ef33d7e047d612bdf8bc98322">dot</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        T res = 0;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            res += (*this)[i] * other[i];</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a5b3b46a13e28d59eaefacf1549269f9b">  160</a></span>&#160;    T <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a5b3b46a13e28d59eaefacf1549269f9b">norm</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a>(this-&gt;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#ab534732ef33d7e047d612bdf8bc98322">dot</a>(*<span class="keyword">this</span>));</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    }</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#aae6e40b885d6cdf296bd2568bd2b5e49">  167</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#aae6e40b885d6cdf296bd2568bd2b5e49">normalize</a>() {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        *<span class="keyword">this</span> /= this-&gt;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a5b3b46a13e28d59eaefacf1549269f9b">norm</a>();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U=this_type&gt;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">typename</span> std::enable_if&lt;N==3, U&gt;::type</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#ab33cee057269a707f1f8a5f58944a5a4">  177</a></span>&#160;    <span class="comment">/*Vector&lt;N&gt;*/</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#ab33cee057269a707f1f8a5f58944a5a4">cross_product</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a894800d1b4e24bd90d5b763862706e02">this_type</a>(</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            ((*<span class="keyword">this</span>)[1] * other[2] - (*<span class="keyword">this</span>)[2] * other[1]),</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            ((*<span class="keyword">this</span>)[2] * other[0] - (*<span class="keyword">this</span>)[0] * other[2]),</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            ((*<span class="keyword">this</span>)[0] * other[1] - (*<span class="keyword">this</span>)[1] * other[0])</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        );</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#ac824b8d2ccb92af2a4fa2946349e9aee">  188</a></span>&#160;    <span class="keyword">friend</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml#ac824b8d2ccb92af2a4fa2946349e9aee">operator *</a>(T a, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;v) {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">return</span> v * a;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_vector.xhtml#a04d7eeccc9f90a986e8297807959e864">  195</a></span>&#160;    <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="classopenage_1_1util_1_1_vector.xhtml#a04d7eeccc9f90a986e8297807959e864">operator &lt;&lt;</a>(std::ostream &amp;o, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">this_type</a> &amp;v) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        o &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N-1; i++) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            o &lt;&lt; v[i] &lt;&lt; <span class="stringliteral">&quot;, &quot;</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        o &lt;&lt; v[N-1] &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">return</span> o;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;};</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="keywordtype">float</span>&gt;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a3b7551617f7e81afd786778a18a6e115">  207</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector2t</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;2, T&gt;</a>;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="keywordtype">float</span>&gt;</div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a2ae1eb4098bce6a746a8b5474bf76d12">  210</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector3t</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;3, T&gt;</a>;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="keywordtype">float</span>&gt;</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#ab85260365ee607e213b044335a3c4ac2">  213</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector4t</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;4, T&gt;</a>;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> N&gt;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a412362dd7eb21295a62e2c22031ac77c">  216</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vectorf</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;N, float&gt;</a>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> N&gt;</div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a333446966cecccc963bdaa41f5395339">  219</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vectord</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;N, double&gt;</a>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a285db29af032ad3b2a79f810faaf65d3">  221</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector2f</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;2, float&gt;</a>;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">  222</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector3f</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;3, float&gt;</a>;</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#af3c02e2c02d3b68c87d58b867e609bbf">  223</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector4f</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;4, float&gt;</a>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">  225</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector2d</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;2, double&gt;</a>;</div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aaa92edd0399f568ff984de550f094c9d">  226</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector3d</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;3, double&gt;</a>;</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#af8c841be325b73ea41a31e63bc2013dd">  227</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector4d</a> = <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;4, double&gt;</a>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;} <span class="comment">// openage::util</span></div><div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_af730cbb108d9e8966f4524efab3f0fe3"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#af730cbb108d9e8966f4524efab3f0fe3">openage::util::Vector::operator *</a></div><div class="ttdeci">this_type operator *(T a) const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00121">vector.h:121</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_ac824b8d2ccb92af2a4fa2946349e9aee"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#ac824b8d2ccb92af2a4fa2946349e9aee">openage::util::Vector::operator *</a></div><div class="ttdeci">friend this_type operator *(T a, const this_type &amp;v)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00188">vector.h:188</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a894800d1b4e24bd90d5b763862706e02"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a894800d1b4e24bd90d5b763862706e02">openage::util::Vector::this_type</a></div><div class="ttdeci">Vector&lt; N, T &gt; this_type</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00028">vector.h:28</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a0b9910495f73ffb032e4b12be3b72d34"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a0b9910495f73ffb032e4b12be3b72d34">openage::util::Vector::operator *=</a></div><div class="ttdeci">this_type &amp; operator *=(T a)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00111">vector.h:111</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml">openage::util</a></div><div class="ttdef"><b>Definition:</b> <a href="draw_8h_source.xhtml#l00009">draw.h:9</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_af3c9dfb3fd444c92cd4af8384809241d"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#af3c9dfb3fd444c92cd4af8384809241d">openage::util::Vector::operator/</a></div><div class="ttdeci">this_type operator/(T a) const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00140">vector.h:140</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a6af851cc1249a970adde4dc422ff824a"><div class="ttname"><a href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; abs(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00491">fixed_point.h:491</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a5b3b46a13e28d59eaefacf1549269f9b"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a5b3b46a13e28d59eaefacf1549269f9b">openage::util::Vector::norm</a></div><div class="ttdeci">T norm() const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00160">vector.h:160</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_ab33cee057269a707f1f8a5f58944a5a4"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#ab33cee057269a707f1f8a5f58944a5a4">openage::util::Vector::cross_product</a></div><div class="ttdeci">std::enable_if&lt; N==3, U &gt;::type cross_product(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00177">vector.h:177</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_ab843994301eeadb19467f7cbb131fc0b"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#ab843994301eeadb19467f7cbb131fc0b">openage::util::Vector::default_eps</a></div><div class="ttdeci">static constexpr T default_eps</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00033">vector.h:33</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="hash__functions_8h_source.xhtml#l00009">hash_functions.h:9</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_afbfaf8fb98199182caa50e1a45bab12c"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#afbfaf8fb98199182caa50e1a45bab12c">openage::util::Vector::operator+=</a></div><div class="ttdeci">this_type &amp; operator+=(const this_type &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00073">vector.h:73</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml">openage::util::Vector</a></div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00024">vector.h:24</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_ab534732ef33d7e047d612bdf8bc98322"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#ab534732ef33d7e047d612bdf8bc98322">openage::util::Vector::dot</a></div><div class="ttdeci">T dot(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00149">vector.h:149</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a3f1ab0e66323a2d08bd8c320425af1a8"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a3f1ab0e66323a2d08bd8c320425af1a8">openage::util::Vector::operator+</a></div><div class="ttdeci">this_type operator+(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00083">vector.h:83</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a0d7a217ad63a77da59f2ddcc7f7b87e2"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a0d7a217ad63a77da59f2ddcc7f7b87e2">openage::util::Vector::operator -</a></div><div class="ttdeci">this_type operator -(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00102">vector.h:102</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a2d28e8ece216fef011431a1ababa4bfc"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a2d28e8ece216fef011431a1ababa4bfc">openage::util::Vector::operator/=</a></div><div class="ttdeci">this_type &amp; operator/=(T a)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00130">vector.h:130</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_aea1fe198f712888e82582be0bb73e450"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#aea1fe198f712888e82582be0bb73e450">openage::util::Vector::Vector</a></div><div class="ttdeci">Vector(Ts ... args)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00050">vector.h:50</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a0b8ac439682bcb1b54b2fbb1968e0850"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a0b8ac439682bcb1b54b2fbb1968e0850">openage::util::Vector::Vector</a></div><div class="ttdeci">Vector()</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00038">vector.h:38</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a70020e31b16b6c886cd7d5956c961141"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a70020e31b16b6c886cd7d5956c961141">openage::util::Vector::~Vector</a></div><div class="ttdeci">~Vector()=default</div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_adb9d43a588f0d7044f201a2dff2db844"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#adb9d43a588f0d7044f201a2dff2db844">openage::util::Vector::equals</a></div><div class="ttdeci">bool equals(const this_type &amp;other, T eps=default_eps)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00060">vector.h:60</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_aae6e40b885d6cdf296bd2568bd2b5e49"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#aae6e40b885d6cdf296bd2568bd2b5e49">openage::util::Vector::normalize</a></div><div class="ttdeci">this_type &amp; normalize()</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00167">vector.h:167</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_a04d7eeccc9f90a986e8297807959e864"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#a04d7eeccc9f90a986e8297807959e864">openage::util::Vector::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;o, const this_type &amp;v)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00195">vector.h:195</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml_af9fdfbcf69edc87d219f35b239d4e77c"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml#af9fdfbcf69edc87d219f35b239d4e77c">openage::util::Vector::operator -=</a></div><div class="ttdeci">this_type &amp; operator -=(const this_type &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00092">vector.h:92</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a0fc492a11cf74e80f976b24bea2a2eb2"><div class="ttname"><a href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a></div><div class="ttdeci">constexpr double sqrt(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00470">fixed_point.h:470</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="vector_8h.xhtml">vector.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
