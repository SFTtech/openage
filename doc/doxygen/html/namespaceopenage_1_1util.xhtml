<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::util Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1util.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">openage::util Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1bytequeue"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1bytequeue.xhtml">bytequeue</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1compress"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1compress.xhtml">compress</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1constexpr__"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1constexpr__.xhtml">constexpr_</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1context"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1context.xhtml">context</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1decorators"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1decorators.xhtml">decorators</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1filelike"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1filelike.xhtml">filelike</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1files"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1files.xhtml">files</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1fslike"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1fslike.xhtml">fslike</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1fsprinting"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1fsprinting.xhtml">fsprinting</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1iterators"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1iterators.xhtml">iterators</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1math"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1math.xhtml">math</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1profiler"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1profiler.xhtml">profiler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1strings"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1strings.xhtml">strings</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1struct"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1struct.xhtml">struct</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1system"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1system.xhtml">system</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1tests"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml">tests</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1threading"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1threading.xhtml">threading</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_cachable_o_s_stream.xhtml">CachableOSStream</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1col.xhtml">col</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1color.xhtml">color</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1component__time__data.xhtml">component_time_data</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_const_init_vector.xhtml">ConstInitVector</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1csv__subdata.xhtml">csv_subdata</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_c_s_v_collection.xhtml">CSVCollection</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_enum.xhtml">Enum</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_external_o_string_stream.xhtml">ExternalOStringStream</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_external_profiler.xhtml">ExternalProfiler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_external_string_buf.xhtml">ExternalStringBuf</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_f_d.xhtml">FD</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_file.xhtml">File</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1_float_fixed.xhtml">FloatFixed</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_formatter.xhtml">Formatter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_frame_counter.xhtml">FrameCounter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_f_string.xhtml">FString</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_function_ptr.xhtml">FunctionPtr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1less.xhtml">less</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_on_de_init.xhtml">OnDeInit</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_on_init.xhtml">OnInit</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_profiler.xhtml">Profiler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">SharedPtrLess</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_siphash.xhtml">Siphash</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_string_formatter.xhtml">StringFormatter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_timer.xhtml">Timer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1utf8__decoder.xhtml">utf8_decoder</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_variable.xhtml">Variable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_variable_base.xhtml">VariableBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aa62f335908f8f5e68345cb3386ab94c6"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:aa62f335908f8f5e68345cb3386ab94c6"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa62f335908f8f5e68345cb3386ab94c6">Matrix2t</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 2, 2, T &gt;</td></tr>
<tr class="separator:aa62f335908f8f5e68345cb3386ab94c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a748106aeb16275c1ebf6f0f9276381cd"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:a748106aeb16275c1ebf6f0f9276381cd"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a748106aeb16275c1ebf6f0f9276381cd">Matrix3t</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 3, 3, T &gt;</td></tr>
<tr class="separator:a748106aeb16275c1ebf6f0f9276381cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5976ba79c39027e28f3f02458e93e38"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:ae5976ba79c39027e28f3f02458e93e38"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ae5976ba79c39027e28f3f02458e93e38">Matrix4t</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 4, 4, T &gt;</td></tr>
<tr class="separator:ae5976ba79c39027e28f3f02458e93e38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af077ef0b2ea660c4044917c60c4f0385"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N&gt; </td></tr>
<tr class="memitem:af077ef0b2ea660c4044917c60c4f0385"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af077ef0b2ea660c4044917c60c4f0385">Matrixf</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, float &gt;</td></tr>
<tr class="separator:af077ef0b2ea660c4044917c60c4f0385"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21feb2f799e75fd645e0d663ec4712f9"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N&gt; </td></tr>
<tr class="memitem:a21feb2f799e75fd645e0d663ec4712f9"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a21feb2f799e75fd645e0d663ec4712f9">Matrixd</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, double &gt;</td></tr>
<tr class="separator:a21feb2f799e75fd645e0d663ec4712f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00694c43ac6582c643b2591d420ce472"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 2, 2, float &gt;</td></tr>
<tr class="separator:a00694c43ac6582c643b2591d420ce472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa417153128f83c6b7ee0b42efc418aa"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">Matrix3f</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 3, 3, float &gt;</td></tr>
<tr class="separator:aaa417153128f83c6b7ee0b42efc418aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd42b418dc20fcb64677b2f75ecd97b8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">Matrix4f</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 4, 4, float &gt;</td></tr>
<tr class="separator:afd42b418dc20fcb64677b2f75ecd97b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94d988fc19451e9042116f14432ec1b6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a94d988fc19451e9042116f14432ec1b6">Matrix2d</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 2, 2, double &gt;</td></tr>
<tr class="separator:a94d988fc19451e9042116f14432ec1b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157c43b340256c0f1124074fae7aa807"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a157c43b340256c0f1124074fae7aa807">Matrix3d</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 3, 3, double &gt;</td></tr>
<tr class="separator:a157c43b340256c0f1124074fae7aa807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06158fd9e1e05c74de527f554486f2b6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a06158fd9e1e05c74de527f554486f2b6">Matrix4d</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 4, 4, double &gt;</td></tr>
<tr class="separator:a06158fd9e1e05c74de527f554486f2b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0edd3e6d8ddf01c639814c3f2cb83fc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> = <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt; float &gt;</td></tr>
<tr class="separator:ac0edd3e6d8ddf01c639814c3f2cb83fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6fb313e7100659b50538dadeb6fb0f3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ad6fb313e7100659b50538dadeb6fb0f3">Quaterniond</a> = <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt; double &gt;</td></tr>
<tr class="separator:ad6fb313e7100659b50538dadeb6fb0f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d73b80bcbf615e6330df0017584f673"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3d73b80bcbf615e6330df0017584f673">codepoint_t</a> = int32_t</td></tr>
<tr class="separator:a3d73b80bcbf615e6330df0017584f673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b7551617f7e81afd786778a18a6e115"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:a3b7551617f7e81afd786778a18a6e115"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3b7551617f7e81afd786778a18a6e115">Vector2t</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 2, T &gt;</td></tr>
<tr class="separator:a3b7551617f7e81afd786778a18a6e115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ae1eb4098bce6a746a8b5474bf76d12"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:a2ae1eb4098bce6a746a8b5474bf76d12"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a2ae1eb4098bce6a746a8b5474bf76d12">Vector3t</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 3, T &gt;</td></tr>
<tr class="separator:a2ae1eb4098bce6a746a8b5474bf76d12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab85260365ee607e213b044335a3c4ac2"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:ab85260365ee607e213b044335a3c4ac2"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ab85260365ee607e213b044335a3c4ac2">Vector4t</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 4, T &gt;</td></tr>
<tr class="separator:ab85260365ee607e213b044335a3c4ac2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a412362dd7eb21295a62e2c22031ac77c"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a412362dd7eb21295a62e2c22031ac77c"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a412362dd7eb21295a62e2c22031ac77c">Vectorf</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; N, float &gt;</td></tr>
<tr class="separator:a412362dd7eb21295a62e2c22031ac77c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a333446966cecccc963bdaa41f5395339"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a333446966cecccc963bdaa41f5395339"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a333446966cecccc963bdaa41f5395339">Vectord</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; N, double &gt;</td></tr>
<tr class="separator:a333446966cecccc963bdaa41f5395339"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a285db29af032ad3b2a79f810faaf65d3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a285db29af032ad3b2a79f810faaf65d3">Vector2f</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 2, float &gt;</td></tr>
<tr class="separator:a285db29af032ad3b2a79f810faaf65d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7bb49fe673b7a4d72fb6fb91aba44c8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 3, float &gt;</td></tr>
<tr class="separator:ab7bb49fe673b7a4d72fb6fb91aba44c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3c02e2c02d3b68c87d58b867e609bbf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af3c02e2c02d3b68c87d58b867e609bbf">Vector4f</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 4, float &gt;</td></tr>
<tr class="separator:af3c02e2c02d3b68c87d58b867e609bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5759baf587738b4365920f5b944b0088"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">Vector2d</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 2, double &gt;</td></tr>
<tr class="separator:a5759baf587738b4365920f5b944b0088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa92edd0399f568ff984de550f094c9d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aaa92edd0399f568ff984de550f094c9d">Vector3d</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 3, double &gt;</td></tr>
<tr class="separator:aaa92edd0399f568ff984de550f094c9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8c841be325b73ea41a31e63bc2013dd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af8c841be325b73ea41a31e63bc2013dd">Vector4d</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 4, double &gt;</td></tr>
<tr class="separator:af8c841be325b73ea41a31e63bc2013dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ac6f34c002692bc844cd70de03e10bc5d"><td class="memTemplParams" colspan="2">template&lt;class Container , class Function &gt; </td></tr>
<tr class="memitem:ac6f34c002692bc844cd70de03e10bc5d"><td class="memTemplItemLeft" align="right" valign="top">Function&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac6f34c002692bc844cd70de03e10bc5d">for_each</a> (Container &amp;&amp;container, Function &amp;&amp;func)</td></tr>
<tr class="separator:ac6f34c002692bc844cd70de03e10bc5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f21bbbe0a2bfda459aa086ee71f1abd"><td class="memTemplParams" colspan="2">template&lt;class Container , class Function &gt; </td></tr>
<tr class="memitem:a1f21bbbe0a2bfda459aa086ee71f1abd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a1f21bbbe0a2bfda459aa086ee71f1abd">remove_from</a> (Container &amp;container, Function &amp;&amp;func)</td></tr>
<tr class="separator:a1f21bbbe0a2bfda459aa086ee71f1abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebed129b2a0773520cdd8d40b0f70318"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a> (const char *symbol)</td></tr>
<tr class="separator:aebed129b2a0773520cdd8d40b0f70318"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe26c67b0463cb53c33b0659ebb89370"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a> (const void *addr)</td></tr>
<tr class="separator:abe26c67b0463cb53c33b0659ebb89370"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6219374623d05b075782ea1adb09c0c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">symbol_name</a> (const void *addr, bool require_exact_addr, bool no_pure_addrs)</td></tr>
<tr class="separator:ac6219374623d05b075782ea1adb09c0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae411a50a0e24d32ab564979b2df6ed24"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ae411a50a0e24d32ab564979b2df6ed24">is_symbol</a> (const void *addr)</td></tr>
<tr class="separator:ae411a50a0e24d32ab564979b2df6ed24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ef0fe69558a29af4a8d568f2b5b518"><td class="memTemplParams" colspan="2">template&lt;typename lineformat &gt; </td></tr>
<tr class="memitem:a16ef0fe69558a29af4a8d568f2b5b518"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; lineformat &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a16ef0fe69558a29af4a8d568f2b5b518">read_csv_file</a> (const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;path)</td></tr>
<tr class="separator:a16ef0fe69558a29af4a8d568f2b5b518"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe7e29a3d1ac620fb9d0eb6830be84cf"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abe7e29a3d1ac620fb9d0eb6830be84cf">operator&lt;&lt;</a> (std::ostream &amp;stream, const <a class="el" href="classopenage_1_1util_1_1_file.xhtml">File</a> &amp;file)</td></tr>
<tr class="separator:abe7e29a3d1ac620fb9d0eb6830be84cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe036a1f307dd739bb4855cb0b799f38"><td class="memTemplParams" colspan="2">template&lt;unsigned int amount, typename T &gt; </td></tr>
<tr class="memitem:afe036a1f307dd739bb4855cb0b799f38"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount+(std::is_signed&lt; T &gt;::value ? 1 :0)&lt; sizeof(T) *CHAR_BIT), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#afe036a1f307dd739bb4855cb0b799f38">safe_shiftleft</a> (T value)</td></tr>
<tr class="separator:afe036a1f307dd739bb4855cb0b799f38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f37c9c7cfd9dbe87e3ce104476bbda4"><td class="memTemplParams" colspan="2">template&lt;unsigned int amount, typename T &gt; </td></tr>
<tr class="memitem:a1f37c9c7cfd9dbe87e3ce104476bbda4"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount &gt;=sizeof(T) *CHAR_BIT), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">safe_shiftright</a> (T value)</td></tr>
<tr class="separator:a1f37c9c7cfd9dbe87e3ce104476bbda4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa341b7244c12ea3496bdcd56e226d791"><td class="memTemplParams" colspan="2">template&lt;unsigned int amount, typename T &gt; </td></tr>
<tr class="memitem:aa341b7244c12ea3496bdcd56e226d791"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount&lt; sizeof(T) *CHAR_BIT), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa341b7244c12ea3496bdcd56e226d791">safe_shiftright</a> (T value)</td></tr>
<tr class="separator:aa341b7244c12ea3496bdcd56e226d791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a101479979c88a661de76a6e70fb2978b"><td class="memTemplParams" colspan="2">template&lt;int amount, typename T &gt; </td></tr>
<tr class="memitem:a101479979c88a661de76a6e70fb2978b"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount&lt; 0), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a101479979c88a661de76a6e70fb2978b">safe_shift</a> (T value)</td></tr>
<tr class="separator:a101479979c88a661de76a6e70fb2978b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5346916e27392c8a141e10890f42925e"><td class="memTemplParams" colspan="2">template&lt;int amount, typename T &gt; </td></tr>
<tr class="memitem:a5346916e27392c8a141e10890f42925e"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount &gt;=0), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5346916e27392c8a141e10890f42925e">safe_shift</a> (T value)</td></tr>
<tr class="separator:a5346916e27392c8a141e10890f42925e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4202ea3aad51da9bcef0572898fc7175"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a4202ea3aad51da9bcef0572898fc7175"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a4202ea3aad51da9bcef0572898fc7175">operator+</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;rhs)</td></tr>
<tr class="separator:a4202ea3aad51da9bcef0572898fc7175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e4ab8c3700eebbe1f3367ea7aa4de17"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a4e4ab8c3700eebbe1f3367ea7aa4de17"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a4e4ab8c3700eebbe1f3367ea7aa4de17">operator+</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a4e4ab8c3700eebbe1f3367ea7aa4de17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a976790c1ec88a9cce32a887ca49526db"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a976790c1ec88a9cce32a887ca49526db"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a976790c1ec88a9cce32a887ca49526db">operator -</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;rhs)</td></tr>
<tr class="separator:a976790c1ec88a9cce32a887ca49526db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0691ea67643c9ec3e8ef552a45583a81"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a0691ea67643c9ec3e8ef552a45583a81"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a0691ea67643c9ec3e8ef552a45583a81">operator -</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a0691ea67643c9ec3e8ef552a45583a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3949bf1d23f5c8446474135851399fc"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned F, typename N &gt; </td></tr>
<tr class="memitem:aa3949bf1d23f5c8446474135851399fc"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; std::is_arithmetic&lt; N &gt;::value, <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &gt;::type constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">operator *</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; lhs, const N &amp;rhs)</td></tr>
<tr class="separator:aa3949bf1d23f5c8446474135851399fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e6ea5affdccd958479d0eba1b74ce0f"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned F, typename N &gt; </td></tr>
<tr class="memitem:a4e6ea5affdccd958479d0eba1b74ce0f"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a4e6ea5affdccd958479d0eba1b74ce0f">operator/</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; lhs, const N &amp;rhs)</td></tr>
<tr class="separator:a4e6ea5affdccd958479d0eba1b74ce0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cfc0e84830b5945b5731d2148eea3b4"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5cfc0e84830b5945b5731d2148eea3b4">hash_combine</a> (size_t hash1, size_t hash2)</td></tr>
<tr class="separator:a5cfc0e84830b5945b5731d2148eea3b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cb605abe74b26763ac7340c3785656a"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">hash</a> (const uint64_t key[2], const uint8_t *data, size_t len_data)</td></tr>
<tr class="separator:a3cb605abe74b26763ac7340c3785656a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cb190d6ba8c160e1453ff4379dd2dcb"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8cb190d6ba8c160e1453ff4379dd2dcb"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a8cb190d6ba8c160e1453ff4379dd2dcb">ignore_result</a> (T)</td></tr>
<tr class="separator:a8cb190d6ba8c160e1453ff4379dd2dcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3f37a72fc7fc649b471cff17733f7ec"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N, typename T &gt; </td></tr>
<tr class="memitem:af3f37a72fc7fc649b471cff17733f7ec"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af3f37a72fc7fc649b471cff17733f7ec">operator *</a> (T a, const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;mat)</td></tr>
<tr class="separator:af3f37a72fc7fc649b471cff17733f7ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a759079d1391952faee3b693dba78382c"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N, typename T &gt; </td></tr>
<tr class="memitem:a759079d1391952faee3b693dba78382c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a759079d1391952faee3b693dba78382c">operator *</a> (int64_t a, const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;mat)</td></tr>
<tr class="separator:a759079d1391952faee3b693dba78382c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e483e123bf554b630319eb3dd012c02"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7e483e123bf554b630319eb3dd012c02"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a7e483e123bf554b630319eb3dd012c02">mod</a> (T x, T m)</td></tr>
<tr class="separator:a7e483e123bf554b630319eb3dd012c02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebb1428f079400b957bd2ce2fb8ad583"><td class="memTemplParams" colspan="2">template&lt;typename T , unsigned int modulo&gt; </td></tr>
<tr class="memitem:aebb1428f079400b957bd2ce2fb8ad583"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aebb1428f079400b957bd2ce2fb8ad583">mod</a> (T x)</td></tr>
<tr class="separator:aebb1428f079400b957bd2ce2fb8ad583"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a656c9d55c02d291f899cdae14b356d7a"><td class="memTemplParams" colspan="2">template&lt;typename T , int amount&gt; </td></tr>
<tr class="memitem:a656c9d55c02d291f899cdae14b356d7a"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a656c9d55c02d291f899cdae14b356d7a">rol</a> (T x)</td></tr>
<tr class="separator:a656c9d55c02d291f899cdae14b356d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34ba6f7abd32acb48dfc6ad6efdc1bc8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a34ba6f7abd32acb48dfc6ad6efdc1bc8"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">div</a> (T x, T m)</td></tr>
<tr class="separator:a34ba6f7abd32acb48dfc6ad6efdc1bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69b6ecf2b5119f11c33d2b5b89cec86c"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a> (const uint8_t *start, size_t count, bool big_endian=false)</td></tr>
<tr class="separator:a69b6ecf2b5119f11c33d2b5b89cec86c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9d6c19aadc0f6a1d502f42852172de0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a> (const uint64_t value, bool big_endian=false)</td></tr>
<tr class="separator:ae9d6c19aadc0f6a1d502f42852172de0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abab1bbea3efd69cf8087a807b5b5f8f2"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">array64_size</a> (size_t count)</td></tr>
<tr class="separator:abab1bbea3efd69cf8087a807b5b5f8f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa30219231e1ac7a89ef5d1fb44894e9e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a> (const uint8_t *start, size_t count, bool big_endian=false)</td></tr>
<tr class="separator:aa30219231e1ac7a89ef5d1fb44894e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9f52b617e7434a421cd5f9de448b600"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a> (const uint64_t *start, size_t count, bool big_endian=false)</td></tr>
<tr class="separator:af9f52b617e7434a421cd5f9de448b600"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af88424f642ef1ba4e6b2eb1c05ad8e3c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af88424f642ef1ba4e6b2eb1c05ad8e3c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af88424f642ef1ba4e6b2eb1c05ad8e3c">vector_extend</a> (std::vector&lt; T &gt; &amp;vec, const std::vector&lt; T &gt; &amp;ext)</td></tr>
<tr class="separator:af88424f642ef1ba4e6b2eb1c05ad8e3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fb1a345070c4a9dd714eb2e8ac2951c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9fb1a345070c4a9dd714eb2e8ac2951c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a9fb1a345070c4a9dd714eb2e8ac2951c">vector_extend</a> (std::vector&lt; T &gt; &amp;vec, std::vector&lt; T &gt; &amp;&amp;ext)</td></tr>
<tr class="separator:a9fb1a345070c4a9dd714eb2e8ac2951c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd8f5a72ed6227f640eda13229878c6f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acd8f5a72ed6227f640eda13229878c6f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#acd8f5a72ed6227f640eda13229878c6f">vector_remove_swap_end</a> (std::vector&lt; T &gt; &amp;vec, size_t idx)</td></tr>
<tr class="separator:acd8f5a72ed6227f640eda13229878c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72bef8f3b092e74cf890a38611b9bbc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a72bef8f3b092e74cf890a38611b9bbc0">gl_check_error</a> ()</td></tr>
<tr class="separator:a72bef8f3b092e74cf890a38611b9bbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9a3ed91bb7f5c0fa51acf99e8bcba64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa9a3ed91bb7f5c0fa51acf99e8bcba64">path_normalizer</a> (<a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;output, const <a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;input)</td></tr>
<tr class="separator:aa9a3ed91bb7f5c0fa51acf99e8bcba64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae7cd67becf8e8e8e0be8e54a12624d3"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aae7cd67becf8e8e8e0be8e54a12624d3">operator&lt;&lt;</a> (std::ostream &amp;stream, const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;path)</td></tr>
<tr class="separator:aae7cd67becf8e8e8e0be8e54a12624d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a664e0be1f5d2f4d1e1a624f6f4a5f0c1"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a> (const std::string &amp;fullpath)</td></tr>
<tr class="separator:a664e0be1f5d2f4d1e1a624f6f4a5f0c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954be5116f7af5633dbbc50bac26b0a8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a954be5116f7af5633dbbc50bac26b0a8">dirname</a> (const std::string &amp;fullpath)</td></tr>
<tr class="separator:a954be5116f7af5633dbbc50bac26b0a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bc4421a5f0f57f3a0aba3f96eb8d19c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a7bc4421a5f0f57f3a0aba3f96eb8d19c">repr</a> (const std::string &amp;arg)</td></tr>
<tr class="separator:a7bc4421a5f0f57f3a0aba3f96eb8d19c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5546877ed3bcad568ab21989a40ec088"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">sformat</a> (const char *fmt,...)</td></tr>
<tr class="separator:a5546877ed3bcad568ab21989a40ec088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a042594ac67e652c429fba1eeb1bec6fa"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">vsformat</a> (const char *fmt, va_list ap, std::string &amp;output)</td></tr>
<tr class="separator:a042594ac67e652c429fba1eeb1bec6fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a854794aef09b81dbec641eca208a66d7"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; char[]&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">copy_string</a> (const char *s)</td></tr>
<tr class="separator:a854794aef09b81dbec641eca208a66d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb6a94572d93a14498661545b8332ec"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abeb6a94572d93a14498661545b8332ec">rstrip</a> (char *s)</td></tr>
<tr class="separator:abeb6a94572d93a14498661545b8332ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae9cd09351bc11ad2c9fcf701786340a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">string_matches_pattern</a> (const char *str, const char *pattern)</td></tr>
<tr class="separator:aae9cd09351bc11ad2c9fcf701786340a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af74fec80080f6c627e5539bb20493ba0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af74fec80080f6c627e5539bb20493ba0">split</a> (const std::string &amp;txt, char delimiter)</td></tr>
<tr class="separator:af74fec80080f6c627e5539bb20493ba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7f8fe5c3426ea9e4968ef9aa21660ae"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa7f8fe5c3426ea9e4968ef9aa21660ae">split_escape</a> (const std::string &amp;txt, char delim, size_t size_hint)</td></tr>
<tr class="separator:aa7f8fe5c3426ea9e4968ef9aa21660ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08c4ca36b7f1f7b60da3629f01635167"><td class="memTemplParams" colspan="2">template&lt;unsigned decimals, unsigned w&gt; </td></tr>
<tr class="memitem:a08c4ca36b7f1f7b60da3629f01635167"><td class="memTemplItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a08c4ca36b7f1f7b60da3629f01635167">operator&lt;&lt;</a> (std::ostream &amp;os, <a class="el" href="structopenage_1_1util_1_1_float_fixed.xhtml">FloatFixed</a>&lt; decimals, w &gt; f)</td></tr>
<tr class="separator:a08c4ca36b7f1f7b60da3629f01635167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc839970f77edd26fe675758a6ca1b8"><td class="memTemplParams" colspan="2">template&lt;typename ret_t &gt; </td></tr>
<tr class="memitem:abfc839970f77edd26fe675758a6ca1b8"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abfc839970f77edd26fe675758a6ca1b8">split</a> (const std::string &amp;txt, char delimiter, ret_t result)</td></tr>
<tr class="separator:abfc839970f77edd26fe675758a6ca1b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac99f61e1d0c06d9b83650a71cff2f02f"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac99f61e1d0c06d9b83650a71cff2f02f">get_current_thread_id</a> ()</td></tr>
<tr class="separator:ac99f61e1d0c06d9b83650a71cff2f02f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e9f9bfa57d843330bd6d4bf85397433"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3e9f9bfa57d843330bd6d4bf85397433">utf8_decode</a> (const unsigned char *s, size_t len, int32_t *outbuf)</td></tr>
<tr class="separator:a3e9f9bfa57d843330bd6d4bf85397433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed7ef0b5ccf0d22a6329396d9a59f671"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aed7ef0b5ccf0d22a6329396d9a59f671">utf8_encode</a> (int cp, char *outbuf)</td></tr>
<tr class="separator:aed7ef0b5ccf0d22a6329396d9a59f671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5519d25810f698275993214ce79016c7"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5519d25810f698275993214ce79016c7">utf8_last_char_size</a> (char *str)</td></tr>
<tr class="separator:a5519d25810f698275993214ce79016c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82a1e7bf14b6f49be2d5fe4ec89f920e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a82a1e7bf14b6f49be2d5fe4ec89f920e">utf8_pop_back</a> (std::string &amp;str)</td></tr>
<tr class="separator:a82a1e7bf14b6f49be2d5fe4ec89f920e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a5f6ab09d105c3dfecc8de7dfd7be7ca2"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5f6ab09d105c3dfecc8de7dfd7be7ca2">empty_string</a></td></tr>
<tr class="separator:a5f6ab09d105c3dfecc8de7dfd7be7ca2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90bf47b9ae769862b60096e171e3204b"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a> = 8</td></tr>
<tr class="separator:a90bf47b9ae769862b60096e171e3204b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd7c6427c843cb61f0892c36a58dabbf"><td class="memItemLeft" align="right" valign="top">constexpr const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abd7c6427c843cb61f0892c36a58dabbf">HEX_DIGITS</a> = &quot;0123456789abcdef&quot;</td></tr>
<tr class="separator:abd7c6427c843cb61f0892c36a58dabbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a3d73b80bcbf615e6330df0017584f673"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d73b80bcbf615e6330df0017584f673">&#9670;&nbsp;</a></span>codepoint_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a3d73b80bcbf615e6330df0017584f673">openage::util::codepoint_t</a> = typedef int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="unicode_8h_source.xhtml#l00015">15</a> of file <a class="el" href="unicode_8h_source.xhtml">unicode.h</a>.</p>

</div>
</div>
<a id="a94d988fc19451e9042116f14432ec1b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94d988fc19451e9042116f14432ec1b6">&#9670;&nbsp;</a></span>Matrix2d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a94d988fc19451e9042116f14432ec1b6">openage::util::Matrix2d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;2, 2, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00291">291</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a00694c43ac6582c643b2591d420ce472"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00694c43ac6582c643b2591d420ce472">&#9670;&nbsp;</a></span>Matrix2f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">openage::util::Matrix2f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;2, 2, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00287">287</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="aa62f335908f8f5e68345cb3386ab94c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa62f335908f8f5e68345cb3386ab94c6">&#9670;&nbsp;</a></span>Matrix2t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#aa62f335908f8f5e68345cb3386ab94c6">openage::util::Matrix2t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;2, 2, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00273">273</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a157c43b340256c0f1124074fae7aa807"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a157c43b340256c0f1124074fae7aa807">&#9670;&nbsp;</a></span>Matrix3d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a157c43b340256c0f1124074fae7aa807">openage::util::Matrix3d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;3, 3, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00292">292</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="aaa417153128f83c6b7ee0b42efc418aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa417153128f83c6b7ee0b42efc418aa">&#9670;&nbsp;</a></span>Matrix3f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">openage::util::Matrix3f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;3, 3, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00288">288</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a748106aeb16275c1ebf6f0f9276381cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a748106aeb16275c1ebf6f0f9276381cd">&#9670;&nbsp;</a></span>Matrix3t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a748106aeb16275c1ebf6f0f9276381cd">openage::util::Matrix3t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;3, 3, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00276">276</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a06158fd9e1e05c74de527f554486f2b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06158fd9e1e05c74de527f554486f2b6">&#9670;&nbsp;</a></span>Matrix4d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a06158fd9e1e05c74de527f554486f2b6">openage::util::Matrix4d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;4, 4, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00293">293</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="afd42b418dc20fcb64677b2f75ecd97b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd42b418dc20fcb64677b2f75ecd97b8">&#9670;&nbsp;</a></span>Matrix4f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">openage::util::Matrix4f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;4, 4, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00289">289</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="ae5976ba79c39027e28f3f02458e93e38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5976ba79c39027e28f3f02458e93e38">&#9670;&nbsp;</a></span>Matrix4t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ae5976ba79c39027e28f3f02458e93e38">openage::util::Matrix4t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;4, 4, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00279">279</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a21feb2f799e75fd645e0d663ec4712f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21feb2f799e75fd645e0d663ec4712f9">&#9670;&nbsp;</a></span>Matrixd</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a21feb2f799e75fd645e0d663ec4712f9">openage::util::Matrixd</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00285">285</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="af077ef0b2ea660c4044917c60c4f0385"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af077ef0b2ea660c4044917c60c4f0385">&#9670;&nbsp;</a></span>Matrixf</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#af077ef0b2ea660c4044917c60c4f0385">openage::util::Matrixf</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00282">282</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="ad6fb313e7100659b50538dadeb6fb0f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6fb313e7100659b50538dadeb6fb0f3">&#9670;&nbsp;</a></span>Quaterniond</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ad6fb313e7100659b50538dadeb6fb0f3">openage::util::Quaterniond</a> = typedef <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt;double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quaternion_8h_source.xhtml#l00436">436</a> of file <a class="el" href="quaternion_8h_source.xhtml">quaternion.h</a>.</p>

</div>
</div>
<a id="ac0edd3e6d8ddf01c639814c3f2cb83fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0edd3e6d8ddf01c639814c3f2cb83fc">&#9670;&nbsp;</a></span>Quaternionf</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">openage::util::Quaternionf</a> = typedef <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt;float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quaternion_8h_source.xhtml#l00435">435</a> of file <a class="el" href="quaternion_8h_source.xhtml">quaternion.h</a>.</p>

</div>
</div>
<a id="a5759baf587738b4365920f5b944b0088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5759baf587738b4365920f5b944b0088">&#9670;&nbsp;</a></span>Vector2d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">openage::util::Vector2d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;2, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00225">225</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a285db29af032ad3b2a79f810faaf65d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a285db29af032ad3b2a79f810faaf65d3">&#9670;&nbsp;</a></span>Vector2f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a285db29af032ad3b2a79f810faaf65d3">openage::util::Vector2f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;2, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00221">221</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a3b7551617f7e81afd786778a18a6e115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b7551617f7e81afd786778a18a6e115">&#9670;&nbsp;</a></span>Vector2t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a3b7551617f7e81afd786778a18a6e115">openage::util::Vector2t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;2, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00207">207</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="aaa92edd0399f568ff984de550f094c9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa92edd0399f568ff984de550f094c9d">&#9670;&nbsp;</a></span>Vector3d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#aaa92edd0399f568ff984de550f094c9d">openage::util::Vector3d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;3, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00226">226</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="ab7bb49fe673b7a4d72fb6fb91aba44c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7bb49fe673b7a4d72fb6fb91aba44c8">&#9670;&nbsp;</a></span>Vector3f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">openage::util::Vector3f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;3, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00222">222</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a2ae1eb4098bce6a746a8b5474bf76d12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ae1eb4098bce6a746a8b5474bf76d12">&#9670;&nbsp;</a></span>Vector3t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a2ae1eb4098bce6a746a8b5474bf76d12">openage::util::Vector3t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;3, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00210">210</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="af8c841be325b73ea41a31e63bc2013dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8c841be325b73ea41a31e63bc2013dd">&#9670;&nbsp;</a></span>Vector4d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#af8c841be325b73ea41a31e63bc2013dd">openage::util::Vector4d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;4, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00227">227</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="af3c02e2c02d3b68c87d58b867e609bbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3c02e2c02d3b68c87d58b867e609bbf">&#9670;&nbsp;</a></span>Vector4f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#af3c02e2c02d3b68c87d58b867e609bbf">openage::util::Vector4f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;4, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00223">223</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="ab85260365ee607e213b044335a3c4ac2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab85260365ee607e213b044335a3c4ac2">&#9670;&nbsp;</a></span>Vector4t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ab85260365ee607e213b044335a3c4ac2">openage::util::Vector4t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;4, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00213">213</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a333446966cecccc963bdaa41f5395339"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a333446966cecccc963bdaa41f5395339">&#9670;&nbsp;</a></span>Vectord</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a333446966cecccc963bdaa41f5395339">openage::util::Vectord</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;N, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00219">219</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a412362dd7eb21295a62e2c22031ac77c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a412362dd7eb21295a62e2c22031ac77c">&#9670;&nbsp;</a></span>Vectorf</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a412362dd7eb21295a62e2c22031ac77c">openage::util::Vectorf</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;N, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00216">216</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="abe26c67b0463cb53c33b0659ebb89370"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe26c67b0463cb53c33b0659ebb89370">&#9670;&nbsp;</a></span>addr_to_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::addr_to_string </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                           {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">sformat</a>(<span class="stringliteral">&quot;[%p]&quot;</span>, addr);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a5546877ed3bcad568ab21989a40ec088"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">openage::util::sformat</a></div><div class="ttdeci">std::string sformat(const char *fmt,...)</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00020">strings.cpp:20</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="strings_8cpp_source.xhtml#l00020">sformat()</a>.</p>

<p class="reference">Referenced by <a class="el" href="compiler_8cpp_source.xhtml#l00098">symbol_name()</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_abe26c67b0463cb53c33b0659ebb89370_cgraph.svg" width="535" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_abe26c67b0463cb53c33b0659ebb89370_icgraph.svg" width="100%" height="512"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="abab1bbea3efd69cf8087a807b5b5f8f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abab1bbea3efd69cf8087a807b5b5f8f2">&#9670;&nbsp;</a></span>array64_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t openage::util::array64_size </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the number of uint64-elements that result from converting a count-sized uint8_t array.</p>
<p>Used to determine the size for <a class="el" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64()</a></p>
<dl class="section return"><dt>Returns</dt><dd>ceil(count/8) </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00170">170</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                                                   {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">size_t</span> partial = mod&lt;size_t, uint64_s&gt;(count);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> ((count - partial) / <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>) + (partial ? 1 : 0);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a90bf47b9ae769862b60096e171e3204b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">openage::util::uint64_s</a></div><div class="ttdeci">static constexpr size_t uint64_s</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00094">misc.h:94</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="misc_8h_source.xhtml#l00094">uint64_s</a>.</p>

<p class="reference">Referenced by <a class="el" href="misc_8h_source.xhtml#l00190">array8_to_array64()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_abab1bbea3efd69cf8087a807b5b5f8f2_icgraph.svg" width="559" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af9f52b617e7434a421cd5f9de448b600"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9f52b617e7434a421cd5f9de448b600">&#9670;&nbsp;</a></span>array64_to_array8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint8_t&gt; openage::util::array64_to_array8 </td>
          <td>(</td>
          <td class="paramtype">const uint64_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a C-style array of uint64_t to a std::vector of uint8_t. Uses little-endianness as default.</p>
<p>e.g (big-endian): 0x0123456789abcdef -&gt; {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef} e.g (little-endian): 0x0123456789abcdef -&gt; {0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01}</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Start</td><td>of the input data. </td></tr>
    <tr><td class="paramname">count</td><td>Number of uint64_t to convert. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 8 bit number vector. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00222">222</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                                                              {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.reserve(count * <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; count; i++) {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        std::vector&lt;uint8_t&gt; block = <a class="code" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a>(*(start + i), big_endian);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.insert(<a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.end(), block.begin(), block.end());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_ae9d6c19aadc0f6a1d502f42852172de0"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">openage::util::uint64_to_array8</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; uint64_to_array8(const uint64_t value, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00145">misc.h:145</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a90bf47b9ae769862b60096e171e3204b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">openage::util::uint64_s</a></div><div class="ttdeci">static constexpr size_t uint64_s</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00094">misc.h:94</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>, <a class="el" href="misc_8h_source.xhtml#l00094">uint64_s</a>, and <a class="el" href="misc_8h_source.xhtml#l00145">uint64_to_array8()</a>.</p>

<p class="reference">Referenced by <a class="el" href="misc__test_8cpp_source.xhtml#l00013">openage::util::tests::array_conversion()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_af9f52b617e7434a421cd5f9de448b600_cgraph.svg" width="100%" height="361"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_af9f52b617e7434a421cd5f9de448b600_icgraph.svg" width="339" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aa30219231e1ac7a89ef5d1fb44894e9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa30219231e1ac7a89ef5d1fb44894e9e">&#9670;&nbsp;</a></span>array8_to_array64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint64_t&gt; openage::util::array8_to_array64 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a C-style array of uint8_t to a std::vector of uint64_t. Uses little-endianness as default. Fills the remaining bytes of the last uint64_t with zeroes.</p>
<p>e.g (big-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0123456700000000 e.g (little-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0000000067452301</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>Start of the input data. </td></tr>
    <tr><td class="paramname">count</td><td>Number of bytes to convert. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 64 bit number vector. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00190">190</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                                                             {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">size_t</span> size{<a class="code" href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">array64_size</a>(count)};</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::vector&lt;uint64_t&gt; <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>(size, 0);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">size_t</span> rem_bytes;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; size; i++) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        rem_bytes = count - i * <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>[i] = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            start + (i * <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a>(rem_bytes, <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>),</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            big_endian</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        );</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="ttc" id="namespacestd_xhtml_a34591a1d8ee5da3f16f56554590d5e16"><div class="ttname"><a href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; min(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00475">fixed_point.h:475</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a69b6ecf2b5119f11c33d2b5b89cec86c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">openage::util::array8_to_uint64</a></div><div class="ttdeci">uint64_t array8_to_uint64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00111">misc.h:111</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abab1bbea3efd69cf8087a807b5b5f8f2"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">openage::util::array64_size</a></div><div class="ttdeci">constexpr size_t array64_size(size_t count)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00170">misc.h:170</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a90bf47b9ae769862b60096e171e3204b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">openage::util::uint64_s</a></div><div class="ttdeci">static constexpr size_t uint64_s</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00094">misc.h:94</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="misc_8h_source.xhtml#l00170">array64_size()</a>, <a class="el" href="misc_8h_source.xhtml#l00111">array8_to_uint64()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00475">std::min()</a>, <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>, and <a class="el" href="misc_8h_source.xhtml#l00094">uint64_s</a>.</p>

<p class="reference">Referenced by <a class="el" href="misc__test_8cpp_source.xhtml#l00013">openage::util::tests::array_conversion()</a>.</p>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aa30219231e1ac7a89ef5d1fb44894e9e_cgraph.svg" width="100%" height="509"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aa30219231e1ac7a89ef5d1fb44894e9e_icgraph.svg" width="332" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a69b6ecf2b5119f11c33d2b5b89cec86c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69b6ecf2b5119f11c33d2b5b89cec86c">&#9670;&nbsp;</a></span>array8_to_uint64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t openage::util::array8_to_uint64 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a C-style array of uint8_t to a uint64_t. Uses little-endianness as default. Fills the remaining bytes with zeroes.</p>
<p>e.g (big-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0123456700000000 e.g (little-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0000000067452301</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>Pointer to start of the input data. </td></tr>
    <tr><td class="paramname">count</td><td>Number of bytes to read. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 64 bit number. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00111">111</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                                                            {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (count &gt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">throw</span> Error(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Tried to copy more than &quot;</span> &lt;&lt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a> &lt;&lt; <span class="stringliteral">&quot; bytes&quot;</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    uint64_t <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>{0};</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (big_endian) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; count; i++) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> |= static_cast&lt;uint64_t&gt;(*(start + i)) &lt;&lt; (7 - i) * 8;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; count; i++) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> |= static_cast&lt;uint64_t&gt;(*(start + i)) &lt;&lt; i * 8;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a90bf47b9ae769862b60096e171e3204b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">openage::util::uint64_s</a></div><div class="ttdeci">static constexpr size_t uint64_s</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00094">misc.h:94</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="log_2____init_____8py_source.xhtml#l00124">openage::log::err()</a>, <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>, <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>, and <a class="el" href="misc_8h_source.xhtml#l00094">uint64_s</a>.</p>

<p class="reference">Referenced by <a class="el" href="misc_8h_source.xhtml#l00190">array8_to_array64()</a>, <a class="el" href="misc__test_8cpp_source.xhtml#l00013">openage::util::tests::array_conversion()</a>, <a class="el" href="hash_8cpp_source.xhtml#l00036">hash()</a>, and <a class="el" href="hash_8cpp_source.xhtml#l00023">openage::util::Siphash::set_key()</a>.</p>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a69b6ecf2b5119f11c33d2b5b89cec86c_cgraph.svg" width="567" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a69b6ecf2b5119f11c33d2b5b89cec86c_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a854794aef09b81dbec641eca208a66d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a854794aef09b81dbec641eca208a66d7">&#9670;&nbsp;</a></span>copy_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; char[]&gt; openage::util::copy_string </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the given string to the returned unique_ptr, including 0 byte. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                                                 {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">size_t</span> sz = <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(s) + 1;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">auto</span> ret = std::make_unique&lt;char[]&gt;(sz);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    memcpy(ret.get(), s, sz);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="constexpr_8h_source.xhtml#l00030">openage::util::constexpr_::strlen()</a>.</p>

<p class="reference">Referenced by <a class="el" href="subprocess_8cpp_source.xhtml#l00037">openage::subprocess::which()</a>.</p>
<div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a854794aef09b81dbec641eca208a66d7_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a854794aef09b81dbec641eca208a66d7_icgraph.svg" width="100%" height="440"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="aebed129b2a0773520cdd8d40b0f70318"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebed129b2a0773520cdd8d40b0f70318">&#9670;&nbsp;</a></span>demangle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::demangle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>symbol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Demangles a symbol name.</p>
<p>On failure, the mangled symbol name is returned. </p>

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                       {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// \todo demangle names for MSVC; Possibly using UnDecorateSymbolName</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="comment">// https://msdn.microsoft.com/en-us/library/windows/desktop/ms681400(v=vs.85).aspx</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="comment">// Could it be that MSVC&#39;s typeid(T).name() already returns a demangled name? It seems that .raw_name() returns the mangled name</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> symbol;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordtype">int</span> status;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordtype">char</span> *buf = abi::__cxa_demangle(symbol, <span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>, &amp;status);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> (status != 0) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> symbol;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        std::string <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>{buf};</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        free(buf);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>.</p>

<p class="reference">Referenced by <a class="el" href="exctranslate__tests_8cpp_source.xhtml#l00042">openage::pyinterface::tests::err_py_to_cpp()</a>, <a class="el" href="game__spec_8cpp_source.xhtml#l00034">openage::GameSpec::initialize()</a>, <a class="el" href="error_2error_8cpp_source.xhtml#l00089">openage::error::operator&lt;&lt;()</a>, <a class="el" href="compiler_8cpp_source.xhtml#l00098">symbol_name()</a>, <a class="el" href="error_2handlers_8cpp_source.xhtml#l00069">openage::error::terminate_handler()</a>, <a class="el" href="exctranslate_8cpp_source.xhtml#l00047">openage::pyinterface::translate_exc_cpp_to_py()</a>, and <a class="el" href="error_2error_8cpp_source.xhtml#l00077">openage::error::Error::type_name()</a>.</p>
<div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aebed129b2a0773520cdd8d40b0f70318_cgraph.svg" width="587" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aebed129b2a0773520cdd8d40b0f70318_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a954be5116f7af5633dbbc50bac26b0a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a954be5116f7af5633dbbc50bac26b0a8">&#9670;&nbsp;</a></span>dirname()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::dirname </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fullpath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>return the head (dirname) part of a path. </p>

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00374">374</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                             {</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordtype">size_t</span> rsep_pos = fullpath.rfind(<a class="code" href="namespaceopenage_1_1util_1_1fslike.xhtml#a670007c84e8b0cf3c4f0dfd74e0f6399">fslike::PATHSEP</a>);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">if</span> (rsep_pos == std::string::npos) {</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">return</span> fullpath.substr(0, rsep_pos);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_1_1fslike_xhtml_a670007c84e8b0cf3c4f0dfd74e0f6399"><div class="ttname"><a href="namespaceopenage_1_1util_1_1fslike.xhtml#a670007c84e8b0cf3c4f0dfd74e0f6399">openage::util::fslike::PATHSEP</a></div><div class="ttdeci">constexpr char PATHSEP</div><div class="ttdef"><b>Definition:</b> <a href="fslike_2native_8h_source.xhtml#l00013">native.h:13</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fslike_2native_8h_source.xhtml#l00013">openage::util::fslike::PATHSEP</a>.</p>

<p class="reference">Referenced by <a class="el" href="csv_8h_source.xhtml#l00059">openage::util::CSVCollection::read()</a>.</p>
<div id="dynsection-13" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-13-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-13-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-13-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a954be5116f7af5633dbbc50bac26b0a8_icgraph.svg" width="100%" height="414"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a34ba6f7abd32acb48dfc6ad6efdc1bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34ba6f7abd32acb48dfc6ad6efdc1bc8">&#9670;&nbsp;</a></span>div()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::div </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>implements the 'correct' version of the division operator, which always rounds to -inf </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00075">75</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                       {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> (x - mod&lt;T&gt;(x, m)) / m;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="fixed__point_8h_source.xhtml#l00459">operator/()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00372">openage::util::FixedPoint&lt; int64_t, 16 &gt;::operator/=()</a>, and <a class="el" href="tile_8cpp_source.xhtml#l00062">openage::coord::tile::to_chunk()</a>.</p>
<div id="dynsection-14" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-14-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-14-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-14-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a34ba6f7abd32acb48dfc6ad6efdc1bc8_icgraph.svg" width="100%" height="518"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a664e0be1f5d2f4d1e1a624f6f4a5f0c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">&#9670;&nbsp;</a></span>filename()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::filename </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fullpath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>get the filename (last part) of a given path </p>

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00364">364</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                              {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="keywordtype">size_t</span> rsep_pos = fullpath.rfind(<a class="code" href="namespaceopenage_1_1util_1_1fslike.xhtml#a670007c84e8b0cf3c4f0dfd74e0f6399">fslike::PATHSEP</a>);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (rsep_pos == std::string::npos) {</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">return</span> fullpath.substr(rsep_pos + 1);</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_1_1fslike_xhtml_a670007c84e8b0cf3c4f0dfd74e0f6399"><div class="ttname"><a href="namespaceopenage_1_1util_1_1fslike.xhtml#a670007c84e8b0cf3c4f0dfd74e0f6399">openage::util::fslike::PATHSEP</a></div><div class="ttdeci">constexpr char PATHSEP</div><div class="ttdef"><b>Definition:</b> <a href="fslike_2native_8h_source.xhtml#l00013">native.h:13</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fslike_2native_8h_source.xhtml#l00013">openage::util::fslike::PATHSEP</a>.</p>

<p class="reference">Referenced by <a class="el" href="game__saver_8cpp_source.xhtml#l00037">openage::gui::GameSaver::activate()</a>, <a class="el" href="screenshot_8cpp_source.xhtml#l00065">openage::ScreenshotManager::encode_png()</a>, <a class="el" href="file__logsink_8cpp_source.xhtml#l00015">openage::log::FileSink::FileSink()</a>, <a class="el" href="csv_8h_source.xhtml#l00089">openage::util::CSVCollection::get_data()</a>, <a class="el" href="gui__game__spec__image__provider__by__filename__impl_8cpp_source.xhtml#l00028">openage::gui::GuiGameSpecImageProviderByFilenameImpl::get_texture_handle()</a>, <a class="el" href="exctranslate_8cpp_source.xhtml#l00137">openage::pyinterface::init_exc_message()</a>, <a class="el" href="subprocess_8cpp_source.xhtml#l00025">openage::subprocess::is_executable()</a>, <a class="el" href="csv_8h_source.xhtml#l00059">openage::util::CSVCollection::read()</a>, and <a class="el" href="subprocess_8cpp_source.xhtml#l00037">openage::subprocess::which()</a>.</p>
<div id="dynsection-15" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-15-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-15-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-15-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a664e0be1f5d2f4d1e1a624f6f4a5f0c1_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ac6f34c002692bc844cd70de03e10bc5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6f34c002692bc844cd70de03e10bc5d">&#9670;&nbsp;</a></span>for_each()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Container , class Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Function openage::util::for_each </td>
          <td>(</td>
          <td class="paramtype">Container &amp;&amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Function &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>std::for_each except just on containers. </p>

<p class="definition">Definition at line <a class="el" href="algorithm_8h_source.xhtml#l00018">18</a> of file <a class="el" href="algorithm_8h_source.xhtml">algorithm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                                                 {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="comment">// why cpp why...</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#ac6f34c002692bc844cd70de03e10bc5d">std::for_each</a>(std::begin(std::forward&lt;Container&gt;(<a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>)),</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;                         std::end(std::forward&lt;Container&gt;(<a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>)),</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;                         std::forward&lt;Function&gt;(func));</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_ac6f34c002692bc844cd70de03e10bc5d"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ac6f34c002692bc844cd70de03e10bc5d">openage::util::for_each</a></div><div class="ttdeci">Function for_each(Container &amp;&amp;container, Function &amp;&amp;func)</div><div class="ttdef"><b>Definition:</b> <a href="algorithm_8h_source.xhtml#l00018">algorithm.h:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_afc4e799a037edab37e1e35a74da593b7"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">openage::curve::tests::container</a></div><div class="ttdeci">void container()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00205">container.cpp:205</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="container_8cpp_source.xhtml#l00205">openage::curve::tests::container()</a>.</p>

<p class="reference">Referenced by <a class="el" href="game__control_8cpp_source.xhtml#l00659">openage::EditorMode::announce_category_content()</a>, <a class="el" href="gui__filled__texture__handles_8cpp_source.xhtml#l00028">openage::gui::GuiFilledTextureHandles::fill_all_handles_with_texture()</a>, <a class="el" href="gui__live__reloader_8cpp_source.xhtml#l00055">qtsdl::GuiLiveReloader::init_persistent_items()</a>, and <a class="el" href="qml__engine__with__singleton__items__info_8cpp_source.xhtml#l00030">qtsdl::QmlEngineWithSingletonItemsInfo::~QmlEngineWithSingletonItemsInfo()</a>.</p>
<div id="dynsection-16" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-16-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-16-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-16-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ac6f34c002692bc844cd70de03e10bc5d_cgraph.svg" width="100%" height="583"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-17" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-17-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-17-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-17-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ac6f34c002692bc844cd70de03e10bc5d_icgraph.svg" width="100%" height="544"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ac99f61e1d0c06d9b83650a71cff2f02f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac99f61e1d0c06d9b83650a71cff2f02f">&#9670;&nbsp;</a></span>get_current_thread_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::get_current_thread_id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the unique identifier of the current thread.</p>
<p>For compilers with support for thread_local storage, the function also guarantees to return strictly monotonically increasing identifier (no collision). </p>

<p class="definition">Definition at line <a class="el" href="thread__id_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="thread__id_8cpp_source.xhtml">thread_id.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                               {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">    #if HAVE_THREAD_LOCAL_STORAGE</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">static</span> thread_local ThreadIdSupplier current_thread_id;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">return</span> current_thread_id.val;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">    #else</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> std::hash&lt;std::thread::id&gt;()(std::this_thread::get_id());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="job__manager_8cpp_source.xhtml#l00059">openage::job::JobManager::execute_callbacks()</a>, <a class="el" href="message_8cpp_source.xhtml#l00017">openage::log::message::init()</a>, and <a class="el" href="typed__job__state__base_8h_source.xhtml#l00051">openage::job::TypedJobStateBase&lt; T &gt;::TypedJobStateBase()</a>.</p>
<div id="dynsection-18" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-18-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-18-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-18-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ac99f61e1d0c06d9b83650a71cff2f02f_icgraph.svg" width="100%" height="437"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a72bef8f3b092e74cf890a38611b9bbc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72bef8f3b092e74cf890a38611b9bbc0">&#9670;&nbsp;</a></span>gl_check_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::gl_check_error </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>query the current opengl context for any errors.</p>
<p>raises exceptions on any error. </p>

<p class="definition">Definition at line <a class="el" href="opengl_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="opengl_8cpp_source.xhtml">opengl.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                      {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keywordtype">int</span> glerrorstate = 0;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    glerrorstate = glGetError();</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">if</span> (glerrorstate != GL_NO_ERROR) {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *errormsg;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="comment">//generate error message</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="keywordflow">switch</span> (glerrorstate) {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordflow">case</span> GL_INVALID_ENUM:</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;            <span class="comment">// An unacceptable value is specified for an enumerated argument.</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            <span class="comment">// The offending command is ignored</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;            <span class="comment">// and has no other side effect than to set the error flag.</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            errormsg = <span class="stringliteral">&quot;invalid enum passed to opengl call&quot;</span>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">case</span> GL_INVALID_VALUE:</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="comment">// A numeric argument is out of range.</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="comment">// The offending command is ignored</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            <span class="comment">// and has no other side effect than to set the error flag.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            errormsg = <span class="stringliteral">&quot;invalid value passed to opengl call&quot;</span>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">case</span> GL_INVALID_OPERATION:</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="comment">// The specified operation is not allowed in the current state.</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="comment">// The offending command is ignored</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="comment">// and has no other side effect than to set the error flag.</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            errormsg = <span class="stringliteral">&quot;invalid operation performed during some state&quot;</span>;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">case</span> GL_INVALID_FRAMEBUFFER_OPERATION:</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="comment">// The framebuffer object is not complete. The offending command</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="comment">// is ignored and has no other side effect than to set the error flag.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            errormsg = <span class="stringliteral">&quot;invalid framebuffer operation&quot;</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">case</span> GL_OUT_OF_MEMORY:</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="comment">// There is not enough memory left to execute the command.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="comment">// The state of the GL is undefined,</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="comment">// except for the state of the error flags,</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="comment">// after this error is recorded.</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            errormsg = <span class="stringliteral">&quot;out of memory, wtf?&quot;</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">case</span> GL_STACK_UNDERFLOW:</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="comment">// An attempt has been made to perform an operation that would</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="comment">// cause an internal stack to underflow.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            errormsg = <span class="stringliteral">&quot;stack underflow&quot;</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> GL_STACK_OVERFLOW:</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="comment">// An attempt has been made to perform an operation that would</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="comment">// cause an internal stack to overflow.</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            errormsg = <span class="stringliteral">&quot;stack overflow&quot;</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="comment">// unknown error state</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            errormsg = <span class="stringliteral">&quot;unknown error&quot;</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">throw</span> Error(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="stringliteral">&quot;OpenGL error state after running draw method: &quot;</span> &lt;&lt; glerrorstate &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; errormsg &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;Run the game with --gl-debug to get more information: &#39;./run game --gl-debug&#39;.&quot;</span>);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="log_2____init_____8py_source.xhtml#l00124">openage::log::err()</a>, and <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="engine_8cpp_source.xhtml#l00315">openage::Engine::loop()</a>.</p>
<div id="dynsection-19" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-19-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-19-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-19-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a72bef8f3b092e74cf890a38611b9bbc0_cgraph.svg" width="326" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-20" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-20-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-20-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-20-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a72bef8f3b092e74cf890a38611b9bbc0_icgraph.svg" width="559" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a3cb605abe74b26763ac7340c3785656a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cb605abe74b26763ac7340c3785656a">&#9670;&nbsp;</a></span>hash()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t openage::util::hash </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>key</em>[2], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_siphash.xhtml">Siphash</a> implementation</p>
<p><a href="https://131002.net/siphash/">https://131002.net/siphash/</a> </p>

<p class="definition">Definition at line <a class="el" href="hash_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="hash_8cpp_source.xhtml">hash.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                                                                           {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">static</span> <span class="keyword">auto</span> sipround = [](uint64_t *v) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        v[0] += v[1];</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        v[1] = rol&lt;uint64_t, 13&gt;(v[1]);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        v[1] ^= v[0];</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        v[0] = rol&lt;uint64_t, 32&gt;(v[0]);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        v[2] += v[3];</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        v[3] = rol&lt;uint64_t, 16&gt;(v[3]);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        v[3] ^= v[2];</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        v[0] += v[3];</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        v[3] = rol&lt;uint64_t, 21&gt;(v[3]);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        v[3] ^= v[0];</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        v[2] += v[1];</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        v[1] = rol&lt;uint64_t, 17&gt;(v[1]);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        v[1] ^= v[2];</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        v[2] = rol&lt;uint64_t, 32&gt;(v[2]);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// (len_data mod 256) ending to append later at the end of the data</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    uint64_t ending = static_cast&lt;uint64_t&gt;(len_data &amp; 0xff) &lt;&lt; 56;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Initialization</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    uint64_t v[4];</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// These values were taken from the paper: https://131002.net/siphash/siphash.pdf</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    v[0] = key[0] ^ 0x736f6d6570736575ull;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    v[1] = key[1] ^ 0x646f72616e646f6dull;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    v[2] = key[0] ^ 0x6c7967656e657261ull;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    v[3] = key[1] ^ 0x7465646279746573ull;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// Compression</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordtype">size_t</span> rem_bytes{len_data};</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> uint8_t *idx{data}; <span class="comment">// Points to the start of the current block being copied</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        uint64_t block;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">bool</span> finished{<span class="keyword">false</span>};</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">if</span> (rem_bytes &lt; 8) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                block = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(idx, rem_bytes, <span class="keyword">false</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                block |= ending;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                finished = <span class="keyword">true</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">else</span> {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                block = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(idx, 8, <span class="keyword">false</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            v[3] ^= block;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            sipround(v);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            sipround(v);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            v[0] ^= block;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            rem_bytes -= 8;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            idx += 8;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        } <span class="keywordflow">while</span> (!finished);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Finalization</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    v[2] ^= 0xff;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    sipround(v);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    sipround(v);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    sipround(v);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    sipround(v);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> v[0] ^ v[1] ^ v[2] ^ v[3];</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a69b6ecf2b5119f11c33d2b5b89cec86c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">openage::util::array8_to_uint64</a></div><div class="ttdeci">uint64_t array8_to_uint64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00111">misc.h:111</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="misc_8h_source.xhtml#l00111">array8_to_uint64()</a>.</p>

<p class="reference">Referenced by <a class="el" href="header__snippet_8py_source.xhtml#l00029">openage.convert.dataformat.header_snippet.HeaderSnippet::__hash__()</a>, <a class="el" href="struct__snippet_8py_source.xhtml#l00095">openage.convert.dataformat.struct_snippet.StructSnippet::__hash__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00096">openage.convert.dataformat.content_snippet.ContentSnippet::__hash__()</a>, <a class="el" href="hash_8cpp_source.xhtml#l00107">openage::util::Siphash::digest()</a>, <a class="el" href="glyph__atlas_8cpp_source.xhtml#l00093">openage::renderer::GlyphAtlas::get_cache_key()</a>, and <a class="el" href="font_8h_source.xhtml#l00201">std::hash&lt; openage::renderer::font_description &gt;::operator()()</a>.</p>
<div id="dynsection-21" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-21-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-21-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-21-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a3cb605abe74b26763ac7340c3785656a_cgraph.svg" width="100%" height="366"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-22" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-22-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-22-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-22-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a3cb605abe74b26763ac7340c3785656a_icgraph.svg" width="100%" height="596"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a5cfc0e84830b5945b5731d2148eea3b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cfc0e84830b5945b5731d2148eea3b4">&#9670;&nbsp;</a></span>hash_combine()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::hash_combine </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>hash1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>hash2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a hash value as a combination of two other hashes. Can be called incrementally to create hash value from several variables. </p>

<p class="definition">Definition at line <a class="el" href="hash_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="hash_8cpp_source.xhtml">hash.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                                                {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="comment">// Taken from http://www.boost.org/doc/libs/1_55_0/doc/html/hash/reference.html#boost.hash_combine</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <span class="keywordflow">return</span> hash1 ^ (hash2 + 0x9e3779b9 + ((hash1 &lt;&lt; 6) + (hash1 &gt;&gt; 2)));</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="glyph__atlas_8cpp_source.xhtml#l00093">openage::renderer::GlyphAtlas::get_cache_key()</a>, and <a class="el" href="font_8h_source.xhtml#l00201">std::hash&lt; openage::renderer::font_description &gt;::operator()()</a>.</p>
<div id="dynsection-23" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-23-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-23-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-23-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a5cfc0e84830b5945b5731d2148eea3b4_icgraph.svg" width="100%" height="400"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a8cb190d6ba8c160e1453ff4379dd2dcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cb190d6ba8c160e1453ff4379dd2dcb">&#9670;&nbsp;</a></span>ignore_result()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::ignore_result </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Wrapping a function call with ignore_result makes it more clear to readers, compilers and linters that you are, in fact, ignoring the function's return value on purpose. </p>

<p class="definition">Definition at line <a class="el" href="language_8h_source.xhtml#l00038">38</a> of file <a class="el" href="language_8h_source.xhtml">language.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="error_2handlers_8cpp_source.xhtml#l00107">openage::error::sigsegv_handler()</a>.</p>
<div id="dynsection-24" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-24-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-24-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-24-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a8cb190d6ba8c160e1453ff4379dd2dcb_icgraph.svg" width="354" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ae411a50a0e24d32ab564979b2df6ed24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae411a50a0e24d32ab564979b2df6ed24">&#9670;&nbsp;</a></span>is_symbol()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::util::is_symbol </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns true if the address is the (exact) address of a symbol. </p>

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00136">136</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                 {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">if</span> (!initialized_symbol_handler_successfully) {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> symbol_name_win(addr).has_value();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    Dl_info addr_info;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (dladdr(addr, &amp;addr_info) == 0) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> (addr_info.dli_saddr == addr);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="setup_8cpp_source.xhtml#l00044">openage::pyinterface::add_py_if_component()</a>.</p>
<div id="dynsection-25" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-25-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-25-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-25-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ae411a50a0e24d32ab564979b2df6ed24_icgraph.svg" width="568" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a7e483e123bf554b630319eb3dd012c02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e483e123bf554b630319eb3dd012c02">&#9670;&nbsp;</a></span>mod() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::mod </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>modulo operation that guarantees to return positive values. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00032">32</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    T r = x % m;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> (r &lt; 0) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> r + m;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="profiler_8cpp_source.xhtml#l00087">openage::util::Profiler::draw_component_performance()</a>, <a class="el" href="input__manager_8cpp_source.xhtml#l00309">openage::input::InputManager::get_mod()</a>, <a class="el" href="tile_8cpp_source.xhtml#l00070">openage::coord::tile::get_pos_on_chunk()</a>, <a class="el" href="input_2event_8cpp_source.xhtml#l00127">openage::input::sdl_key()</a>, <a class="el" href="input_2event_8cpp_source.xhtml#l00110">openage::input::sdl_mod()</a>, <a class="el" href="input_2event_8cpp_source.xhtml#l00156">openage::input::sdl_mouse()</a>, <a class="el" href="input_2event_8cpp_source.xhtml#l00160">openage::input::sdl_mouse_up_down()</a>, <a class="el" href="input_2event_8cpp_source.xhtml#l00164">openage::input::sdl_wheel()</a>, <a class="el" href="text__to__event_8cpp_source.xhtml#l00076">openage::input::text_to_event()</a>, and <a class="el" href="vulkan_2shader__program_8h_source.xhtml#l00032">openage::renderer::vulkan::VlkShaderProgram::VlkShaderProgram()</a>.</p>
<div id="dynsection-26" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-26-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-26-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-26-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a7e483e123bf554b630319eb3dd012c02_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="aebb1428f079400b957bd2ce2fb8ad583"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebb1428f079400b957bd2ce2fb8ad583">&#9670;&nbsp;</a></span>mod() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , unsigned int modulo&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::mod </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>compiletime defined modulo function. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00047">47</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;           {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    T r = x % modulo;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (r &lt; 0) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> r + modulo;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="af3f37a72fc7fc649b471cff17733f7ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3f37a72fc7fc649b471cff17733f7ec">&#9670;&nbsp;</a></span>operator *() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N, typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, T&gt; openage::util::operator * </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scalar multiplication with swapped arguments </p>

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00258">258</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                                            {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> mat * a;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a759079d1391952faee3b693dba78382c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a759079d1391952faee3b693dba78382c">&#9670;&nbsp;</a></span>operator *() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N, typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, T&gt; openage::util::operator * </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scalar multiplication with swapped arguments for int. This was just added because otherwise the above float-multiplication function might not match to the template deduction. </p>

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00268">268</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                                  {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">return</span> mat * a;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="aa3949bf1d23f5c8446474135851399fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3949bf1d23f5c8446474135851399fc">&#9670;&nbsp;</a></span>operator *() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned F, typename N &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;std::is_arithmetic&lt;N&gt;::value, <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; &gt;::type constexpr openage::util::operator * </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const N &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> * N </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00440">440</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                                                               {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span> FixedPoint&lt;I, F&gt;::from_raw_value(lhs.get_raw_value() * rhs);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00224">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_raw_value()</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00234">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::get_raw_value()</a>.</p>
<div id="dynsection-27" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-27-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-27-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-27-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aa3949bf1d23f5c8446474135851399fc_cgraph.svg" width="386" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a976790c1ec88a9cce32a887ca49526db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a976790c1ec88a9cce32a887ca49526db">&#9670;&nbsp;</a></span>operator -() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator - </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> - <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00422">422</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                                                                                                {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">return</span> FixedPoint&lt;I, F&gt;::from_raw_value(lhs.get_raw_value() - rhs.get_raw_value());</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00224">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_raw_value()</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00234">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::get_raw_value()</a>.</p>
<div id="dynsection-28" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-28-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-28-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-28-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a976790c1ec88a9cce32a887ca49526db_cgraph.svg" width="384" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a0691ea67643c9ec3e8ef552a45583a81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0691ea67643c9ec3e8ef552a45583a81">&#9670;&nbsp;</a></span>operator -() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator - </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> - double </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00430">430</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                                                                                      {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">return</span> FixedPoint&lt;I, F&gt;{lhs} - FixedPoint&lt;I, F&gt;::from_double(rhs);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00192">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_double()</a>.</p>
<div id="dynsection-29" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-29-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-29-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-29-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a0691ea67643c9ec3e8ef552a45583a81_cgraph.svg" width="384" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4202ea3aad51da9bcef0572898fc7175"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4202ea3aad51da9bcef0572898fc7175">&#9670;&nbsp;</a></span>operator+() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> + <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00406">406</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                                                                                                {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">return</span> FixedPoint&lt;I, F&gt;::from_raw_value(lhs.get_raw_value() + rhs.get_raw_value());</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00224">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_raw_value()</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00234">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::get_raw_value()</a>.</p>
<div id="dynsection-30" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-30-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-30-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-30-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a4202ea3aad51da9bcef0572898fc7175_cgraph.svg" width="384" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4e4ab8c3700eebbe1f3367ea7aa4de17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e4ab8c3700eebbe1f3367ea7aa4de17">&#9670;&nbsp;</a></span>operator+() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> + double </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00414">414</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                                                                                      {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> FixedPoint&lt;I, F&gt;{lhs} + FixedPoint&lt;I, F&gt;::from_double(rhs);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00192">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_double()</a>.</p>
<div id="dynsection-31" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-31-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-31-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-31-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a4e4ab8c3700eebbe1f3367ea7aa4de17_cgraph.svg" width="384" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4e6ea5affdccd958479d0eba1b74ce0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e6ea5affdccd958479d0eba1b74ce0f">&#9670;&nbsp;</a></span>operator/()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned F, typename N &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const N &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> / N </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00459">459</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                                                                                {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">return</span> FixedPoint&lt;I, F&gt;::from_raw_value(<a class="code" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">div</a>(lhs.get_raw_value(), static_cast&lt;I&gt;(rhs)));</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a34ba6f7abd32acb48dfc6ad6efdc1bc8"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">openage::util::div</a></div><div class="ttdeci">constexpr T div(T x, T m)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00075">misc.h:75</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="misc_8h_source.xhtml#l00075">div()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00224">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_raw_value()</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00234">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::get_raw_value()</a>.</p>
<div id="dynsection-32" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-32-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-32-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-32-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a4e6ea5affdccd958479d0eba1b74ce0f_cgraph.svg" width="380" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a08c4ca36b7f1f7b60da3629f01635167"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08c4ca36b7f1f7b60da3629f01635167">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned decimals, unsigned w&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::util::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structopenage_1_1util_1_1_float_fixed.xhtml">FloatFixed</a>&lt; decimals, w &gt;&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="strings_8h_source.xhtml#l00034">34</a> of file <a class="el" href="strings_8h_source.xhtml">strings.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                                                                   {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    static_assert(decimals &lt; 50, &quot;Refusing to print float with &gt;= 50 decimals<span class="stringliteral">&quot;);</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">    static_assert(w &lt; 70, &quot;</span>Refusing to print <span class="keywordtype">float</span> with a width &gt;= 70<span class="stringliteral">&quot;);</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">    os.precision(decimals);</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">    os &lt;&lt; std::fixed;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">    if (w) {</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">        os &lt;&lt; std::setw(w);</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">    }</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">    os &lt;&lt; f.value;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">    return os;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral">}</span></div></div><!-- fragment -->
</div>
</div>
<a id="abe7e29a3d1ac620fb9d0eb6830be84cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe7e29a3d1ac620fb9d0eb6830be84cf">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::util::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_file.xhtml">File</a> &amp;&#160;</td>
          <td class="paramname"><em>file</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="file_8cpp_source.xhtml#l00124">124</a> of file <a class="el" href="file_8cpp_source.xhtml">file.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                                                              {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    stream &lt;&lt; <span class="stringliteral">&quot;File(&quot;</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    file.filelike-&gt;repr(stream);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    stream &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="file_8h_source.xhtml#l00107">openage::util::File::filelike</a>.</p>

</div>
</div>
<a id="aae7cd67becf8e8e8e0be8e54a12624d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae7cd67becf8e8e8e0be8e54a12624d3">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::util::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;&#160;</td>
          <td class="paramname"><em>path</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00349">349</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                                                              {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    stream &lt;&lt; <span class="stringliteral">&quot;Path(&quot;</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    path.fsobj-&gt;repr(stream);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    stream &lt;&lt; <span class="stringliteral">&quot;:&quot;</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;part : path.parts) {</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        stream &lt;&lt; <span class="stringliteral">&quot;/&quot;</span> &lt;&lt; part;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    stream &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">return</span> stream;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="util_2path_8h_source.xhtml#l00167">openage::util::Path::fsobj</a>, and <a class="el" href="util_2path_8h_source.xhtml#l00169">openage::util::Path::parts</a>.</p>

</div>
</div>
<a id="aa9a3ed91bb7f5c0fa51acf99e8bcba64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9a3ed91bb7f5c0fa51acf99e8bcba64">&#9670;&nbsp;</a></span>path_normalizer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::path_normalizer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Strip out ../ etc </p>

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;                                                                    {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    output.reserve(input.size());</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="comment">// normalize the path parts</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;part : input) {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keywordflow">if</span> (part == <span class="stringliteral">&quot;.&quot;</span> or part == <span class="stringliteral">&quot;&quot;</span>) {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        }</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (part == <span class="stringliteral">&quot;..&quot;</span>) {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a>(output.size() &gt; 0)) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                output.pop_back();</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        }</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            output.push_back(part);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div><div class="ttc" id="compiler_8h_xhtml_a217a0bd562b98ae8c2ffce44935351e1"><div class="ttname"><a href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a></div><div class="ttdeci">#define likely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00052">compiler.h:52</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="compiler_8h_source.xhtml#l00052">likely</a>.</p>

</div>
</div>
<a id="a16ef0fe69558a29af4a8d568f2b5b518"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16ef0fe69558a29af4a8d568f2b5b518">&#9670;&nbsp;</a></span>read_csv_file()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename lineformat &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;lineformat&gt; openage::util::read_csv_file </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>read a single csv file. call the destination struct .<a class="el" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill()</a> method for actually storing line data </p>

<p class="definition">Definition at line <a class="el" href="csv_8h_source.xhtml#l00182">182</a> of file <a class="el" href="csv_8h_source.xhtml">csv.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                                      {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    File csv = path.open();</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    std::vector&lt;lineformat&gt; ret;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordtype">size_t</span> line_count = 0;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;line : csv.get_lines()) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        line_count += 1;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment">// ignore comments and empty lines</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespaceopenage.xhtml#a0093da9e88fad4b564ffa3c2fed20f20a6438c669e0d0de98e6929c2cc0fac474">line</a>.empty() || <a class="code" href="namespaceopenage.xhtml#a0093da9e88fad4b564ffa3c2fed20f20a6438c669e0d0de98e6929c2cc0fac474">line</a>[0] == <span class="charliteral">&#39;#&#39;</span>) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        lineformat current_line_data;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// use the line copy to fill the current line struct.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordtype">int</span> error_column = current_line_data.fill(line);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span> (error_column != -1) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">throw</span> Error{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;Failed to read CSV file: &quot;</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                &lt;&lt; csv &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; line_count &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; error_column</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;: error parsing &quot;</span> &lt;&lt; <a class="code" href="namespaceopenage.xhtml#a0093da9e88fad4b564ffa3c2fed20f20a6438c669e0d0de98e6929c2cc0fac474">line</a></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            };</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        ret.push_back(current_line_data);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}</div><div class="ttc" id="namespaceopenage_xhtml_a0093da9e88fad4b564ffa3c2fed20f20a6438c669e0d0de98e6929c2cc0fac474"><div class="ttname"><a href="namespaceopenage.xhtml#a0093da9e88fad4b564ffa3c2fed20f20a6438c669e0d0de98e6929c2cc0fac474">openage::attack_formation::line</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="message_8h_source.xhtml#l00179">ERR</a>, <a class="el" href="file_8cpp_source.xhtml#l00101">openage::util::File::get_lines()</a>, <a class="el" href="namespaceopenage.xhtml#a0093da9e88fad4b564ffa3c2fed20f20a6438c669e0d0de98e6929c2cc0fac474">openage::line</a>, and <a class="el" href="util_2path_8cpp_source.xhtml#l00111">openage::util::Path::open()</a>.</p>
<div id="dynsection-33" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-33-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-33-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-33-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a16ef0fe69558a29af4a8d568f2b5b518_cgraph.svg" width="100%" height="574"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a1f21bbbe0a2bfda459aa086ee71f1abd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f21bbbe0a2bfda459aa086ee71f1abd">&#9670;&nbsp;</a></span>remove_from()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Container , class Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::remove_from </td>
          <td>(</td>
          <td class="paramtype">Container &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Function &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Filters items from a container which satisfy a certain predicate. </p>

<p class="definition">Definition at line <a class="el" href="algorithm_8h_source.xhtml#l00029">29</a> of file <a class="el" href="algorithm_8h_source.xhtml">algorithm.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                                                               {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>.erase(std::remove_if(std::begin(<a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>),</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                                   std::end(<a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                   std::forward&lt;Function&gt;(func)),</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                    std::end(<a class="code" href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">container</a>));</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1curve_1_1tests_xhtml_afc4e799a037edab37e1e35a74da593b7"><div class="ttname"><a href="namespaceopenage_1_1curve_1_1tests.xhtml#afc4e799a037edab37e1e35a74da593b7">openage::curve::tests::container</a></div><div class="ttdeci">void container()</div><div class="ttdef"><b>Definition:</b> <a href="container_8cpp_source.xhtml#l00205">container.cpp:205</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="container_8cpp_source.xhtml#l00205">openage::curve::tests::container()</a>.</p>
<div id="dynsection-34" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-34-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-34-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-34-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a1f21bbbe0a2bfda459aa086ee71f1abd_cgraph.svg" width="100%" height="583"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a7bc4421a5f0f57f3a0aba3f96eb8d19c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bc4421a5f0f57f3a0aba3f96eb8d19c">&#9670;&nbsp;</a></span>repr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::repr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>arg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>method that behaves similar to python's "repr". puts the string in quotes and escapes all sorts of stuff inside. </p>

<p class="definition">Definition at line <a class="el" href="repr_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="repr_8cpp_source.xhtml">repr.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                                     {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    std::string <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<span class="charliteral">&#39;&quot;&#39;</span>);</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">char</span> c : arg) {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="keywordflow">if</span> (c &gt;= 0x20 &amp;&amp; c &lt; 0x7f) {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;            <span class="comment">// printable</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;            <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;\\&#39;</span> || c == <span class="charliteral">&#39;&quot;&#39;</span>) {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                <span class="comment">// but it must be escaped</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;                <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<span class="charliteral">&#39;\\&#39;</span>);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;            }</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(c);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            <span class="comment">// non-printable</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<span class="charliteral">&#39;\\&#39;</span>);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<span class="charliteral">&#39;x&#39;</span>);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<a class="code" href="namespaceopenage_1_1util.xhtml#abd7c6427c843cb61f0892c36a58dabbf">HEX_DIGITS</a>[(c &amp; 0xf0) &gt;&gt; 4]);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<a class="code" href="namespaceopenage_1_1util.xhtml#abd7c6427c843cb61f0892c36a58dabbf">HEX_DIGITS</a>[(c &amp; 0x0f) &gt;&gt; 0]);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.push_back(<span class="charliteral">&#39;&quot;&#39;</span>);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abd7c6427c843cb61f0892c36a58dabbf"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abd7c6427c843cb61f0892c36a58dabbf">openage::util::HEX_DIGITS</a></div><div class="ttdeci">constexpr const char * HEX_DIGITS</div><div class="ttdef"><b>Definition:</b> <a href="repr_8cpp_source.xhtml#l00009">repr.cpp:9</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="repr_8cpp_source.xhtml#l00009">HEX_DIGITS</a>, and <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>.</p>

<p class="reference">Referenced by <a class="el" href="texture_8py_source.xhtml#l00106">openage.convert.texture.Texture::__init__()</a>, <a class="el" href="cab_8py_source.xhtml#l00229">openage.cabextract.cab.CABFile::__init__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00109">openage.convert.dataformat.content_snippet.ContentSnippet::__lt__()</a>, <a class="el" href="struct_8py_source.xhtml#l00029">openage.util.struct.NamedStructMeta::__new__()</a>, <a class="el" href="struct_8py_source.xhtml#l00222">openage.util.struct.FlagsMeta::__new__()</a>, <a class="el" href="wrapper_8py_source.xhtml#l00043">openage.util.fslike.wrapper.Wrapper::__repr__()</a>, <a class="el" href="path_8py_source.xhtml#l00073">openage.util.fslike.path.Path::__repr__()</a>, <a class="el" href="codegen_8py_source.xhtml#l00104">openage.codegen.codegen.CodegenDirWrapper::__repr__()</a>, <a class="el" href="members_8py_source.xhtml#l00127">openage.convert.dataformat.members.GroupMember::__repr__()</a>, <a class="el" href="wrapper_8py_source.xhtml#l00134">openage.util.fslike.wrapper.WriteBlocker::__repr__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00140">openage.convert.dataformat.content_snippet.ContentSnippet::__repr__()</a>, <a class="el" href="members_8py_source.xhtml#l00146">openage.convert.dataformat.members.IncludeMembers::__repr__()</a>, <a class="el" href="wrapper_8py_source.xhtml#l00146">openage.util.fslike.wrapper.Synchronizer::__repr__()</a>, <a class="el" href="wrapper_8py_source.xhtml#l00202">openage.util.fslike.wrapper.GuardedFile::__repr__()</a>, <a class="el" href="struct_8py_source.xhtml#l00208">openage.util.struct.NamedStruct::__repr__()</a>, <a class="el" href="struct_8py_source.xhtml#l00317">openage.util.struct.Flags::__repr__()</a>, <a class="el" href="union_8py_source.xhtml#l00039">openage.util.fslike.union.Union::__str__()</a>, <a class="el" href="colortable_8py_source.xhtml#l00080">openage.convert.colortable.ColorTable::__str__()</a>, <a class="el" href="struct__snippet_8py_source.xhtml#l00120">openage.convert.dataformat.struct_snippet.StructSnippet::__str__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00151">openage.convert.dataformat.content_snippet.ContentSnippet::__str__()</a>, <a class="el" href="struct__definition_8py_source.xhtml#l00226">openage.convert.dataformat.struct_definition.StructDefinition::__str__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00060">openage.convert.dataformat.content_snippet.ContentSnippet::add_required_snippets()</a>, <a class="el" href="bytequeue_8py_source.xhtml#l00049">openage.util.bytequeue.ByteQueue::append()</a>, <a class="el" href="bytequeue_8py_source.xhtml#l00111">openage.util.bytequeue.ByteBuffer::append()</a>, <a class="el" href="testing_8py_source.xhtml#l00025">openage.testing.testing::assert_value()</a>, <a class="el" href="input_2action_8cpp_source.xhtml#l00117">openage::input::ActionManager::create()</a>, <a class="el" href="generated__file_8py_source.xhtml#l00151">openage.convert.dataformat.generated_file.GeneratedFile::generate()</a>, <a class="el" href="data__definition_8py_source.xhtml#l00037">openage.convert.dataformat.data_definition.DataDefinition::generate_csv()</a>, <a class="el" href="union_8py_source.xhtml#l00138">openage.util.fslike.union.Union::list()</a>, <a class="el" href="config__file_8py_source.xhtml#l00018">openage.cvar.config_file::load_config_file()</a>, <a class="el" href="strings_8py_source.xhtml#l00085">openage.util.strings::lstrip_once()</a>, <a class="el" href="pyobject__tests_8cpp_source.xhtml#l00016">openage::pyinterface::tests::pyobject()</a>, <a class="el" href="exportable_8py_source.xhtml#l00182">openage.convert.dataformat.exportable.Exportable::read()</a>, <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>, and <a class="el" href="strings_8py_source.xhtml#l00099">openage.util.strings::rstrip_once()</a>.</p>
<div id="dynsection-35" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-35-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-35-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-35-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a7bc4421a5f0f57f3a0aba3f96eb8d19c_cgraph.svg" width="379" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-36" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-36-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-36-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-36-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a7bc4421a5f0f57f3a0aba3f96eb8d19c_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a656c9d55c02d291f899cdae14b356d7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a656c9d55c02d291f899cdae14b356d7a">&#9670;&nbsp;</a></span>rol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , int amount&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::rol </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>compiletime defined rotate left function </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00063">63</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;           {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    static_assert(<span class="keyword">sizeof</span>(T)*CHAR_BIT &gt; amount &amp;&amp; amount &gt; 0, <span class="stringliteral">&quot;invalid rotation amount&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> (x &lt;&lt; amount) | (x &gt;&gt; (<span class="keyword">sizeof</span>(T)*CHAR_BIT - amount));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="abeb6a94572d93a14498661545b8332ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeb6a94572d93a14498661545b8332ec">&#9670;&nbsp;</a></span>rstrip()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::rstrip </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of whitespace characters on the right of the string. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                       {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">size_t</span> strippedlen = <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(s);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">while</span> (strippedlen &gt; 0) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">if</span> (s[strippedlen - 1] == <span class="charliteral">&#39;\n&#39;</span> ||</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            s[strippedlen - 1] == <span class="charliteral">&#39; &#39;</span>  ||</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            s[strippedlen - 1] == <span class="charliteral">&#39;\t&#39;</span>) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            strippedlen -= 1;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    s[strippedlen] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> strippedlen;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="constexpr_8h_source.xhtml#l00030">openage::util::constexpr_::strlen()</a>.</p>

<p class="reference">Referenced by <a class="el" href="pefile_8py_source.xhtml#l00158">openage.convert.pefile.PEFile::__init__()</a>.</p>
<div id="dynsection-37" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-37-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-37-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-37-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_abeb6a94572d93a14498661545b8332ec_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-38" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-38-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-38-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-38-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_abeb6a94572d93a14498661545b8332ec_icgraph.svg" width="390" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a101479979c88a661de76a6e70fb2978b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a101479979c88a661de76a6e70fb2978b">&#9670;&nbsp;</a></span>safe_shift() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &lt; 0), T&gt;::type openage::util::safe_shift </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function that performs either a safe shift-right (amount &gt; 0), or a safe shift-left (amount &lt; 0). </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00062">62</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#aa341b7244c12ea3496bdcd56e226d791">safe_shiftright</a>&lt;-amount&gt;(value);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_aa341b7244c12ea3496bdcd56e226d791"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aa341b7244c12ea3496bdcd56e226d791">openage::util::safe_shiftright</a></div><div class="ttdeci">static constexpr std::enable_if&lt;(amount&lt; sizeof(T) *CHAR_BIT), T &gt;::type safe_shiftright(T value)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00050">fixed_point.h:50</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00043">safe_shiftright()</a>.</p>
<div id="dynsection-39" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-39-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-39-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-39-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a101479979c88a661de76a6e70fb2978b_cgraph.svg" width="315" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a5346916e27392c8a141e10890f42925e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5346916e27392c8a141e10890f42925e">&#9670;&nbsp;</a></span>safe_shift() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &gt;= 0), T&gt;::type openage::util::safe_shift </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00070">70</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                    {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> safe_shiftleft&lt;amount&gt;(value);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afe036a1f307dd739bb4855cb0b799f38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe036a1f307dd739bb4855cb0b799f38">&#9670;&nbsp;</a></span>safe_shiftleft()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount + (std::is_signed&lt;T&gt;::value ? 1 : 0) &lt; sizeof(T) * CHAR_BIT), T&gt;::type openage::util::safe_shiftleft </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function that performs a left shift without causing undefined behavior. regular left-shift is undefined if amount &gt;= bitwidth, or amount &gt;= bitwidth - 1 for signed integers. </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00028">28</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                        {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keyword">static_cast&lt;</span>typename std::make_unsigned&lt;T&gt;::type<span class="keyword">&gt;</span>(value) &lt;&lt; amount</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    );</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a1f37c9c7cfd9dbe87e3ce104476bbda4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f37c9c7cfd9dbe87e3ce104476bbda4">&#9670;&nbsp;</a></span>safe_shiftright() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &gt;= sizeof(T) * CHAR_BIT), T&gt;::type openage::util::safe_shiftright </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function that performs a right shift without causing undefined behavior. right-shift is usually undefined if amount &gt;= bit size. </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00043">43</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                         {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> value &lt; 0 ? -1 : 0;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="fixed__point_8h_source.xhtml#l00062">safe_shift()</a>.</p>
<div id="dynsection-40" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-40-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-40-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-40-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a1f37c9c7cfd9dbe87e3ce104476bbda4_icgraph.svg" width="315" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aa341b7244c12ea3496bdcd56e226d791"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa341b7244c12ea3496bdcd56e226d791">&#9670;&nbsp;</a></span>safe_shiftright() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &lt; sizeof(T) * CHAR_BIT), T&gt;::type openage::util::safe_shiftright </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00050">50</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                         {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> value &gt;&gt; amount;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a5546877ed3bcad568ab21989a40ec088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5546877ed3bcad568ab21989a40ec088">&#9670;&nbsp;</a></span>sformat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::sformat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>printf-style to-string formatting. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;                                        {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    std::string ret;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    va_list ap;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    va_start(ap, fmt);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">vsformat</a>(fmt, ap, ret);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    va_end(ap);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a042594ac67e652c429fba1eeb1bec6fa"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">openage::util::vsformat</a></div><div class="ttdeci">size_t vsformat(const char *fmt, va_list ap, std::string &amp;output)</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00032">strings.cpp:32</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="strings_8cpp_source.xhtml#l00032">vsformat()</a>.</p>

<p class="reference">Referenced by <a class="el" href="compiler_8cpp_source.xhtml#l00046">addr_to_string()</a>, <a class="el" href="test_8cpp_source.xhtml#l00041">openage::log::tests::demo()</a>, <a class="el" href="screenshot_8cpp_source.xhtml#l00032">openage::ScreenshotManager::gen_next_filename()</a>, <a class="el" href="game__spec_8cpp_source.xhtml#l00091">openage::GameSpec::get_texture()</a>, <a class="el" href="game__spec_8cpp_source.xhtml#l00329">openage::GameSpec::load_terrain()</a>, <a class="el" href="game__spec_8cpp_source.xhtml#l00192">openage::GameSpec::on_gamedata_loaded()</a>, and <a class="el" href="compiler_8cpp_source.xhtml#l00098">symbol_name()</a>.</p>
<div id="dynsection-41" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-41-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-41-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-41-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a5546877ed3bcad568ab21989a40ec088_cgraph.svg" width="358" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-42" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-42-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-42-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-42-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a5546877ed3bcad568ab21989a40ec088_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="abfc839970f77edd26fe675758a6ca1b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc839970f77edd26fe675758a6ca1b8">&#9670;&nbsp;</a></span>split() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ret_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>delimiter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ret_t&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Split a string at a delimiter, push the result back in an iterator. Why doesn't the fucking standard library have std::string::split(delimiter)? </p>

<p class="definition">Definition at line <a class="el" href="strings_8h_source.xhtml#l00088">88</a> of file <a class="el" href="strings_8h_source.xhtml">strings.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                                               {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    std::stringstream splitter;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    splitter.str(txt);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    std::string part;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">while</span> (std::getline(splitter, part, delimiter)) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        *<a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> = part;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>++;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="af74fec80080f6c627e5539bb20493ba0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af74fec80080f6c627e5539bb20493ba0">&#9670;&nbsp;</a></span>split() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; openage::util::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>delim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Split a string at a delimiter into a vector. Internally, uses the above iterator splitter. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00136">136</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                                                                 {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::vector&lt;std::string&gt; items;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// use the back inserter iterator and the templated split function.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespaceopenage_1_1util.xhtml#af74fec80080f6c627e5539bb20493ba0">split</a>(txt, delimiter, std::back_inserter(items));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> items;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_af74fec80080f6c627e5539bb20493ba0"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#af74fec80080f6c627e5539bb20493ba0">openage::util::split</a></div><div class="ttdeci">std::vector&lt; std::string &gt; split(const std::string &amp;txt, char delimiter)</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00136">strings.cpp:136</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="colortable_8py_source.xhtml#l00039">openage.convert.colortable.ColorTable::fill()</a>, <a class="el" href="gui__property__map_8cpp_source.xhtml#l00160">qtsdl::GuiPropertyMap::get_csv()</a>, <a class="el" href="util_2path_8cpp_source.xhtml#l00303">openage::util::Path::joinpath()</a>, <a class="el" href="directory_8cpp_source.xhtml#l00148">openage::util::fslike::Directory::mkdirs()</a>, <a class="el" href="codegen_8py_source.xhtml#l00266">openage.codegen.codegen::postprocess_write()</a>, <a class="el" href="cab_8py_source.xhtml#l00356">openage.cabextract.cab.CABFile::read_file_headers()</a>, <a class="el" href="hdlanguagefile_8py_source.xhtml#l00101">openage.convert.hdlanguagefile::read_hd_language_file()</a>, and <a class="el" href="files_8py_source.xhtml#l00054">openage.util.files::which()</a>.</p>
<div id="dynsection-43" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-43-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-43-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-43-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_af74fec80080f6c627e5539bb20493ba0_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="aa7f8fe5c3426ea9e4968ef9aa21660ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7f8fe5c3426ea9e4968ef9aa21660ae">&#9670;&nbsp;</a></span>split_escape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; openage::util::split_escape </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>delim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size_hint</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Split a string at a delimiter into a vector. size_hint is to give a predicted size of the vector already.</p>
<p>tokenizes txt by splitting it up to substrings at the deliminiters. "\n" is evaluated to '<br />
'; all other '\X' escape sequences are evaluated to literal X, including the deliminiter. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                                                                      {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// output vector</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;std::string&gt; items;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a>(size_hint)) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        items.reserve(size_hint);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#if HAVE_THREAD_LOCAL_STORAGE</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">static</span> thread_local std::vector&lt;char&gt; buf;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::vector&lt;char&gt; buf;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    buf.reserve(256);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// string reading pointer</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *r = txt.c_str();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// copy characters to buf, and a buf is emitted as a token</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// when the delimiter or end is reached.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// end of input string</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span> (*r == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            items.push_back(std::string{std::begin(buf), std::end(buf)});</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            buf.clear();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// delimiter found</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (*r == delim) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            items.push_back(std::string{std::begin(buf), std::end(buf)});</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            buf.clear();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            r++;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span> (*r == <span class="charliteral">&#39;\\&#39;</span>) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="comment">// an escaped char: increment the read pointer to point</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="comment">// at the escape code.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            r++;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// analyze the escape code</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">switch</span> (*r) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">case</span> <span class="charliteral">&#39;\0&#39;</span>:</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="comment">// string ended in the middle of an escape code</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="comment">// error!</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;string ends after escape&quot;</span>};</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">case</span> <span class="charliteral">&#39;n&#39;</span>:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="comment">// a newline</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                buf.push_back(<span class="charliteral">&#39;\n&#39;</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="comment">// the escape code already represents the literal</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="comment">// character (e.g.: &quot;\\&quot; = &#39;\&#39;, &quot;\,&quot; = &#39;,&#39;).</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        buf.push_back(*r);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        r++;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> items;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="ttc" id="compiler_8h_xhtml_a217a0bd562b98ae8c2ffce44935351e1"><div class="ttname"><a href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a></div><div class="ttdeci">#define likely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00052">compiler.h:52</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="message_8h_source.xhtml#l00179">ERR</a>, and <a class="el" href="compiler_8h_source.xhtml#l00052">likely</a>.</p>

<p class="reference">Referenced by <a class="el" href="texture__subinfo_8cpp_source.xhtml#l00010">openage::renderer::resources::Texture2dSubInfo::Texture2dSubInfo()</a>.</p>
<div id="dynsection-44" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-44-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-44-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-44-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aa7f8fe5c3426ea9e4968ef9aa21660ae_icgraph.svg" width="374" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aae9cd09351bc11ad2c9fcf701786340a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae9cd09351bc11ad2c9fcf701786340a">&#9670;&nbsp;</a></span>string_matches_pattern()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::util::string_matches_pattern </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pattern</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>returns true if str matches the basic globbing pattern in the pattern, '*' matches any number of characters, while all other characters are interpreted as literal. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00092">92</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                                                  {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (*pattern == <span class="charliteral">&#39;*&#39;</span>) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// skip all wildcard chars</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">while</span> (*pattern == <span class="charliteral">&#39;*&#39;</span>) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                pattern++;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// performance optimization: if the wildcard was the</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// last char of the pattern, it&#39;s a sure match.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">if</span> (*pattern == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">// search for all places in str that equal *pattern;</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="comment">// those are possible places of continuation.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">while</span> (*<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> != <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">if</span> (*<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> == *pattern) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">string_matches_pattern</a>(<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>, pattern)) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="comment">// no match was found</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span> (*<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> != *pattern) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment">// chars don&#39;t match</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> (*pattern == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="comment">// comparision done</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> += 1;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        pattern += 1;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_aae9cd09351bc11ad2c9fcf701786340a"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">openage::util::string_matches_pattern</a></div><div class="ttdeci">bool string_matches_pattern(const char *str, const char *pattern)</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00092">strings.cpp:92</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a4d2bbe46a5d10404c658b54f3b199551"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">openage::py::str</a></div><div class="ttdeci">Obj str(const std::string &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00331">pyobject.cpp:331</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pyobject_8cpp_source.xhtml#l00331">openage::py::str()</a>.</p>
<div id="dynsection-45" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-45-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-45-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-45-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aae9cd09351bc11ad2c9fcf701786340a_cgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ac6219374623d05b075782ea1adb09c0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6219374623d05b075782ea1adb09c0c">&#9670;&nbsp;</a></span>symbol_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="compiler_8h.xhtml#aea581b919984cda327632efe3d11f8b3">OAAPI</a> std::string openage::util::symbol_name </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>require_exact_addr</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>no_pure_addrs</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the (demangled) symbol name for a given address.</p>
<p>If no exact match can be found, if require_exact_addr == true (default): if no_pure_addrs == false (default): a pure hex address string is returned else: an empty string is returned if require_exact_addr == false: name of closest symbol + offset hex string is returned</p>
<p>pxd: string symbol_name(const void *addr) except + </p>

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                                                                     {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">auto</span> symbol_name_result = symbol_name_win(addr);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (!initialized_symbol_handler_successfully ||</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        !symbol_name_result.has_value()) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">return</span> no_pure_addrs ? <span class="stringliteral">&quot;&quot;</span> : <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(addr);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> symbol_name_result.value();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    Dl_info addr_info;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (dladdr(addr, &amp;addr_info) == 0) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">// dladdr has... failed.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">return</span> no_pure_addrs ? <span class="stringliteral">&quot;&quot;</span> : <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(addr);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordtype">size_t</span> symbol_offset = (size_t) addr - (<span class="keywordtype">size_t</span>) addr_info.dli_saddr;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> (addr_info.dli_sname == <span class="keyword">nullptr</span> or (symbol_offset != 0 and require_exact_addr)) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">return</span> no_pure_addrs ? <span class="stringliteral">&quot;&quot;</span> : <a class="code" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a>(addr);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span> (symbol_offset == 0) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="comment">// this is our symbol name.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a>(addr_info.dli_sname);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">util::sformat</a>(<span class="stringliteral">&quot;%s+0x%lx&quot;</span>,</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                                 <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a>(addr_info.dli_sname).c_str(),</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                                 symbol_offset);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a5546877ed3bcad568ab21989a40ec088"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">openage::util::sformat</a></div><div class="ttdeci">std::string sformat(const char *fmt,...)</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00020">strings.cpp:20</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abe26c67b0463cb53c33b0659ebb89370"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">openage::util::addr_to_string</a></div><div class="ttdeci">std::string addr_to_string(const void *addr)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00046">compiler.cpp:46</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aebed129b2a0773520cdd8d40b0f70318"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">openage::util::demangle</a></div><div class="ttdeci">std::string demangle(const char *symbol)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00025">compiler.cpp:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="compiler_8cpp_source.xhtml#l00046">addr_to_string()</a>, <a class="el" href="compiler_8cpp_source.xhtml#l00025">demangle()</a>, and <a class="el" href="strings_8cpp_source.xhtml#l00020">sformat()</a>.</p>

<p class="reference">Referenced by <a class="el" href="setup_8cpp_source.xhtml#l00044">openage::pyinterface::add_py_if_component()</a>, <a class="el" href="setup_8cpp_source.xhtml#l00073">openage::pyinterface::check()</a>, <a class="el" href="functional_8h_source.xhtml#l00111">openage::pyinterface::Func&lt; ReturnType, ArgTypes ... &gt;::check_fptr()</a>, and <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00268">openage::error::StackAnalyzer::get_symbols()</a>.</p>
<div id="dynsection-46" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-46-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-46-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-46-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ac6219374623d05b075782ea1adb09c0c_cgraph.svg" width="100%" height="416"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-47" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-47-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-47-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-47-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ac6219374623d05b075782ea1adb09c0c_icgraph.svg" width="100%" height="498"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ae9d6c19aadc0f6a1d502f42852172de0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9d6c19aadc0f6a1d502f42852172de0">&#9670;&nbsp;</a></span>uint64_to_array8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint8_t&gt; openage::util::uint64_to_array8 </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a uint64_t to an array of uint8_t. Uses little-endianness as default.</p>
<p>e.g (big-endian): 0x0123456789abcdef -&gt; {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef} e.g (little-endian): 0x0123456789abcdef -&gt; {0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01}</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>64 bit number to convert. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 8 bit number array. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00145">145</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                                              {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>(<a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>, 0);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (big_endian) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>; i++) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>[i] = (value &gt;&gt; ((7 - i) * 8)) &amp; 0xff;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>; i++) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>[i] = (value &gt;&gt; (i * 8)) &amp; 0xff;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a90bf47b9ae769862b60096e171e3204b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">openage::util::uint64_s</a></div><div class="ttdeci">static constexpr size_t uint64_s</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00094">misc.h:94</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>, and <a class="el" href="misc_8h_source.xhtml#l00094">uint64_s</a>.</p>

<p class="reference">Referenced by <a class="el" href="misc_8h_source.xhtml#l00222">array64_to_array8()</a>, <a class="el" href="misc__test_8cpp_source.xhtml#l00013">openage::util::tests::array_conversion()</a>, and <a class="el" href="hash_8cpp_source.xhtml#l00112">openage::util::Siphash::digest()</a>.</p>
<div id="dynsection-48" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-48-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-48-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-48-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ae9d6c19aadc0f6a1d502f42852172de0_cgraph.svg" width="566" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-49" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-49-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-49-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-49-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_ae9d6c19aadc0f6a1d502f42852172de0_icgraph.svg" width="530" height="170"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a3e9f9bfa57d843330bd6d4bf85397433"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e9f9bfa57d843330bd6d4bf85397433">&#9670;&nbsp;</a></span>utf8_decode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::utf8_decode </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopenage_1_1util.xhtml#a3d73b80bcbf615e6330df0017584f673">codepoint_t</a> *&#160;</td>
          <td class="paramname"><em>outbuf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>decodes a UTF-8 character string of given length</p>
<p>the results are written to outbuf. no leading 0 is written to outbuf (nor is one expected at s). outbuf MUST be large enough to hold all characters. to ensure that outbuf is large enough, it SHOULD have a size of at least len.</p>
<p>the number of actual unicode characters is returned. it might be anywhere in the range [len/4; len].</p>
<p>in case of decoding errors, the special unicode character 0xfffd is written.</p>
<p>code logic gratefully borrowed from rxvt-unicode. </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                                        {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">size_t</span> advance;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">wchar_t</span> w;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> = 0;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">while</span> (len &gt; 0) {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span> (s[0] &lt; 0x80) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment">// 1-byte (ASCII) character</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            w = *s;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            advance = 1;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (len &gt;= 2 &amp;&amp; s[0] &gt;= 0xc2 &amp;&amp; s[0] &lt;= 0xdf &amp;&amp; (s[1] &amp; 0xc0) == 0x80) {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="comment">// 2-byte character</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            w = ((s[0] &amp; 0x1f) &lt;&lt; 6) | (s[1] &amp; 0x3f);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            advance = 2;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (len &gt;= 3 &amp;&amp;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;              ((s[0] == 0xe0  &amp;&amp; s[1] &gt;= 0xa0 &amp;&amp; s[1] &lt;= 0xbf)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            || (s[0] &gt;= 0xe1 &amp;&amp; s[0] &lt;= 0xec &amp;&amp; s[1] &gt;= 0x80 &amp;&amp; s[1] &lt;= 0xbf)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            || (s[0] == 0xed &amp;&amp; s[1] &gt;= 0x80 &amp;&amp; s[1] &lt;= 0x9f)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            || (s[0] &gt;= 0xee &amp;&amp; s[0] &lt;= 0xef &amp;&amp; s[1] &gt;= 0x80 &amp;&amp; s[1] &lt;= 0xbf))</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            &amp;&amp; (s[2] &amp; 0xc0) == 0x80) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="comment">// 3-byte character</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            w = ((s[0] &amp; 0x0f) &lt;&lt; 12) | ((s[1] &amp; 0x3f) &lt;&lt; 6) | (s[2] &amp; 0x3f);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            advance = 3;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (len &gt;= 4 &amp;&amp;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;              ((s[0] == 0xf0 &amp;&amp; s[1] &gt;= 0x90 &amp;&amp; s[1] &lt;= 0xbf)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            || (s[0] &gt;= 0xf1 &amp;&amp; s[0] &lt;= 0xf3 &amp;&amp; s[1] &gt;= 0x80 &amp;&amp; s[1] &lt;= 0xbf)</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            || (s[0] == 0xf4 &amp;&amp; s[1] &gt;= 0x80 &amp;&amp; s[1] &lt;= 0x8f))</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            &amp;&amp; (s[2] &amp; 0xc0) == 0x80</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            &amp;&amp; (s[3] &amp; 0xc0) == 0x80) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// 4-byte character</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            w = ((s[0] &amp; 0x07) &lt;&lt; 18) | ((s[1] &amp; 0x3f) &lt;&lt; 12) | ((s[2] &amp; 0x3f) &lt;&lt; 6) | (s[3] &amp; 0x3f);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            advance = 4;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="comment">// decoding error; try with next byte</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            w = 0xfffd;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            advance = 1;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        len -= advance;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        s += advance;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        *outbuf++ = w;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>++;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8py_source.xhtml#l00044">openage.testing.testing::result()</a>.</p>
<div id="dynsection-50" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-50-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-50-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-50-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a3e9f9bfa57d843330bd6d4bf85397433_cgraph.svg" width="552" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aed7ef0b5ccf0d22a6329396d9a59f671"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed7ef0b5ccf0d22a6329396d9a59f671">&#9670;&nbsp;</a></span>utf8_encode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::utf8_encode </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>outbuf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>encodes one Unicode codepoint to a null-terminated UTF-8 character string. due to the nature of UTF-8, the result string is at most 4 bytes long. on error, the empty string is returned.</p>
<p>cp the codepoint outbuf a output char buffer. outbuf[0] to outbuf[4] MUST be writeable. outbuf[0] will ALWAYS be written to. returns the number of non-NULL bytes that have been written, i.e. strlen(outbuf) </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                                         {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">if</span> (cp &lt; 0) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="comment">// illegal codepoint (negative)</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        outbuf[0] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cp &lt; 0x80) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        outbuf[0] = cp;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        outbuf[1] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cp &lt; 0x800) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        outbuf[2] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        outbuf[1] = 0x80 | (cp &amp; 0x3f); cp &gt;&gt;= 6;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        outbuf[0] = 0xc0 | cp;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">return</span> 2;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cp &lt; 0x10000) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        outbuf[3] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        outbuf[2] = 0x80 | (cp &amp; 0x3f); cp &gt;&gt;= 6;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        outbuf[1] = 0x80 | (cp &amp; 0x3f); cp &gt;&gt;= 6;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        outbuf[0] = 0xe0 | cp;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> 3;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cp &lt; 0x200000) {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        outbuf[4] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        outbuf[3] = 0x80 | (cp &amp; 0x3f); cp &gt;&gt;= 6;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        outbuf[2] = 0x80 | (cp &amp; 0x3f); cp &gt;&gt;= 6;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        outbuf[1] = 0x80 | (cp &amp; 0x3f); cp &gt;&gt;= 6;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        outbuf[0] = 0xf0 | cp;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> 4;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// illegal codepoint: unicode is only defined up to 0x1fffff</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        outbuf[0] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="fds_8cpp_source.xhtml#l00065">openage::util::FD::putcp()</a>, and <a class="el" href="draw_8cpp_source.xhtml#l00022">openage::console::draw::to_opengl()</a>.</p>
<div id="dynsection-51" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-51-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-51-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-51-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_aed7ef0b5ccf0d22a6329396d9a59f671_icgraph.svg" width="100%" height="412"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a5519d25810f698275993214ce79016c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5519d25810f698275993214ce79016c7">&#9670;&nbsp;</a></span>utf8_last_char_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::utf8_last_char_size </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the length of the last character in a given UTF-8 string.</p>
<p>str the UTF-8 string returns the length of the last character in bytes </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                                      {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordtype">int</span> r = 0;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordtype">int</span> i = <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>) - 1;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">while</span> ((i &gt;= 0) &amp;&amp; (<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>[i] &amp; 0x80) &amp;&amp; !(<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>[i] &amp; 0x40)) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        i--;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        r++;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">if</span> (i &gt;= 0) {</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        r++;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a4d2bbe46a5d10404c658b54f3b199551"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">openage::py::str</a></div><div class="ttdeci">Obj str(const std::string &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00331">pyobject.cpp:331</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pyobject_8cpp_source.xhtml#l00331">openage::py::str()</a>, and <a class="el" href="constexpr_8h_source.xhtml#l00030">openage::util::constexpr_::strlen()</a>.</p>

<p class="reference">Referenced by <a class="el" href="unicode_8cpp_source.xhtml#l00167">utf8_pop_back()</a>.</p>
<div id="dynsection-52" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-52-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-52-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-52-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a5519d25810f698275993214ce79016c7_cgraph.svg" width="100%" height="361"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-53" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-53-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-53-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-53-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a5519d25810f698275993214ce79016c7_icgraph.svg" width="536" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a82a1e7bf14b6f49be2d5fe4ec89f920e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82a1e7bf14b6f49be2d5fe4ec89f920e">&#9670;&nbsp;</a></span>utf8_pop_back()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::utf8_pop_back </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>pops back (deletes) the last UTF-8 character in a std::string. </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00167">167</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                                   {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>.erase(<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>.size() - <a class="code" href="namespaceopenage_1_1util.xhtml#a5519d25810f698275993214ce79016c7">utf8_last_char_size</a>(&amp;<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>[0]));</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a5519d25810f698275993214ce79016c7"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5519d25810f698275993214ce79016c7">openage::util::utf8_last_char_size</a></div><div class="ttdeci">size_t utf8_last_char_size(char *str)</div><div class="ttdef"><b>Definition:</b> <a href="unicode_8cpp_source.xhtml#l00154">unicode.cpp:154</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a4d2bbe46a5d10404c658b54f3b199551"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">openage::py::str</a></div><div class="ttdeci">Obj str(const std::string &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00331">pyobject.cpp:331</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pyobject_8cpp_source.xhtml#l00331">openage::py::str()</a>, and <a class="el" href="unicode_8cpp_source.xhtml#l00154">utf8_last_char_size()</a>.</p>

<p class="reference">Referenced by <a class="el" href="console_8cpp_source.xhtml#l00058">openage::console::Console::register_to_engine()</a>.</p>
<div id="dynsection-54" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-54-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-54-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-54-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a82a1e7bf14b6f49be2d5fe4ec89f920e_cgraph.svg" width="100%" height="399"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
<div id="dynsection-55" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-55-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-55-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-55-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a82a1e7bf14b6f49be2d5fe4ec89f920e_icgraph.svg" width="363" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="af88424f642ef1ba4e6b2eb1c05ad8e3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af88424f642ef1ba4e6b2eb1c05ad8e3c">&#9670;&nbsp;</a></span>vector_extend() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::vector_extend </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>ext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extend a vector with elements, without destroying source one. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00239">239</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                                               {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    vec.reserve(vec.size() + ext.size());</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    vec.insert(std::end(vec), std::begin(ext), std::end(ext));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="directory_8cpp_source.xhtml#l00148">openage::util::fslike::Directory::mkdirs()</a>.</p>
<div id="dynsection-56" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-56-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-56-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-56-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_af88424f642ef1ba4e6b2eb1c05ad8e3c_icgraph.svg" width="559" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a9fb1a345070c4a9dd714eb2e8ac2951c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fb1a345070c4a9dd714eb2e8ac2951c">&#9670;&nbsp;</a></span>vector_extend() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::vector_extend </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>ext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00249">249</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                                          {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span> (vec.empty()) {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        vec = std::move(ext);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        vec.reserve(vec.size() + ext.size());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        std::move(std::begin(ext), std::end(ext), std::back_inserter(vec));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        ext.clear();</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">openage::move</a>.</p>

</div>
</div>
<a id="acd8f5a72ed6227f640eda13229878c6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd8f5a72ed6227f640eda13229878c6f">&#9670;&nbsp;</a></span>vector_remove_swap_end()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::vector_remove_swap_end </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove the given element index in the vector. May swap with the end element for efficient removing.</p>
<p>If the element is not in the vector, do nothing. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00268">268</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                           {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="comment">// is at the end</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span> (idx == vec.size() - 1) {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        vec.pop_back();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// is in the middle</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (idx &lt; vec.size()) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        std::swap(vec[idx], vec.back());</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        vec.pop_back();</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="audio__manager_8cpp_source.xhtml#l00163">openage::audio::AudioManager::audio_callback()</a>, and <a class="el" href="audio__manager_8cpp_source.xhtml#l00203">openage::audio::AudioManager::remove_sound()</a>.</p>
<div id="dynsection-57" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-57-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-57-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-57-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_acd8f5a72ed6227f640eda13229878c6f_icgraph.svg" width="602" height="150"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a042594ac67e652c429fba1eeb1bec6fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a042594ac67e652c429fba1eeb1bec6fa">&#9670;&nbsp;</a></span>vsformat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string size_t openage::util::vsformat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list&#160;</td>
          <td class="paramname"><em>ap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>printf-style valist-to-string formatting; the result is appended to output. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                                                {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#if HAVE_THREAD_LOCAL_STORAGE</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">static</span> thread_local std::vector&lt;char&gt; buf(64);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    std::vector&lt;char&gt; buf(64);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    va_list aq;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    va_copy(aq, ap);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">size_t</span> length = vsnprintf(buf.data(), buf.size(), fmt, aq);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    va_end(aq);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(length &gt;= buf.size())) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordtype">size_t</span> target_size = buf.size();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(target_size &lt; 64)) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            target_size = 64;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">while</span> (length &gt;= target_size) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            target_size *= 2;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        buf.resize(target_size);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        vsnprintf(buf.data(), buf.size(), fmt, ap);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    output.append(buf.data(), length);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> length;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="compiler_8h_source.xhtml#l00053">unlikely</a>.</p>

<p class="reference">Referenced by <a class="el" href="text_8cpp_source.xhtml#l00087">openage::renderer::TextRenderer::draw()</a>, <a class="el" href="engine_8cpp_source.xhtml#l00533">openage::Engine::render_text()</a>, and <a class="el" href="strings_8cpp_source.xhtml#l00020">sformat()</a>.</p>
<div id="dynsection-58" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-58-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-58-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-58-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_a042594ac67e652c429fba1eeb1bec6fa_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a5f6ab09d105c3dfecc8de7dfd7be7ca2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f6ab09d105c3dfecc8de7dfd7be7ca2">&#9670;&nbsp;</a></span>empty_string</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::empty_string</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>global empty string, sometimes needed as return value in some <code>std::string &amp;function()</code> return values. </p>

<p class="definition">Definition at line <a class="el" href="misc_8cpp_source.xhtml#l00008">8</a> of file <a class="el" href="misc_8cpp_source.xhtml">misc.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="util_2path_8cpp_source.xhtml#l00252">openage::util::Path::get_name()</a>.</p>

</div>
</div>
<a id="abd7c6427c843cb61f0892c36a58dabbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd7c6427c843cb61f0892c36a58dabbf">&#9670;&nbsp;</a></span>HEX_DIGITS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const char* openage::util::HEX_DIGITS = &quot;0123456789abcdef&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="repr_8cpp_source.xhtml#l00009">9</a> of file <a class="el" href="repr_8cpp_source.xhtml">repr.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="repr_8cpp_source.xhtml#l00012">repr()</a>.</p>

</div>
</div>
<a id="a90bf47b9ae769862b60096e171e3204b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90bf47b9ae769862b60096e171e3204b">&#9670;&nbsp;</a></span>uint64_s</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t openage::util::uint64_s = 8</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00094">94</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="misc_8h_source.xhtml#l00170">array64_size()</a>, <a class="el" href="misc_8h_source.xhtml#l00222">array64_to_array8()</a>, <a class="el" href="misc_8h_source.xhtml#l00190">array8_to_array64()</a>, <a class="el" href="misc_8h_source.xhtml#l00111">array8_to_uint64()</a>, and <a class="el" href="misc_8h_source.xhtml#l00145">uint64_to_array8()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1util.xhtml">util</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
