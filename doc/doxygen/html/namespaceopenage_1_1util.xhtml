<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: openage::util Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1util.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">openage::util Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1bytequeue"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1bytequeue.xhtml">bytequeue</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1compress"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1compress.xhtml">compress</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1constexpr__"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1constexpr__.xhtml">constexpr_</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1context"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1context.xhtml">context</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1decorators"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1decorators.xhtml">decorators</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1filelike"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1filelike.xhtml">filelike</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1files"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1files.xhtml">files</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1fslike"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1fslike.xhtml">fslike</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1fsprinting"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1fsprinting.xhtml">fsprinting</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1iterators"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1iterators.xhtml">iterators</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1math"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1math.xhtml">math</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1profiler"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1profiler.xhtml">profiler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1strings"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1strings.xhtml">strings</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1struct"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1struct.xhtml">struct</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1system"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1system.xhtml">system</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1tests"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml">tests</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceopenage_1_1util_1_1threading"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1threading.xhtml">threading</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_cachable_o_s_stream.xhtml">CachableOSStream</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1col.xhtml">col</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1color.xhtml">color</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1component__time__data.xhtml">component_time_data</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_const_init_vector.xhtml">ConstInitVector</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1csv__subdata.xhtml">csv_subdata</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_c_s_v_collection.xhtml">CSVCollection</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_enum.xhtml">Enum</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_enum_value.xhtml">EnumValue</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_external_o_string_stream.xhtml">ExternalOStringStream</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_external_profiler.xhtml">ExternalProfiler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_external_string_buf.xhtml">ExternalStringBuf</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_f_d.xhtml">FD</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_file.xhtml">File</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1_float_fixed.xhtml">FloatFixed</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_formatter.xhtml">Formatter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_frame_counter.xhtml">FrameCounter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_f_string.xhtml">FString</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_function_ptr.xhtml">FunctionPtr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1less.xhtml">less</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_on_de_init.xhtml">OnDeInit</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_on_init.xhtml">OnInit</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_profiler.xhtml">Profiler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">SharedPtrLess</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_siphash.xhtml">Siphash</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_string_formatter.xhtml">StringFormatter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_timer.xhtml">Timer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1utf8__decoder.xhtml">utf8_decoder</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_variable.xhtml">Variable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_variable_base.xhtml">VariableBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:aa62f335908f8f5e68345cb3386ab94c6"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:aa62f335908f8f5e68345cb3386ab94c6"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa62f335908f8f5e68345cb3386ab94c6">Matrix2t</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 2, 2, T &gt;</td></tr>
<tr class="separator:aa62f335908f8f5e68345cb3386ab94c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a748106aeb16275c1ebf6f0f9276381cd"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:a748106aeb16275c1ebf6f0f9276381cd"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a748106aeb16275c1ebf6f0f9276381cd">Matrix3t</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 3, 3, T &gt;</td></tr>
<tr class="separator:a748106aeb16275c1ebf6f0f9276381cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5976ba79c39027e28f3f02458e93e38"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:ae5976ba79c39027e28f3f02458e93e38"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ae5976ba79c39027e28f3f02458e93e38">Matrix4t</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 4, 4, T &gt;</td></tr>
<tr class="separator:ae5976ba79c39027e28f3f02458e93e38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af077ef0b2ea660c4044917c60c4f0385"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N&gt; </td></tr>
<tr class="memitem:af077ef0b2ea660c4044917c60c4f0385"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af077ef0b2ea660c4044917c60c4f0385">Matrixf</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, float &gt;</td></tr>
<tr class="separator:af077ef0b2ea660c4044917c60c4f0385"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21feb2f799e75fd645e0d663ec4712f9"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N&gt; </td></tr>
<tr class="memitem:a21feb2f799e75fd645e0d663ec4712f9"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a21feb2f799e75fd645e0d663ec4712f9">Matrixd</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, double &gt;</td></tr>
<tr class="separator:a21feb2f799e75fd645e0d663ec4712f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00694c43ac6582c643b2591d420ce472"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 2, 2, float &gt;</td></tr>
<tr class="separator:a00694c43ac6582c643b2591d420ce472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa417153128f83c6b7ee0b42efc418aa"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">Matrix3f</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 3, 3, float &gt;</td></tr>
<tr class="separator:aaa417153128f83c6b7ee0b42efc418aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd42b418dc20fcb64677b2f75ecd97b8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">Matrix4f</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 4, 4, float &gt;</td></tr>
<tr class="separator:afd42b418dc20fcb64677b2f75ecd97b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94d988fc19451e9042116f14432ec1b6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a94d988fc19451e9042116f14432ec1b6">Matrix2d</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 2, 2, double &gt;</td></tr>
<tr class="separator:a94d988fc19451e9042116f14432ec1b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a157c43b340256c0f1124074fae7aa807"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a157c43b340256c0f1124074fae7aa807">Matrix3d</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 3, 3, double &gt;</td></tr>
<tr class="separator:a157c43b340256c0f1124074fae7aa807"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06158fd9e1e05c74de527f554486f2b6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a06158fd9e1e05c74de527f554486f2b6">Matrix4d</a> = <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; 4, 4, double &gt;</td></tr>
<tr class="separator:a06158fd9e1e05c74de527f554486f2b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0edd3e6d8ddf01c639814c3f2cb83fc"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> = <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt; float &gt;</td></tr>
<tr class="separator:ac0edd3e6d8ddf01c639814c3f2cb83fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6fb313e7100659b50538dadeb6fb0f3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ad6fb313e7100659b50538dadeb6fb0f3">Quaterniond</a> = <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt; double &gt;</td></tr>
<tr class="separator:ad6fb313e7100659b50538dadeb6fb0f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d73b80bcbf615e6330df0017584f673"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3d73b80bcbf615e6330df0017584f673">codepoint_t</a> = int32_t</td></tr>
<tr class="separator:a3d73b80bcbf615e6330df0017584f673"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b7551617f7e81afd786778a18a6e115"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:a3b7551617f7e81afd786778a18a6e115"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3b7551617f7e81afd786778a18a6e115">Vector2t</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 2, T &gt;</td></tr>
<tr class="separator:a3b7551617f7e81afd786778a18a6e115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ae1eb4098bce6a746a8b5474bf76d12"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:a2ae1eb4098bce6a746a8b5474bf76d12"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a2ae1eb4098bce6a746a8b5474bf76d12">Vector3t</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 3, T &gt;</td></tr>
<tr class="separator:a2ae1eb4098bce6a746a8b5474bf76d12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab85260365ee607e213b044335a3c4ac2"><td class="memTemplParams" colspan="2">template&lt;typename T  = float&gt; </td></tr>
<tr class="memitem:ab85260365ee607e213b044335a3c4ac2"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ab85260365ee607e213b044335a3c4ac2">Vector4t</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 4, T &gt;</td></tr>
<tr class="separator:ab85260365ee607e213b044335a3c4ac2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a412362dd7eb21295a62e2c22031ac77c"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a412362dd7eb21295a62e2c22031ac77c"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a412362dd7eb21295a62e2c22031ac77c">Vectorf</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; N, float &gt;</td></tr>
<tr class="separator:a412362dd7eb21295a62e2c22031ac77c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a333446966cecccc963bdaa41f5395339"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a333446966cecccc963bdaa41f5395339"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a333446966cecccc963bdaa41f5395339">Vectord</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; N, double &gt;</td></tr>
<tr class="separator:a333446966cecccc963bdaa41f5395339"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a285db29af032ad3b2a79f810faaf65d3"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a285db29af032ad3b2a79f810faaf65d3">Vector2f</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 2, float &gt;</td></tr>
<tr class="separator:a285db29af032ad3b2a79f810faaf65d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7bb49fe673b7a4d72fb6fb91aba44c8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 3, float &gt;</td></tr>
<tr class="separator:ab7bb49fe673b7a4d72fb6fb91aba44c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3c02e2c02d3b68c87d58b867e609bbf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af3c02e2c02d3b68c87d58b867e609bbf">Vector4f</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 4, float &gt;</td></tr>
<tr class="separator:af3c02e2c02d3b68c87d58b867e609bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5759baf587738b4365920f5b944b0088"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">Vector2d</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 2, double &gt;</td></tr>
<tr class="separator:a5759baf587738b4365920f5b944b0088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa92edd0399f568ff984de550f094c9d"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aaa92edd0399f568ff984de550f094c9d">Vector3d</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 3, double &gt;</td></tr>
<tr class="separator:aaa92edd0399f568ff984de550f094c9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8c841be325b73ea41a31e63bc2013dd"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af8c841be325b73ea41a31e63bc2013dd">Vector4d</a> = <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt; 4, double &gt;</td></tr>
<tr class="separator:af8c841be325b73ea41a31e63bc2013dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ac6f34c002692bc844cd70de03e10bc5d"><td class="memTemplParams" colspan="2">template&lt;class Container , class Function &gt; </td></tr>
<tr class="memitem:ac6f34c002692bc844cd70de03e10bc5d"><td class="memTemplItemLeft" align="right" valign="top">Function&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac6f34c002692bc844cd70de03e10bc5d">for_each</a> (Container &amp;&amp;container, Function &amp;&amp;func)</td></tr>
<tr class="separator:ac6f34c002692bc844cd70de03e10bc5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f21bbbe0a2bfda459aa086ee71f1abd"><td class="memTemplParams" colspan="2">template&lt;class Container , class Function &gt; </td></tr>
<tr class="memitem:a1f21bbbe0a2bfda459aa086ee71f1abd"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a1f21bbbe0a2bfda459aa086ee71f1abd">remove_from</a> (Container &amp;container, Function &amp;&amp;func)</td></tr>
<tr class="separator:a1f21bbbe0a2bfda459aa086ee71f1abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebed129b2a0773520cdd8d40b0f70318"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">demangle</a> (const char *symbol)</td></tr>
<tr class="separator:aebed129b2a0773520cdd8d40b0f70318"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe26c67b0463cb53c33b0659ebb89370"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abe26c67b0463cb53c33b0659ebb89370">addr_to_string</a> (const void *addr)</td></tr>
<tr class="separator:abe26c67b0463cb53c33b0659ebb89370"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6219374623d05b075782ea1adb09c0c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">symbol_name</a> (const void *addr, bool require_exact_addr, bool no_pure_addrs)</td></tr>
<tr class="separator:ac6219374623d05b075782ea1adb09c0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae411a50a0e24d32ab564979b2df6ed24"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ae411a50a0e24d32ab564979b2df6ed24">is_symbol</a> (const void *addr)</td></tr>
<tr class="separator:ae411a50a0e24d32ab564979b2df6ed24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ef0fe69558a29af4a8d568f2b5b518"><td class="memTemplParams" colspan="2">template&lt;typename lineformat &gt; </td></tr>
<tr class="memitem:a16ef0fe69558a29af4a8d568f2b5b518"><td class="memTemplItemLeft" align="right" valign="top">std::vector&lt; lineformat &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a16ef0fe69558a29af4a8d568f2b5b518">read_csv_file</a> (const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;path)</td></tr>
<tr class="separator:a16ef0fe69558a29af4a8d568f2b5b518"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe7e29a3d1ac620fb9d0eb6830be84cf"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abe7e29a3d1ac620fb9d0eb6830be84cf">operator&lt;&lt;</a> (std::ostream &amp;stream, const <a class="el" href="classopenage_1_1util_1_1_file.xhtml">File</a> &amp;file)</td></tr>
<tr class="separator:abe7e29a3d1ac620fb9d0eb6830be84cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe036a1f307dd739bb4855cb0b799f38"><td class="memTemplParams" colspan="2">template&lt;unsigned int amount, typename T &gt; </td></tr>
<tr class="memitem:afe036a1f307dd739bb4855cb0b799f38"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount+(std::is_signed&lt; T &gt;::value ? 1 :0)&lt; sizeof(T) *CHAR_BIT), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#afe036a1f307dd739bb4855cb0b799f38">safe_shiftleft</a> (T value)</td></tr>
<tr class="separator:afe036a1f307dd739bb4855cb0b799f38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f37c9c7cfd9dbe87e3ce104476bbda4"><td class="memTemplParams" colspan="2">template&lt;unsigned int amount, typename T &gt; </td></tr>
<tr class="memitem:a1f37c9c7cfd9dbe87e3ce104476bbda4"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount &gt;=sizeof(T) *CHAR_BIT), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">safe_shiftright</a> (T value)</td></tr>
<tr class="separator:a1f37c9c7cfd9dbe87e3ce104476bbda4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa341b7244c12ea3496bdcd56e226d791"><td class="memTemplParams" colspan="2">template&lt;unsigned int amount, typename T &gt; </td></tr>
<tr class="memitem:aa341b7244c12ea3496bdcd56e226d791"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount&lt; sizeof(T) *CHAR_BIT), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa341b7244c12ea3496bdcd56e226d791">safe_shiftright</a> (T value)</td></tr>
<tr class="separator:aa341b7244c12ea3496bdcd56e226d791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a101479979c88a661de76a6e70fb2978b"><td class="memTemplParams" colspan="2">template&lt;int amount, typename T &gt; </td></tr>
<tr class="memitem:a101479979c88a661de76a6e70fb2978b"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount&lt; 0), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a101479979c88a661de76a6e70fb2978b">safe_shift</a> (T value)</td></tr>
<tr class="separator:a101479979c88a661de76a6e70fb2978b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5346916e27392c8a141e10890f42925e"><td class="memTemplParams" colspan="2">template&lt;int amount, typename T &gt; </td></tr>
<tr class="memitem:a5346916e27392c8a141e10890f42925e"><td class="memTemplItemLeft" align="right" valign="top">static constexpr std::enable_if&lt;(amount &gt;=0), T &gt;::type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5346916e27392c8a141e10890f42925e">safe_shift</a> (T value)</td></tr>
<tr class="separator:a5346916e27392c8a141e10890f42925e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4202ea3aad51da9bcef0572898fc7175"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a4202ea3aad51da9bcef0572898fc7175"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a4202ea3aad51da9bcef0572898fc7175">operator+</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;rhs)</td></tr>
<tr class="separator:a4202ea3aad51da9bcef0572898fc7175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e4ab8c3700eebbe1f3367ea7aa4de17"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a4e4ab8c3700eebbe1f3367ea7aa4de17"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a4e4ab8c3700eebbe1f3367ea7aa4de17">operator+</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a4e4ab8c3700eebbe1f3367ea7aa4de17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a976790c1ec88a9cce32a887ca49526db"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a976790c1ec88a9cce32a887ca49526db"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a976790c1ec88a9cce32a887ca49526db">operator -</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;rhs)</td></tr>
<tr class="separator:a976790c1ec88a9cce32a887ca49526db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0691ea67643c9ec3e8ef552a45583a81"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned int F&gt; </td></tr>
<tr class="memitem:a0691ea67643c9ec3e8ef552a45583a81"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a0691ea67643c9ec3e8ef552a45583a81">operator -</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;lhs, const double &amp;rhs)</td></tr>
<tr class="separator:a0691ea67643c9ec3e8ef552a45583a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3949bf1d23f5c8446474135851399fc"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned F, typename N &gt; </td></tr>
<tr class="memitem:aa3949bf1d23f5c8446474135851399fc"><td class="memTemplItemLeft" align="right" valign="top">std::enable_if&lt; std::is_arithmetic&lt; N &gt;::value, <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &gt;::type constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">operator *</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; lhs, const N &amp;rhs)</td></tr>
<tr class="separator:aa3949bf1d23f5c8446474135851399fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e6ea5affdccd958479d0eba1b74ce0f"><td class="memTemplParams" colspan="2">template&lt;typename I , unsigned F, typename N &gt; </td></tr>
<tr class="memitem:a4e6ea5affdccd958479d0eba1b74ce0f"><td class="memTemplItemLeft" align="right" valign="top">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a4e6ea5affdccd958479d0eba1b74ce0f">operator/</a> (const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; lhs, const N &amp;rhs)</td></tr>
<tr class="separator:a4e6ea5affdccd958479d0eba1b74ce0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cfc0e84830b5945b5731d2148eea3b4"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5cfc0e84830b5945b5731d2148eea3b4">hash_combine</a> (size_t hash1, size_t hash2)</td></tr>
<tr class="separator:a5cfc0e84830b5945b5731d2148eea3b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cb605abe74b26763ac7340c3785656a"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">hash</a> (const uint64_t key[2], const uint8_t *data, size_t len_data)</td></tr>
<tr class="separator:a3cb605abe74b26763ac7340c3785656a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cb190d6ba8c160e1453ff4379dd2dcb"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8cb190d6ba8c160e1453ff4379dd2dcb"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a8cb190d6ba8c160e1453ff4379dd2dcb">ignore_result</a> (T)</td></tr>
<tr class="separator:a8cb190d6ba8c160e1453ff4379dd2dcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3f37a72fc7fc649b471cff17733f7ec"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N, typename T &gt; </td></tr>
<tr class="memitem:af3f37a72fc7fc649b471cff17733f7ec"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af3f37a72fc7fc649b471cff17733f7ec">operator *</a> (T a, const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;mat)</td></tr>
<tr class="separator:af3f37a72fc7fc649b471cff17733f7ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a759079d1391952faee3b693dba78382c"><td class="memTemplParams" colspan="2">template&lt;size_t M, size_t N, typename T &gt; </td></tr>
<tr class="memitem:a759079d1391952faee3b693dba78382c"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a759079d1391952faee3b693dba78382c">operator *</a> (int64_t a, const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;mat)</td></tr>
<tr class="separator:a759079d1391952faee3b693dba78382c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e483e123bf554b630319eb3dd012c02"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7e483e123bf554b630319eb3dd012c02"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a7e483e123bf554b630319eb3dd012c02">mod</a> (T x, T m)</td></tr>
<tr class="separator:a7e483e123bf554b630319eb3dd012c02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebb1428f079400b957bd2ce2fb8ad583"><td class="memTemplParams" colspan="2">template&lt;typename T , unsigned int modulo&gt; </td></tr>
<tr class="memitem:aebb1428f079400b957bd2ce2fb8ad583"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aebb1428f079400b957bd2ce2fb8ad583">mod</a> (T x)</td></tr>
<tr class="separator:aebb1428f079400b957bd2ce2fb8ad583"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a656c9d55c02d291f899cdae14b356d7a"><td class="memTemplParams" colspan="2">template&lt;typename T , int amount&gt; </td></tr>
<tr class="memitem:a656c9d55c02d291f899cdae14b356d7a"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a656c9d55c02d291f899cdae14b356d7a">rol</a> (T x)</td></tr>
<tr class="separator:a656c9d55c02d291f899cdae14b356d7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34ba6f7abd32acb48dfc6ad6efdc1bc8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a34ba6f7abd32acb48dfc6ad6efdc1bc8"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">div</a> (T x, T m)</td></tr>
<tr class="separator:a34ba6f7abd32acb48dfc6ad6efdc1bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69b6ecf2b5119f11c33d2b5b89cec86c"><td class="memItemLeft" align="right" valign="top">uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a> (const uint8_t *start, size_t count, bool big_endian=false)</td></tr>
<tr class="separator:a69b6ecf2b5119f11c33d2b5b89cec86c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9d6c19aadc0f6a1d502f42852172de0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a> (const uint64_t value, bool big_endian=false)</td></tr>
<tr class="separator:ae9d6c19aadc0f6a1d502f42852172de0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abab1bbea3efd69cf8087a807b5b5f8f2"><td class="memItemLeft" align="right" valign="top">constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">array64_size</a> (size_t count)</td></tr>
<tr class="separator:abab1bbea3efd69cf8087a807b5b5f8f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa30219231e1ac7a89ef5d1fb44894e9e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint64_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a> (const uint8_t *start, size_t count, bool big_endian=false)</td></tr>
<tr class="separator:aa30219231e1ac7a89ef5d1fb44894e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9f52b617e7434a421cd5f9de448b600"><td class="memItemLeft" align="right" valign="top">std::vector&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a> (const uint64_t *start, size_t count, bool big_endian=false)</td></tr>
<tr class="separator:af9f52b617e7434a421cd5f9de448b600"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af88424f642ef1ba4e6b2eb1c05ad8e3c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af88424f642ef1ba4e6b2eb1c05ad8e3c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af88424f642ef1ba4e6b2eb1c05ad8e3c">vector_extend</a> (std::vector&lt; T &gt; &amp;vec, const std::vector&lt; T &gt; &amp;ext)</td></tr>
<tr class="separator:af88424f642ef1ba4e6b2eb1c05ad8e3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fb1a345070c4a9dd714eb2e8ac2951c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9fb1a345070c4a9dd714eb2e8ac2951c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a9fb1a345070c4a9dd714eb2e8ac2951c">vector_extend</a> (std::vector&lt; T &gt; &amp;vec, std::vector&lt; T &gt; &amp;&amp;ext)</td></tr>
<tr class="separator:a9fb1a345070c4a9dd714eb2e8ac2951c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd8f5a72ed6227f640eda13229878c6f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acd8f5a72ed6227f640eda13229878c6f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#acd8f5a72ed6227f640eda13229878c6f">vector_remove_swap_end</a> (std::vector&lt; T &gt; &amp;vec, size_t idx)</td></tr>
<tr class="separator:acd8f5a72ed6227f640eda13229878c6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72bef8f3b092e74cf890a38611b9bbc0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a72bef8f3b092e74cf890a38611b9bbc0">gl_check_error</a> ()</td></tr>
<tr class="separator:a72bef8f3b092e74cf890a38611b9bbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9a3ed91bb7f5c0fa51acf99e8bcba64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa9a3ed91bb7f5c0fa51acf99e8bcba64">path_normalizer</a> (<a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;output, const <a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;input)</td></tr>
<tr class="separator:aa9a3ed91bb7f5c0fa51acf99e8bcba64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae7cd67becf8e8e8e0be8e54a12624d3"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aae7cd67becf8e8e8e0be8e54a12624d3">operator&lt;&lt;</a> (std::ostream &amp;stream, const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;path)</td></tr>
<tr class="separator:aae7cd67becf8e8e8e0be8e54a12624d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a664e0be1f5d2f4d1e1a624f6f4a5f0c1"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a> (const std::string &amp;fullpath)</td></tr>
<tr class="separator:a664e0be1f5d2f4d1e1a624f6f4a5f0c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954be5116f7af5633dbbc50bac26b0a8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a954be5116f7af5633dbbc50bac26b0a8">dirname</a> (const std::string &amp;fullpath)</td></tr>
<tr class="separator:a954be5116f7af5633dbbc50bac26b0a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7bc4421a5f0f57f3a0aba3f96eb8d19c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a7bc4421a5f0f57f3a0aba3f96eb8d19c">repr</a> (const std::string &amp;arg)</td></tr>
<tr class="separator:a7bc4421a5f0f57f3a0aba3f96eb8d19c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5546877ed3bcad568ab21989a40ec088"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5546877ed3bcad568ab21989a40ec088">sformat</a> (const char *fmt,...)</td></tr>
<tr class="separator:a5546877ed3bcad568ab21989a40ec088"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a042594ac67e652c429fba1eeb1bec6fa"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">vsformat</a> (const char *fmt, va_list ap, std::string &amp;output)</td></tr>
<tr class="separator:a042594ac67e652c429fba1eeb1bec6fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a854794aef09b81dbec641eca208a66d7"><td class="memItemLeft" align="right" valign="top">std::unique_ptr&lt; char[]&gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">copy_string</a> (const char *s)</td></tr>
<tr class="separator:a854794aef09b81dbec641eca208a66d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb6a94572d93a14498661545b8332ec"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abeb6a94572d93a14498661545b8332ec">rstrip</a> (char *s)</td></tr>
<tr class="separator:abeb6a94572d93a14498661545b8332ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae9cd09351bc11ad2c9fcf701786340a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">string_matches_pattern</a> (const char *str, const char *pattern)</td></tr>
<tr class="separator:aae9cd09351bc11ad2c9fcf701786340a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af74fec80080f6c627e5539bb20493ba0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#af74fec80080f6c627e5539bb20493ba0">split</a> (const std::string &amp;txt, char delimiter)</td></tr>
<tr class="separator:af74fec80080f6c627e5539bb20493ba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7f8fe5c3426ea9e4968ef9aa21660ae"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aa7f8fe5c3426ea9e4968ef9aa21660ae">split_escape</a> (const std::string &amp;txt, char delim, size_t size_hint)</td></tr>
<tr class="separator:aa7f8fe5c3426ea9e4968ef9aa21660ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08c4ca36b7f1f7b60da3629f01635167"><td class="memTemplParams" colspan="2">template&lt;unsigned decimals, unsigned w&gt; </td></tr>
<tr class="memitem:a08c4ca36b7f1f7b60da3629f01635167"><td class="memTemplItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a08c4ca36b7f1f7b60da3629f01635167">operator&lt;&lt;</a> (std::ostream &amp;os, <a class="el" href="structopenage_1_1util_1_1_float_fixed.xhtml">FloatFixed</a>&lt; decimals, w &gt; f)</td></tr>
<tr class="separator:a08c4ca36b7f1f7b60da3629f01635167"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfc839970f77edd26fe675758a6ca1b8"><td class="memTemplParams" colspan="2">template&lt;typename ret_t &gt; </td></tr>
<tr class="memitem:abfc839970f77edd26fe675758a6ca1b8"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abfc839970f77edd26fe675758a6ca1b8">split</a> (const std::string &amp;txt, char delimiter, ret_t result)</td></tr>
<tr class="separator:abfc839970f77edd26fe675758a6ca1b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac99f61e1d0c06d9b83650a71cff2f02f"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#ac99f61e1d0c06d9b83650a71cff2f02f">get_current_thread_id</a> ()</td></tr>
<tr class="separator:ac99f61e1d0c06d9b83650a71cff2f02f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e9f9bfa57d843330bd6d4bf85397433"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a3e9f9bfa57d843330bd6d4bf85397433">utf8_decode</a> (const unsigned char *s, size_t len, int32_t *outbuf)</td></tr>
<tr class="separator:a3e9f9bfa57d843330bd6d4bf85397433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed7ef0b5ccf0d22a6329396d9a59f671"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#aed7ef0b5ccf0d22a6329396d9a59f671">utf8_encode</a> (int cp, char *outbuf)</td></tr>
<tr class="separator:aed7ef0b5ccf0d22a6329396d9a59f671"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5519d25810f698275993214ce79016c7"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5519d25810f698275993214ce79016c7">utf8_last_char_size</a> (char *str)</td></tr>
<tr class="separator:a5519d25810f698275993214ce79016c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82a1e7bf14b6f49be2d5fe4ec89f920e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a82a1e7bf14b6f49be2d5fe4ec89f920e">utf8_pop_back</a> (std::string &amp;str)</td></tr>
<tr class="separator:a82a1e7bf14b6f49be2d5fe4ec89f920e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a5f6ab09d105c3dfecc8de7dfd7be7ca2"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a5f6ab09d105c3dfecc8de7dfd7be7ca2">empty_string</a></td></tr>
<tr class="separator:a5f6ab09d105c3dfecc8de7dfd7be7ca2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90bf47b9ae769862b60096e171e3204b"><td class="memItemLeft" align="right" valign="top">static constexpr size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a> = 8</td></tr>
<tr class="separator:a90bf47b9ae769862b60096e171e3204b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd7c6427c843cb61f0892c36a58dabbf"><td class="memItemLeft" align="right" valign="top">constexpr const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util.xhtml#abd7c6427c843cb61f0892c36a58dabbf">HEX_DIGITS</a> = &quot;0123456789abcdef&quot;</td></tr>
<tr class="separator:abd7c6427c843cb61f0892c36a58dabbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="a3d73b80bcbf615e6330df0017584f673"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d73b80bcbf615e6330df0017584f673">&#9670;&nbsp;</a></span>codepoint_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a3d73b80bcbf615e6330df0017584f673">openage::util::codepoint_t</a> = typedef int32_t</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="unicode_8h_source.xhtml#l00015">15</a> of file <a class="el" href="unicode_8h_source.xhtml">unicode.h</a>.</p>

</div>
</div>
<a id="a94d988fc19451e9042116f14432ec1b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94d988fc19451e9042116f14432ec1b6">&#9670;&nbsp;</a></span>Matrix2d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a94d988fc19451e9042116f14432ec1b6">openage::util::Matrix2d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;2, 2, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00291">291</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a00694c43ac6582c643b2591d420ce472"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00694c43ac6582c643b2591d420ce472">&#9670;&nbsp;</a></span>Matrix2f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">openage::util::Matrix2f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;2, 2, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00287">287</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="aa62f335908f8f5e68345cb3386ab94c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa62f335908f8f5e68345cb3386ab94c6">&#9670;&nbsp;</a></span>Matrix2t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#aa62f335908f8f5e68345cb3386ab94c6">openage::util::Matrix2t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;2, 2, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00273">273</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a157c43b340256c0f1124074fae7aa807"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a157c43b340256c0f1124074fae7aa807">&#9670;&nbsp;</a></span>Matrix3d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a157c43b340256c0f1124074fae7aa807">openage::util::Matrix3d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;3, 3, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00292">292</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="aaa417153128f83c6b7ee0b42efc418aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa417153128f83c6b7ee0b42efc418aa">&#9670;&nbsp;</a></span>Matrix3f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">openage::util::Matrix3f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;3, 3, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00288">288</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a748106aeb16275c1ebf6f0f9276381cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a748106aeb16275c1ebf6f0f9276381cd">&#9670;&nbsp;</a></span>Matrix3t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a748106aeb16275c1ebf6f0f9276381cd">openage::util::Matrix3t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;3, 3, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00276">276</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a06158fd9e1e05c74de527f554486f2b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06158fd9e1e05c74de527f554486f2b6">&#9670;&nbsp;</a></span>Matrix4d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a06158fd9e1e05c74de527f554486f2b6">openage::util::Matrix4d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;4, 4, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00293">293</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="afd42b418dc20fcb64677b2f75ecd97b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd42b418dc20fcb64677b2f75ecd97b8">&#9670;&nbsp;</a></span>Matrix4f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">openage::util::Matrix4f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;4, 4, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00289">289</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="ae5976ba79c39027e28f3f02458e93e38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5976ba79c39027e28f3f02458e93e38">&#9670;&nbsp;</a></span>Matrix4t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ae5976ba79c39027e28f3f02458e93e38">openage::util::Matrix4t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;4, 4, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00279">279</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a21feb2f799e75fd645e0d663ec4712f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21feb2f799e75fd645e0d663ec4712f9">&#9670;&nbsp;</a></span>Matrixd</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a21feb2f799e75fd645e0d663ec4712f9">openage::util::Matrixd</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00285">285</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="af077ef0b2ea660c4044917c60c4f0385"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af077ef0b2ea660c4044917c60c4f0385">&#9670;&nbsp;</a></span>Matrixf</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#af077ef0b2ea660c4044917c60c4f0385">openage::util::Matrixf</a> = typedef <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00282">282</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="ad6fb313e7100659b50538dadeb6fb0f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6fb313e7100659b50538dadeb6fb0f3">&#9670;&nbsp;</a></span>Quaterniond</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ad6fb313e7100659b50538dadeb6fb0f3">openage::util::Quaterniond</a> = typedef <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt;double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quaternion_8h_source.xhtml#l00436">436</a> of file <a class="el" href="quaternion_8h_source.xhtml">quaternion.h</a>.</p>

</div>
</div>
<a id="ac0edd3e6d8ddf01c639814c3f2cb83fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0edd3e6d8ddf01c639814c3f2cb83fc">&#9670;&nbsp;</a></span>Quaternionf</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">openage::util::Quaternionf</a> = typedef <a class="el" href="classopenage_1_1util_1_1_quaternion.xhtml">Quaternion</a>&lt;float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quaternion_8h_source.xhtml#l00435">435</a> of file <a class="el" href="quaternion_8h_source.xhtml">quaternion.h</a>.</p>

</div>
</div>
<a id="a5759baf587738b4365920f5b944b0088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5759baf587738b4365920f5b944b0088">&#9670;&nbsp;</a></span>Vector2d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">openage::util::Vector2d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;2, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00225">225</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a285db29af032ad3b2a79f810faaf65d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a285db29af032ad3b2a79f810faaf65d3">&#9670;&nbsp;</a></span>Vector2f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a285db29af032ad3b2a79f810faaf65d3">openage::util::Vector2f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;2, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00221">221</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a3b7551617f7e81afd786778a18a6e115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b7551617f7e81afd786778a18a6e115">&#9670;&nbsp;</a></span>Vector2t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a3b7551617f7e81afd786778a18a6e115">openage::util::Vector2t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;2, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00207">207</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="aaa92edd0399f568ff984de550f094c9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa92edd0399f568ff984de550f094c9d">&#9670;&nbsp;</a></span>Vector3d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#aaa92edd0399f568ff984de550f094c9d">openage::util::Vector3d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;3, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00226">226</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="ab7bb49fe673b7a4d72fb6fb91aba44c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7bb49fe673b7a4d72fb6fb91aba44c8">&#9670;&nbsp;</a></span>Vector3f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">openage::util::Vector3f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;3, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00222">222</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a2ae1eb4098bce6a746a8b5474bf76d12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ae1eb4098bce6a746a8b5474bf76d12">&#9670;&nbsp;</a></span>Vector3t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a2ae1eb4098bce6a746a8b5474bf76d12">openage::util::Vector3t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;3, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00210">210</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="af8c841be325b73ea41a31e63bc2013dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8c841be325b73ea41a31e63bc2013dd">&#9670;&nbsp;</a></span>Vector4d</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#af8c841be325b73ea41a31e63bc2013dd">openage::util::Vector4d</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;4, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00227">227</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="af3c02e2c02d3b68c87d58b867e609bbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3c02e2c02d3b68c87d58b867e609bbf">&#9670;&nbsp;</a></span>Vector4f</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#af3c02e2c02d3b68c87d58b867e609bbf">openage::util::Vector4f</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;4, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00223">223</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="ab85260365ee607e213b044335a3c4ac2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab85260365ee607e213b044335a3c4ac2">&#9670;&nbsp;</a></span>Vector4t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T  = float&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#ab85260365ee607e213b044335a3c4ac2">openage::util::Vector4t</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;4, T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00213">213</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a333446966cecccc963bdaa41f5395339"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a333446966cecccc963bdaa41f5395339">&#9670;&nbsp;</a></span>Vectord</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a333446966cecccc963bdaa41f5395339">openage::util::Vectord</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;N, double&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00219">219</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<a id="a412362dd7eb21295a62e2c22031ac77c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a412362dd7eb21295a62e2c22031ac77c">&#9670;&nbsp;</a></span>Vectorf</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1util.xhtml#a412362dd7eb21295a62e2c22031ac77c">openage::util::Vectorf</a> = typedef <a class="el" href="classopenage_1_1util_1_1_vector.xhtml">Vector</a>&lt;N, float&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector_8h_source.xhtml#l00216">216</a> of file <a class="el" href="vector_8h_source.xhtml">vector.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="abe26c67b0463cb53c33b0659ebb89370"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe26c67b0463cb53c33b0659ebb89370">&#9670;&nbsp;</a></span>addr_to_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::addr_to_string </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00046">46</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>

</div>
</div>
<a id="abab1bbea3efd69cf8087a807b5b5f8f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abab1bbea3efd69cf8087a807b5b5f8f2">&#9670;&nbsp;</a></span>array64_size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t openage::util::array64_size </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the number of uint64-elements that result from converting a count-sized uint8_t array.</p>
<p>Used to determine the size for <a class="el" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64()</a></p>
<dl class="section return"><dt>Returns</dt><dd>ceil(count/8) </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00170">170</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="af9f52b617e7434a421cd5f9de448b600"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9f52b617e7434a421cd5f9de448b600">&#9670;&nbsp;</a></span>array64_to_array8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint8_t&gt; openage::util::array64_to_array8 </td>
          <td>(</td>
          <td class="paramtype">const uint64_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a C-style array of uint64_t to a std::vector of uint8_t. Uses little-endianness as default.</p>
<p>e.g (big-endian): 0x0123456789abcdef -&gt; {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef} e.g (little-endian): 0x0123456789abcdef -&gt; {0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01}</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Start</td><td>of the input data. </td></tr>
    <tr><td class="paramname">count</td><td>Number of uint64_t to convert. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 8 bit number vector. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00222">222</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="aa30219231e1ac7a89ef5d1fb44894e9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa30219231e1ac7a89ef5d1fb44894e9e">&#9670;&nbsp;</a></span>array8_to_array64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint64_t&gt; openage::util::array8_to_array64 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a C-style array of uint8_t to a std::vector of uint64_t. Uses little-endianness as default. Fills the remaining bytes of the last uint64_t with zeroes.</p>
<p>e.g (big-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0123456700000000 e.g (little-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0000000067452301</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>Start of the input data. </td></tr>
    <tr><td class="paramname">count</td><td>Number of bytes to convert. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 64 bit number vector. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00190">190</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="a69b6ecf2b5119f11c33d2b5b89cec86c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69b6ecf2b5119f11c33d2b5b89cec86c">&#9670;&nbsp;</a></span>array8_to_uint64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t openage::util::array8_to_uint64 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a C-style array of uint8_t to a uint64_t. Uses little-endianness as default. Fills the remaining bytes with zeroes.</p>
<p>e.g (big-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0123456700000000 e.g (little-endian): {0x01, 0x23, 0x45, 0x67} -&gt; 0x0000000067452301</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>Pointer to start of the input data. </td></tr>
    <tr><td class="paramname">count</td><td>Number of bytes to read. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 64 bit number. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00111">111</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="a854794aef09b81dbec641eca208a66d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a854794aef09b81dbec641eca208a66d7">&#9670;&nbsp;</a></span>copy_string()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_ptr&lt; char[]&gt; openage::util::copy_string </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copies the given string to the returned unique_ptr, including 0 byte. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00064">64</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<a id="aebed129b2a0773520cdd8d40b0f70318"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebed129b2a0773520cdd8d40b0f70318">&#9670;&nbsp;</a></span>demangle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::demangle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>symbol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Demangles a symbol name.</p>
<p>On failure, the mangled symbol name is returned. </p>

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>

</div>
</div>
<a id="a954be5116f7af5633dbbc50bac26b0a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a954be5116f7af5633dbbc50bac26b0a8">&#9670;&nbsp;</a></span>dirname()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::dirname </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fullpath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>return the head (dirname) part of a path. </p>

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00374">374</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>

</div>
</div>
<a id="a34ba6f7abd32acb48dfc6ad6efdc1bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34ba6f7abd32acb48dfc6ad6efdc1bc8">&#9670;&nbsp;</a></span>div()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::div </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>implements the 'correct' version of the division operator, which always rounds to -inf </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00075">75</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="a664e0be1f5d2f4d1e1a624f6f4a5f0c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">&#9670;&nbsp;</a></span>filename()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::filename </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fullpath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>get the filename (last part) of a given path </p>

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00364">364</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>

</div>
</div>
<a id="ac6f34c002692bc844cd70de03e10bc5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6f34c002692bc844cd70de03e10bc5d">&#9670;&nbsp;</a></span>for_each()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Container , class Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Function openage::util::for_each </td>
          <td>(</td>
          <td class="paramtype">Container &amp;&amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Function &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>std::for_each except just on containers. </p>

<p class="definition">Definition at line <a class="el" href="algorithm_8h_source.xhtml#l00017">17</a> of file <a class="el" href="algorithm_8h_source.xhtml">algorithm.h</a>.</p>

</div>
</div>
<a id="ac99f61e1d0c06d9b83650a71cff2f02f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac99f61e1d0c06d9b83650a71cff2f02f">&#9670;&nbsp;</a></span>get_current_thread_id()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::get_current_thread_id </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the unique identifier of the current thread.</p>
<p>For compilers with support for thread_local storage, the function also guarantees to return strictly monotonically increasing identifier (no collision). </p>

<p class="definition">Definition at line <a class="el" href="thread__id_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="thread__id_8cpp_source.xhtml">thread_id.cpp</a>.</p>

</div>
</div>
<a id="a72bef8f3b092e74cf890a38611b9bbc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72bef8f3b092e74cf890a38611b9bbc0">&#9670;&nbsp;</a></span>gl_check_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::gl_check_error </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>query the current opengl context for any errors.</p>
<p>raises exceptions on any error. </p>

<p class="definition">Definition at line <a class="el" href="opengl_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="opengl_8cpp_source.xhtml">opengl.cpp</a>.</p>

</div>
</div>
<a id="a3cb605abe74b26763ac7340c3785656a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cb605abe74b26763ac7340c3785656a">&#9670;&nbsp;</a></span>hash()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint64_t openage::util::hash </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>key</em>[2], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint8_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len_data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_siphash.xhtml">Siphash</a> implementation</p>
<p><a href="https://131002.net/siphash/">https://131002.net/siphash/</a> </p>

<p class="definition">Definition at line <a class="el" href="hash_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="hash_8cpp_source.xhtml">hash.cpp</a>.</p>

</div>
</div>
<a id="a5cfc0e84830b5945b5731d2148eea3b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cfc0e84830b5945b5731d2148eea3b4">&#9670;&nbsp;</a></span>hash_combine()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::hash_combine </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>hash1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>hash2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Creates a hash value as a combination of two other hashes. Can be called incrementally to create hash value from several variables. </p>

<p class="definition">Definition at line <a class="el" href="hash_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="hash_8cpp_source.xhtml">hash.cpp</a>.</p>

</div>
</div>
<a id="a8cb190d6ba8c160e1453ff4379dd2dcb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8cb190d6ba8c160e1453ff4379dd2dcb">&#9670;&nbsp;</a></span>ignore_result()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::ignore_result </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Wrapping a function call with ignore_result makes it more clear to readers, compilers and linters that you are, in fact, ignoring the function's return value on purpose. </p>

<p class="definition">Definition at line <a class="el" href="language_8h_source.xhtml#l00038">38</a> of file <a class="el" href="language_8h_source.xhtml">language.h</a>.</p>

</div>
</div>
<a id="ae411a50a0e24d32ab564979b2df6ed24"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae411a50a0e24d32ab564979b2df6ed24">&#9670;&nbsp;</a></span>is_symbol()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::util::is_symbol </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>addr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns true if the address is the (exact) address of a symbol. </p>

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00136">136</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>

</div>
</div>
<a id="a7e483e123bf554b630319eb3dd012c02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e483e123bf554b630319eb3dd012c02">&#9670;&nbsp;</a></span>mod() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::mod </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>modulo operation that guarantees to return positive values. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00032">32</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="aebb1428f079400b957bd2ce2fb8ad583"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebb1428f079400b957bd2ce2fb8ad583">&#9670;&nbsp;</a></span>mod() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , unsigned int modulo&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::mod </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>compiletime defined modulo function. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00047">47</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="af3f37a72fc7fc649b471cff17733f7ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3f37a72fc7fc649b471cff17733f7ec">&#9670;&nbsp;</a></span>operator *() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N, typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, T&gt; openage::util::operator * </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scalar multiplication with swapped arguments </p>

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00258">258</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="a759079d1391952faee3b693dba78382c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a759079d1391952faee3b693dba78382c">&#9670;&nbsp;</a></span>operator *() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t M, size_t N, typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt;M, N, T&gt; openage::util::operator * </td>
          <td>(</td>
          <td class="paramtype">int64_t&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a>&lt; M, N, T &gt; &amp;&#160;</td>
          <td class="paramname"><em>mat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scalar multiplication with swapped arguments for int. This was just added because otherwise the above float-multiplication function might not match to the template deduction. </p>

<p class="definition">Definition at line <a class="el" href="matrix_8h_source.xhtml#l00268">268</a> of file <a class="el" href="matrix_8h_source.xhtml">matrix.h</a>.</p>

</div>
</div>
<a id="aa3949bf1d23f5c8446474135851399fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3949bf1d23f5c8446474135851399fc">&#9670;&nbsp;</a></span>operator *() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned F, typename N &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::enable_if&lt;std::is_arithmetic&lt;N&gt;::value, <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; &gt;::type constexpr openage::util::operator * </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const N &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> * N </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00440">440</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a976790c1ec88a9cce32a887ca49526db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a976790c1ec88a9cce32a887ca49526db">&#9670;&nbsp;</a></span>operator -() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator - </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> - <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00422">422</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a0691ea67643c9ec3e8ef552a45583a81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0691ea67643c9ec3e8ef552a45583a81">&#9670;&nbsp;</a></span>operator -() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator - </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> - double </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00430">430</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a4202ea3aad51da9bcef0572898fc7175"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4202ea3aad51da9bcef0572898fc7175">&#9670;&nbsp;</a></span>operator+() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> + <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00406">406</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a4e4ab8c3700eebbe1f3367ea7aa4de17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e4ab8c3700eebbe1f3367ea7aa4de17">&#9670;&nbsp;</a></span>operator+() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned int F&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> + double </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00414">414</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a4e6ea5affdccd958479d0eba1b74ce0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e6ea5affdccd958479d0eba1b74ce0f">&#9670;&nbsp;</a></span>operator/()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename I , unsigned F, typename N &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;I, F&gt; openage::util::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt; I, F &gt;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const N &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p><a class="el" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> / N </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00459">459</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a08c4ca36b7f1f7b60da3629f01635167"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08c4ca36b7f1f7b60da3629f01635167">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned decimals, unsigned w&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::util::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structopenage_1_1util_1_1_float_fixed.xhtml">FloatFixed</a>&lt; decimals, w &gt;&#160;</td>
          <td class="paramname"><em>f</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="strings_8h_source.xhtml#l00034">34</a> of file <a class="el" href="strings_8h_source.xhtml">strings.h</a>.</p>

</div>
</div>
<a id="abe7e29a3d1ac620fb9d0eb6830be84cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe7e29a3d1ac620fb9d0eb6830be84cf">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::util::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_file.xhtml">File</a> &amp;&#160;</td>
          <td class="paramname"><em>file</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="file_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="file_8cpp_source.xhtml">file.cpp</a>.</p>

</div>
</div>
<a id="aae7cd67becf8e8e8e0be8e54a12624d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae7cd67becf8e8e8e0be8e54a12624d3">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; openage::util::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;&#160;</td>
          <td class="paramname"><em>path</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00349">349</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>

</div>
</div>
<a id="aa9a3ed91bb7f5c0fa51acf99e8bcba64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9a3ed91bb7f5c0fa51acf99e8bcba64">&#9670;&nbsp;</a></span>path_normalizer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::path_normalizer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_path.xhtml#a45bb33ddb21332a423a5788fc9ee8462">Path::parts_t</a> &amp;&#160;</td>
          <td class="paramname"><em>input</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Strip out ../ etc </p>

<p class="definition">Definition at line <a class="el" href="util_2path_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="util_2path_8cpp_source.xhtml">path.cpp</a>.</p>

</div>
</div>
<a id="a16ef0fe69558a29af4a8d568f2b5b518"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16ef0fe69558a29af4a8d568f2b5b518">&#9670;&nbsp;</a></span>read_csv_file()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename lineformat &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;lineformat&gt; openage::util::read_csv_file </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1util_1_1_path.xhtml">Path</a> &amp;&#160;</td>
          <td class="paramname"><em>path</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>read a single csv file. call the destination struct .<a class="el" href="namespaceopenage_1_1rng_1_1tests.xhtml#a7c865b312f955cab3ff9ea078fd0cc95">fill()</a> method for actually storing line data </p>

<p class="definition">Definition at line <a class="el" href="csv_8h_source.xhtml#l00182">182</a> of file <a class="el" href="csv_8h_source.xhtml">csv.h</a>.</p>

</div>
</div>
<a id="a1f21bbbe0a2bfda459aa086ee71f1abd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f21bbbe0a2bfda459aa086ee71f1abd">&#9670;&nbsp;</a></span>remove_from()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Container , class Function &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::remove_from </td>
          <td>(</td>
          <td class="paramtype">Container &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Function &amp;&amp;&#160;</td>
          <td class="paramname"><em>func</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Filters items from a container which satisfy a certain predicate. </p>

<p class="definition">Definition at line <a class="el" href="algorithm_8h_source.xhtml#l00028">28</a> of file <a class="el" href="algorithm_8h_source.xhtml">algorithm.h</a>.</p>

</div>
</div>
<a id="a7bc4421a5f0f57f3a0aba3f96eb8d19c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7bc4421a5f0f57f3a0aba3f96eb8d19c">&#9670;&nbsp;</a></span>repr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::repr </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>arg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>method that behaves similar to python's "repr". puts the string in quotes and escapes all sorts of stuff inside. </p>

<p class="definition">Definition at line <a class="el" href="repr_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="repr_8cpp_source.xhtml">repr.cpp</a>.</p>

</div>
</div>
<a id="a656c9d55c02d291f899cdae14b356d7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a656c9d55c02d291f899cdae14b356d7a">&#9670;&nbsp;</a></span>rol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , int amount&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">constexpr T openage::util::rol </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>compiletime defined rotate left function </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00063">63</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="abeb6a94572d93a14498661545b8332ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeb6a94572d93a14498661545b8332ec">&#9670;&nbsp;</a></span>rstrip()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::rstrip </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of whitespace characters on the right of the string. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<a id="a101479979c88a661de76a6e70fb2978b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a101479979c88a661de76a6e70fb2978b">&#9670;&nbsp;</a></span>safe_shift() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &lt; 0), T&gt;::type openage::util::safe_shift </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function that performs either a safe shift-right (amount &gt; 0), or a safe shift-left (amount &lt; 0). </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00062">62</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a5346916e27392c8a141e10890f42925e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5346916e27392c8a141e10890f42925e">&#9670;&nbsp;</a></span>safe_shift() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &gt;= 0), T&gt;::type openage::util::safe_shift </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00070">70</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="afe036a1f307dd739bb4855cb0b799f38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe036a1f307dd739bb4855cb0b799f38">&#9670;&nbsp;</a></span>safe_shiftleft()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount + (std::is_signed&lt;T&gt;::value ? 1 : 0) &lt; sizeof(T) * CHAR_BIT), T&gt;::type openage::util::safe_shiftleft </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function that performs a left shift without causing undefined behavior. regular left-shift is undefined if amount &gt;= bitwidth, or amount &gt;= bitwidth - 1 for signed integers. </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00028">28</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a1f37c9c7cfd9dbe87e3ce104476bbda4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f37c9c7cfd9dbe87e3ce104476bbda4">&#9670;&nbsp;</a></span>safe_shiftright() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &gt;= sizeof(T) * CHAR_BIT), T&gt;::type openage::util::safe_shiftright </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Helper function that performs a right shift without causing undefined behavior. right-shift is usually undefined if amount &gt;= bit size. </p>

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00043">43</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="aa341b7244c12ea3496bdcd56e226d791"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa341b7244c12ea3496bdcd56e226d791">&#9670;&nbsp;</a></span>safe_shiftright() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;unsigned int amount, typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr std::enable_if&lt;(amount &lt; sizeof(T) * CHAR_BIT), T&gt;::type openage::util::safe_shiftright </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fixed__point_8h_source.xhtml#l00050">50</a> of file <a class="el" href="fixed__point_8h_source.xhtml">fixed_point.h</a>.</p>

</div>
</div>
<a id="a5546877ed3bcad568ab21989a40ec088"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5546877ed3bcad568ab21989a40ec088">&#9670;&nbsp;</a></span>sformat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::sformat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname"><em>...</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>printf-style to-string formatting. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<a id="abfc839970f77edd26fe675758a6ca1b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfc839970f77edd26fe675758a6ca1b8">&#9670;&nbsp;</a></span>split() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ret_t &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>delimiter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ret_t&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Split a string at a delimiter, push the result back in an iterator. Why doesn't the fucking standard library have std::string::split(delimiter)? </p>

<p class="definition">Definition at line <a class="el" href="strings_8h_source.xhtml#l00088">88</a> of file <a class="el" href="strings_8h_source.xhtml">strings.h</a>.</p>

</div>
</div>
<a id="af74fec80080f6c627e5539bb20493ba0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af74fec80080f6c627e5539bb20493ba0">&#9670;&nbsp;</a></span>split() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; openage::util::split </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>delim</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Split a string at a delimiter into a vector. Internally, uses the above iterator splitter. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00136">136</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<a id="aa7f8fe5c3426ea9e4968ef9aa21660ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7f8fe5c3426ea9e4968ef9aa21660ae">&#9670;&nbsp;</a></span>split_escape()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; openage::util::split_escape </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>delim</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>size_hint</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Split a string at a delimiter into a vector. size_hint is to give a predicted size of the vector already.</p>
<p>tokenizes txt by splitting it up to substrings at the deliminiters. "\n" is evaluated to '<br />
'; all other '\X' escape sequences are evaluated to literal X, including the deliminiter. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<a id="aae9cd09351bc11ad2c9fcf701786340a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae9cd09351bc11ad2c9fcf701786340a">&#9670;&nbsp;</a></span>string_matches_pattern()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::util::string_matches_pattern </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pattern</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>returns true if str matches the basic globbing pattern in the pattern, '*' matches any number of characters, while all other characters are interpreted as literal. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00092">92</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<a id="ac6219374623d05b075782ea1adb09c0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6219374623d05b075782ea1adb09c0c">&#9670;&nbsp;</a></span>symbol_name()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="compiler_8h.xhtml#aea581b919984cda327632efe3d11f8b3">OAAPI</a> std::string openage::util::symbol_name </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>addr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>require_exact_addr</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>no_pure_addrs</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the (demangled) symbol name for a given address.</p>
<p>If no exact match can be found, if require_exact_addr == true (default): if no_pure_addrs == false (default): a pure hex address string is returned else: an empty string is returned if require_exact_addr == false: name of closest symbol + offset hex string is returned</p>
<p>pxd: string symbol_name(const void *addr) except + </p>

<p class="definition">Definition at line <a class="el" href="compiler_8cpp_source.xhtml#l00098">98</a> of file <a class="el" href="compiler_8cpp_source.xhtml">compiler.cpp</a>.</p>

</div>
</div>
<a id="ae9d6c19aadc0f6a1d502f42852172de0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9d6c19aadc0f6a1d502f42852172de0">&#9670;&nbsp;</a></span>uint64_to_array8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;uint8_t&gt; openage::util::uint64_to_array8 </td>
          <td>(</td>
          <td class="paramtype">const uint64_t&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>big_endian</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a uint64_t to an array of uint8_t. Uses little-endianness as default.</p>
<p>e.g (big-endian): 0x0123456789abcdef -&gt; {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef} e.g (little-endian): 0x0123456789abcdef -&gt; {0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01}</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>64 bit number to convert. </td></tr>
    <tr><td class="paramname">big_endian</td><td>Endianness of byte array. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Input data as a 8 bit number array. </dd></dl>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00145">145</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="a3e9f9bfa57d843330bd6d4bf85397433"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e9f9bfa57d843330bd6d4bf85397433">&#9670;&nbsp;</a></span>utf8_decode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::utf8_decode </td>
          <td>(</td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>len</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopenage_1_1util.xhtml#a3d73b80bcbf615e6330df0017584f673">codepoint_t</a> *&#160;</td>
          <td class="paramname"><em>outbuf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>decodes a UTF-8 character string of given length</p>
<p>the results are written to outbuf. no leading 0 is written to outbuf (nor is one expected at s). outbuf MUST be large enough to hold all characters. to ensure that outbuf is large enough, it SHOULD have a size of at least len.</p>
<p>the number of actual unicode characters is returned. it might be anywhere in the range [len/4; len].</p>
<p>in case of decoding errors, the special unicode character 0xfffd is written.</p>
<p>code logic gratefully borrowed from rxvt-unicode. </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>

</div>
</div>
<a id="aed7ef0b5ccf0d22a6329396d9a59f671"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed7ef0b5ccf0d22a6329396d9a59f671">&#9670;&nbsp;</a></span>utf8_encode()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::utf8_encode </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>outbuf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>encodes one Unicode codepoint to a null-terminated UTF-8 character string. due to the nature of UTF-8, the result string is at most 4 bytes long. on error, the empty string is returned.</p>
<p>cp the codepoint outbuf a output char buffer. outbuf[0] to outbuf[4] MUST be writeable. outbuf[0] will ALWAYS be written to. returns the number of non-NULL bytes that have been written, i.e. strlen(outbuf) </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>

</div>
</div>
<a id="a5519d25810f698275993214ce79016c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5519d25810f698275993214ce79016c7">&#9670;&nbsp;</a></span>utf8_last_char_size()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t openage::util::utf8_last_char_size </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>computes the length of the last character in a given UTF-8 string.</p>
<p>str the UTF-8 string returns the length of the last character in bytes </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00154">154</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>

</div>
</div>
<a id="a82a1e7bf14b6f49be2d5fe4ec89f920e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82a1e7bf14b6f49be2d5fe4ec89f920e">&#9670;&nbsp;</a></span>utf8_pop_back()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::utf8_pop_back </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>pops back (deletes) the last UTF-8 character in a std::string. </p>

<p class="definition">Definition at line <a class="el" href="unicode_8cpp_source.xhtml#l00167">167</a> of file <a class="el" href="unicode_8cpp_source.xhtml">unicode.cpp</a>.</p>

</div>
</div>
<a id="af88424f642ef1ba4e6b2eb1c05ad8e3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af88424f642ef1ba4e6b2eb1c05ad8e3c">&#9670;&nbsp;</a></span>vector_extend() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::vector_extend </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>ext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Extend a vector with elements, without destroying source one. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00239">239</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="a9fb1a345070c4a9dd714eb2e8ac2951c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fb1a345070c4a9dd714eb2e8ac2951c">&#9670;&nbsp;</a></span>vector_extend() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::vector_extend </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&amp;&#160;</td>
          <td class="paramname"><em>ext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00249">249</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="acd8f5a72ed6227f640eda13229878c6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd8f5a72ed6227f640eda13229878c6f">&#9670;&nbsp;</a></span>vector_remove_swap_end()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::vector_remove_swap_end </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Remove the given element index in the vector. May swap with the end element for efficient removing.</p>
<p>If the element is not in the vector, do nothing. </p>

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00268">268</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
<a id="a042594ac67e652c429fba1eeb1bec6fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a042594ac67e652c429fba1eeb1bec6fa">&#9670;&nbsp;</a></span>vsformat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string size_t openage::util::vsformat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list&#160;</td>
          <td class="paramname"><em>ap</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>printf-style valist-to-string formatting; the result is appended to output. </p>

<p class="definition">Definition at line <a class="el" href="strings_8cpp_source.xhtml#l00032">32</a> of file <a class="el" href="strings_8cpp_source.xhtml">strings.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="a5f6ab09d105c3dfecc8de7dfd7be7ca2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f6ab09d105c3dfecc8de7dfd7be7ca2">&#9670;&nbsp;</a></span>empty_string</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::util::empty_string</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>global empty string, sometimes needed as return value in some <code>std::string &amp;function()</code> return values. </p>

<p class="definition">Definition at line <a class="el" href="misc_8cpp_source.xhtml#l00008">8</a> of file <a class="el" href="misc_8cpp_source.xhtml">misc.cpp</a>.</p>

</div>
</div>
<a id="abd7c6427c843cb61f0892c36a58dabbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd7c6427c843cb61f0892c36a58dabbf">&#9670;&nbsp;</a></span>HEX_DIGITS</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const char* openage::util::HEX_DIGITS = &quot;0123456789abcdef&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="repr_8cpp_source.xhtml#l00009">9</a> of file <a class="el" href="repr_8cpp_source.xhtml">repr.cpp</a>.</p>

</div>
</div>
<a id="a90bf47b9ae769862b60096e171e3204b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90bf47b9ae769862b60096e171e3204b">&#9670;&nbsp;</a></span>uint64_s</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr size_t openage::util::uint64_s = 8</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="misc_8h_source.xhtml#l00094">94</a> of file <a class="el" href="misc_8h_source.xhtml">misc.h</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1util.xhtml">util</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
