<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/openage/convert/blendomatic.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('blendomatic_8py_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">blendomatic.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="blendomatic_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1convert_1_1blendomatic.xhtml">    1</a></span>&#160;<span class="comment"># Copyright 2013-2019 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="stringliteral">Conversion for the terrain blending masks.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="stringliteral">Those originate from blendomatic.dat.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="stringliteral">For more information, see doc/media/blendomatic.md</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">from</span> struct <span class="keyword">import</span> Struct, unpack_from</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">from</span> ..log <span class="keyword">import</span> dbg</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">from</span> .dataformat.exportable <span class="keyword">import</span> Exportable</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">from</span> .dataformat.data_definition <span class="keyword">import</span> DataDefinition</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">from</span> .dataformat.struct_definition <span class="keyword">import</span> StructDefinition</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml">BlendingTile</a>:</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="stringliteral">    One blending mask tile.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="stringliteral">    The blendomatic stores many of those.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml">   25</a></span>&#160;    <span class="comment"># pylint: disable=too-few-public-methods</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#af673b9d293418bea75625d929800a37d">__init__</a>(self, row_data, width, height):</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#aa85a8bbd7df281c1a9c3613335bf1d18">row_data</a> = row_data</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#af673b9d293418bea75625d929800a37d">   29</a></span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a190a2f0d5558608a6bf52e3b2248f013">width</a> = width</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#aa85a8bbd7df281c1a9c3613335bf1d18">   30</a></span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a73fc5b1eadf9233faa6c4f28afddd611">height</a> = height</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a190a2f0d5558608a6bf52e3b2248f013">   31</a></span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a73fc5b1eadf9233faa6c4f28afddd611">   32</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a15c617e71bf0ced91bf11ef18c134c6c">get_picture_data</a>(self):</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">        Return a numpy array of image data for a blending tile.</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a15c617e71bf0ced91bf11ef18c134c6c">   37</a></span>&#160;        <span class="keyword">import</span> numpy</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        tile_rows = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">for</span> picture_row <span class="keywordflow">in</span> self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#aa85a8bbd7df281c1a9c3613335bf1d18">row_data</a>:</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            tile_row_data = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">for</span> alpha_data <span class="keywordflow">in</span> picture_row:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                <span class="keywordflow">if</span> alpha_data == -1:</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    <span class="comment"># draw full transparency</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                    alpha = 0</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                    val = 0</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="keywordflow">else</span>:</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                    <span class="keywordflow">if</span> alpha_data == 128:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                        alpha = 255</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                        val = 0</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                    <span class="keywordflow">else</span>:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        <span class="comment"># original data contains 7-bit values only</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                        alpha = 128</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        val = (127 - (alpha_data &amp; 0x7f)) * 2</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                tile_row_data.append((val, val, val, alpha))</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            tile_rows.append(tile_row_data)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">return</span> numpy.array(tile_rows)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml">BlendingMode</a>:</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral">    One blending mode, which contains tiles that make up</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral">    for all the influence directions possible.</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral">    One mode is for example &quot;ice&quot; or &quot;grass&quot;, i.e. the transition shape.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml">   73</a></span>&#160;    <span class="comment"># pylint: disable=too-few-public-methods</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a24383622e7c86f981971b1e143cac37a">__init__</a>(self, idx, data_file, tile_count, header):</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral">        initialize one blending mode,</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral">        consisting of multiple frames for all blending directions</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral">        the bitmasks were used to decide whether this pixel has</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral">        to be used for calculations.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="stringliteral">        the alphamask is used to determine the alpha amount for blending.</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a24383622e7c86f981971b1e143cac37a">   86</a></span>&#160;        <span class="comment"># should be 2353 -&gt; number of pixels (single alpha byte values)</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a> = header[0]</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="comment"># tile_flags = header[1:]  # TODO what do they do?</span></div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">   89</a></span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>(<span class="stringliteral">&quot;blending mode %d tiles have %d pixels&quot;</span>, idx, self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a>)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="comment"># as we draw in isometric tile format, this is the row count</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">row_count</a> = int(<a class="code" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">sqrt</a>(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a>)) + 1  <span class="comment"># should be 49</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">   95</a></span>&#160;        <span class="comment"># alpha_masks_raw is an array of bytes that will draw 32 images,</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="comment"># which are bit masks.</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="comment">#</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment"># one of these masks also has 2353 pixels</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="comment"># the storage of the bit masks is 4*tilesize, here&#39;s why:</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="comment">#</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment"># 4 * 8bit * 2353 pixels = 75296 bitpixels</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment"># ==&gt; 75296/(32 images) = 2353 bitpixel/image</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">#</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment"># this means if we interprete the 75296 bitpixels as 32 images,</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment"># each of these images gets 2353 bit as data.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment"># TODO: why 32 images? isn&#39;t that depending on tile_count?</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        alpha_masks_raw = unpack_from(<span class="stringliteral">&quot;%dB&quot;</span> % (self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a> * 4),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                      data_file.read(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a> * 4))</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="comment"># list of alpha-mask tiles</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a0bbf810eb3a1ba01b9b6edb73646ac39">alphamasks</a> = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a0bbf810eb3a1ba01b9b6edb73646ac39">  114</a></span>&#160;        <span class="comment"># draw mask tiles for this blending mode</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(tile_count):</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            pixels = unpack_from(<span class="stringliteral">&quot;%dB&quot;</span> % self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a>,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                 data_file.read(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a>))</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a0bbf810eb3a1ba01b9b6edb73646ac39">alphamasks</a>.append(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a1301aa1adfc9ad82d074d3af9ea85bd1">get_tile_from_data</a>(pixels))</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        bitvalues = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> alpha_masks_raw:</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">for</span> b_id <span class="keywordflow">in</span> range(7, -1, -1):</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="comment"># bitmask from 0b00000001 to 0b10000000</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                bit_mask = 2 ** b_id</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                bitvalues.append(i &amp; bit_mask)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="comment"># list of bit-mask tiles</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#af177dfb90bcb74cf40fe641626dc87e2">bitmasks</a> = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#af177dfb90bcb74cf40fe641626dc87e2">  130</a></span>&#160;        <span class="comment"># TODO: is 32 really hardcoded?</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(32):</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            pixels = bitvalues[i * self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a>:(i + 1) * self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">pxcount</a>]</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#af177dfb90bcb74cf40fe641626dc87e2">bitmasks</a>.append(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a1301aa1adfc9ad82d074d3af9ea85bd1">get_tile_from_data</a>(pixels))</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a1301aa1adfc9ad82d074d3af9ea85bd1">get_tile_from_data</a>(self, data):</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="stringliteral">        get the data pixels, interprete them in isometric tile format</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="stringliteral">          ....*....</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="stringliteral">          ..*****..</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">          *********</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">          ..*****..</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">          ....*....  like this, only bigger..</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral">        we end up drawing the rhombus with 49 rows.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">        the space indicated by . is added by the function.</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a1301aa1adfc9ad82d074d3af9ea85bd1">  150</a></span>&#160;        half_row_count = self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">row_count</a> // 2</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        tile_size = len(data)</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        read_so_far = 0</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        max_width = 0</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        tilerows = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">for</span> y_pos <span class="keywordflow">in</span> range(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">row_count</a>):</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">if</span> y_pos &lt; half_row_count:</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="comment"># upper half of the tile</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment"># row i+1 has 4 more pixels than row i</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="comment"># another +1 for the middle one</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                read_values = 1 + (4 * y_pos)</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">else</span>:</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="comment"># lower half of tile</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                read_values = (((self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">row_count</a> * 2) - 1) -</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                               (4 * (y_pos - half_row_count)))</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">if</span> read_values &gt; (tile_size - read_so_far):</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;reading more bytes than tile has left&quot;</span>)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">if</span> read_values &lt; 0:</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;reading negative count: %d&quot;</span> % read_values)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="comment"># grab the pixels out of the big list</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            pixels = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>(data[read_so_far:(read_so_far + read_values)])</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="comment"># how many empty pixels on the left before the real data begins</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            space_count = self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">row_count</a> - 1 - (read_values // 2)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="comment"># insert padding to the left and right (-1 for fully transparent)</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            padding = ([-1] * space_count)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            pixels = padding + pixels + padding</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keywordflow">if</span> len(pixels) &gt; max_width:</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                max_width = len(pixels)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            read_so_far += read_values</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            tilerows.append(pixels)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span> read_so_far != tile_size:</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;got leftover bytes: %d&quot;</span> % (tile_size - read_so_far))</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml">BlendingTile</a>(tilerows, max_width, self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">row_count</a>)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml">Blendomatic</a>(<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml">Exportable</a>):</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="stringliteral">    Represents the blendomatic.dat file.</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="stringliteral">    In it are multiple blending modes,</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="stringliteral">    which then contain multiple tiles.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml">  202</a></span>&#160;    name_struct = <span class="stringliteral">&quot;blending_mode&quot;</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    name_struct_file = <span class="stringliteral">&quot;blending_mode&quot;</span></div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a83eecfa18e9ff264f5e5da9cae3af3e2">  204</a></span>&#160;    struct_description = (<span class="stringliteral">&quot;describes one blending mode, &quot;</span></div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#ad5ed31b1a5c68ac839489b9ca643dbf1">  205</a></span>&#160;                          <span class="stringliteral">&quot;a blending transition shape &quot;</span></div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a498035a9000fbe2e5934603c8034b08d">  206</a></span>&#160;                          <span class="stringliteral">&quot;between two different terrain types.&quot;</span>)</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    data_format = (</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;blend_mode&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a69f5b5dbbe7f5db9349df504ae4c503a">  209</a></span>&#160;    )</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment"># struct blendomatic_header {</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="comment">#   unsigned int nr_blending_modes;</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="comment">#   unsigned int nr_tiles;</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment"># };</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    blendomatic_header = Struct(<span class="stringliteral">&quot;&lt; I I&quot;</span>)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#ad8e99520bea4219c0fc3670812d46b12">  217</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a521870c86f9bc2a0dbfbdebefc04479b">__init__</a>(self, fileobj):</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        super().<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a521870c86f9bc2a0dbfbdebefc04479b">__init__</a>()</div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a521870c86f9bc2a0dbfbdebefc04479b">  219</a></span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        buf = fileobj.read(Blendomatic.blendomatic_header.size)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a4ea5eab1a5da38d599d8b984ec24242d">header</a> = Blendomatic.blendomatic_header.unpack_from(buf)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a4ea5eab1a5da38d599d8b984ec24242d">  223</a></span>&#160;        blending_mode_count, tile_count = self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a4ea5eab1a5da38d599d8b984ec24242d">header</a></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>(<span class="stringliteral">&quot;%d blending modes, each %d tiles&quot;</span>,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            blending_mode_count, tile_count)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        blending_mode = Struct(<span class="stringliteral">&quot;&lt; I %dB&quot;</span> % (tile_count))</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">blending_modes</a> = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">  232</a></span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(blending_mode_count):</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            header_data = fileobj.read(blending_mode.size)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            bmode_header = blending_mode.unpack_from(header_data)</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            new_mode = <a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml">BlendingMode</a>(i, fileobj, tile_count, bmode_header)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">blending_modes</a>.append(new_mode)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        fileobj.close()</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a289ac918b5495e290fd58e9096504238">get_textures</a>(self):</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="stringliteral">        generate a list of textures.</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="stringliteral">        one atlas per blending mode is generated,</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="stringliteral">        each atlas contains all blending masks merged on one texture</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a289ac918b5495e290fd58e9096504238">  250</a></span>&#160;        <span class="keyword">from</span> .texture <span class="keyword">import</span> Texture</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">return</span> [<a class="code" href="classopenage_1_1_texture.xhtml">Texture</a>(b_mode) <span class="keywordflow">for</span> b_mode <span class="keywordflow">in</span> self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">blending_modes</a>]</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a259476ed46a4076dcd1aa3d82914d2f1">dump</a>(self, filename):</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        data = [</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a259476ed46a4076dcd1aa3d82914d2f1">  255</a></span>&#160;            {<span class="stringliteral">&quot;blend_mode&quot;</span>: idx}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">for</span> idx, _ <span class="keywordflow">in</span> enumerate(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">blending_modes</a>)</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        ]</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">return</span> [<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__definition_1_1_data_definition.xhtml">DataDefinition</a>(self, data, filename)]</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    @classmethod</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a6753e8c61d0a3df53ff6a5868d9501c5">structs</a>(cls):</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordflow">return</span> [<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1struct__definition_1_1_struct_definition.xhtml">StructDefinition</a>(cls)]</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a6753e8c61d0a3df53ff6a5868d9501c5">  263</a></span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a3bd1c711bafb552611f48267652e0d17">save</a>(self, fslikeobj, path, save_format):</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="stringliteral">        Save the blending mask textures to disk.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a3bd1c711bafb552611f48267652e0d17">  269</a></span>&#160;        <span class="keywordflow">for</span> idx, texture <span class="keywordflow">in</span> enumerate(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a289ac918b5495e290fd58e9096504238">get_textures</a>()):</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            name = <span class="stringliteral">&quot;mode%02d.png&quot;</span> % idx</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>(<span class="stringliteral">&quot;saving blending mode %02d texture -&gt; %s&quot;</span>, idx, name)</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            texture.save(fslikeobj, path + <span class="stringliteral">&#39;/&#39;</span> + name, save_format)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>(<span class="stringliteral">&quot;blending masks successfully exported&quot;</span>)</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a31d656f8b2b72517f347404d7eba9e04">__str__</a>(self):</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>(self.<a class="code" href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">blending_modes</a>)</div><div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a495f2c62536ea3fb19f20c50b7670e53"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a495f2c62536ea3fb19f20c50b7670e53">openage.convert.blendomatic.Blendomatic.blending_modes</a></div><div class="ttdeci">blending_modes</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00232">blendomatic.py:232</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml_af177dfb90bcb74cf40fe641626dc87e2"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#af177dfb90bcb74cf40fe641626dc87e2">openage.convert.blendomatic.BlendingMode.bitmasks</a></div><div class="ttdeci">bitmasks</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00130">blendomatic.py:130</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a4ea5eab1a5da38d599d8b984ec24242d"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a4ea5eab1a5da38d599d8b984ec24242d">openage.convert.blendomatic.Blendomatic.header</a></div><div class="ttdeci">header</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00223">blendomatic.py:223</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml">openage.convert.blendomatic.Blendomatic</a></div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00202">blendomatic.py:202</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1exportable_1_1_exportable.xhtml">openage.convert.dataformat.exportable.Exportable</a></div><div class="ttdoc">superclass for all exportable data members</div><div class="ttdef"><b>Definition:</b> <a href="exportable_8py_source.xhtml#l00029">exportable.py:29</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1struct__definition_1_1_struct_definition_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1struct__definition_1_1_struct_definition.xhtml">openage.convert.dataformat.struct_definition.StructDefinition</a></div><div class="ttdoc">input data read from the data files.</div><div class="ttdef"><b>Definition:</b> <a href="struct__definition_8py_source.xhtml#l00031">struct_definition.py:31</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a521870c86f9bc2a0dbfbdebefc04479b"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a521870c86f9bc2a0dbfbdebefc04479b">openage.convert.blendomatic.Blendomatic.__init__</a></div><div class="ttdeci">def __init__(self, fileobj)</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00219">blendomatic.py:219</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a259476ed46a4076dcd1aa3d82914d2f1"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a259476ed46a4076dcd1aa3d82914d2f1">openage.convert.blendomatic.Blendomatic.dump</a></div><div class="ttdeci">def dump(self, filename)</div><div class="ttdoc">main data dumping function, the magic happens in here.</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00255">blendomatic.py:255</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a6753e8c61d0a3df53ff6a5868d9501c5"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a6753e8c61d0a3df53ff6a5868d9501c5">openage.convert.blendomatic.Blendomatic.structs</a></div><div class="ttdeci">def structs(cls)</div><div class="ttdoc">create struct definitions for this class and its subdata references.</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00263">blendomatic.py:263</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml">openage.convert.blendomatic.BlendingTile</a></div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00025">blendomatic.py:25</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_aad3d76b2466dbc4f81552935f2d84faa"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">openage::log.dbg</a></div><div class="ttdeci">def dbg(msg, *args, **kwargs)</div><div class="ttdoc">debug message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00109">__init__.py:109</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml_a57535a4b1e21ed2a05c631814bf53ed1"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a57535a4b1e21ed2a05c631814bf53ed1">openage.convert.blendomatic.BlendingMode.row_count</a></div><div class="ttdeci">row_count</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00095">blendomatic.py:95</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml_a11f7ad1bcac957d6dd0c8d7fe0ef619f"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a11f7ad1bcac957d6dd0c8d7fe0ef619f">openage.convert.blendomatic.BlendingMode.pxcount</a></div><div class="ttdeci">pxcount</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00089">blendomatic.py:89</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile_xhtml_a190a2f0d5558608a6bf52e3b2248f013"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a190a2f0d5558608a6bf52e3b2248f013">openage.convert.blendomatic.BlendingTile.width</a></div><div class="ttdeci">width</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00031">blendomatic.py:31</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a31d656f8b2b72517f347404d7eba9e04"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a31d656f8b2b72517f347404d7eba9e04">openage.convert.blendomatic.Blendomatic.__str__</a></div><div class="ttdeci">def __str__(self)</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00278">blendomatic.py:278</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml_a0bbf810eb3a1ba01b9b6edb73646ac39"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a0bbf810eb3a1ba01b9b6edb73646ac39">openage.convert.blendomatic.BlendingMode.alphamasks</a></div><div class="ttdeci">alphamasks</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00114">blendomatic.py:114</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a58cbca251b8e2118e0a6b9b0b78a7b32"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">openage::py::list</a></div><div class="ttdeci">Obj list()</div><div class="ttdoc">list()</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00359">pyobject.cpp:359</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml_a1301aa1adfc9ad82d074d3af9ea85bd1"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a1301aa1adfc9ad82d074d3af9ea85bd1">openage.convert.blendomatic.BlendingMode.get_tile_from_data</a></div><div class="ttdeci">def get_tile_from_data(self, data)</div><div class="ttdoc">get the data pixels, interprete them in isometric tile format</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00150">blendomatic.py:150</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml_a24383622e7c86f981971b1e143cac37a"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml#a24383622e7c86f981971b1e143cac37a">openage.convert.blendomatic.BlendingMode.__init__</a></div><div class="ttdeci">def __init__(self, idx, data_file, tile_count, header)</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00086">blendomatic.py:86</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile_xhtml_a73fc5b1eadf9233faa6c4f28afddd611"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a73fc5b1eadf9233faa6c4f28afddd611">openage.convert.blendomatic.BlendingTile.height</a></div><div class="ttdeci">height</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00032">blendomatic.py:32</a></div></div>
<div class="ttc" id="classopenage_1_1_texture_xhtml"><div class="ttname"><a href="classopenage_1_1_texture.xhtml">openage::Texture</a></div><div class="ttdoc">A texture for rendering graphically.</div><div class="ttdef"><b>Definition:</b> <a href="texture_8h_source.xhtml#l00071">texture.h:71</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile_xhtml_a15c617e71bf0ced91bf11ef18c134c6c"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#a15c617e71bf0ced91bf11ef18c134c6c">openage.convert.blendomatic.BlendingTile.get_picture_data</a></div><div class="ttdeci">def get_picture_data(self)</div><div class="ttdoc">Return a numpy array of image data for a blending tile.</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00037">blendomatic.py:37</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a289ac918b5495e290fd58e9096504238"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a289ac918b5495e290fd58e9096504238">openage.convert.blendomatic.Blendomatic.get_textures</a></div><div class="ttdeci">def get_textures(self)</div><div class="ttdoc">generate a list of textures.</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00250">blendomatic.py:250</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__definition_1_1_data_definition_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__definition_1_1_data_definition.xhtml">openage.convert.dataformat.data_definition.DataDefinition</a></div><div class="ttdef"><b>Definition:</b> <a href="data__definition_8py_source.xhtml#l00023">data_definition.py:23</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile_xhtml_af673b9d293418bea75625d929800a37d"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#af673b9d293418bea75625d929800a37d">openage.convert.blendomatic.BlendingTile.__init__</a></div><div class="ttdeci">def __init__(self, row_data, width, height)</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00029">blendomatic.py:29</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile_xhtml_aa85a8bbd7df281c1a9c3613335bf1d18"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_tile.xhtml#aa85a8bbd7df281c1a9c3613335bf1d18">openage.convert.blendomatic.BlendingTile.row_data</a></div><div class="ttdeci">row_data</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00030">blendomatic.py:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a4d2bbe46a5d10404c658b54f3b199551"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">openage::py::str</a></div><div class="ttdeci">Obj str(const std::string &amp;value)</div><div class="ttdoc">str(value);</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00331">pyobject.cpp:331</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blending_mode.xhtml">openage.convert.blendomatic.BlendingMode</a></div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00073">blendomatic.py:73</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic_xhtml_a3bd1c711bafb552611f48267652e0d17"><div class="ttname"><a href="classopenage_1_1convert_1_1blendomatic_1_1_blendomatic.xhtml#a3bd1c711bafb552611f48267652e0d17">openage.convert.blendomatic.Blendomatic.save</a></div><div class="ttdeci">def save(self, fslikeobj, path, save_format)</div><div class="ttdoc">Save the blending mask textures to disk.</div><div class="ttdef"><b>Definition:</b> <a href="blendomatic_8py_source.xhtml#l00269">blendomatic.py:269</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a0fc492a11cf74e80f976b24bea2a2eb2"><div class="ttname"><a href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a></div><div class="ttdeci">constexpr double sqrt(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00470">fixed_point.h:470</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5432d0784b34fd012a3258f7fe2e6e8b.xhtml">openage</a></li><li class="navelem"><a class="el" href="dir_f8c2790f072062ca31393539e9a4c2e7.xhtml">convert</a></li><li class="navelem"><a class="el" href="blendomatic_8py.xhtml">blendomatic.py</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
