<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: libopenage/util/misc.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('misc_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">misc.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="misc_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2013-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;limits.h&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;../error/error.h&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="compiler_8h.xhtml">compiler.h</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1util.xhtml">openage::util</a> {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">extern</span> std::string <a class="code" href="namespaceopenage_1_1util.xhtml#a5f6ab09d105c3dfecc8de7dfd7be7ca2">empty_string</a>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;constexpr</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a7e483e123bf554b630319eb3dd012c02">   32</a></span>&#160;T <a class="code" href="namespaceopenage_1_1util.xhtml#a7e483e123bf554b630319eb3dd012c02">mod</a>(T x, T m) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    T r = x % m;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">if</span> (r &lt; 0) {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> r + m;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> modulo&gt;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;constexpr</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aebb1428f079400b957bd2ce2fb8ad583">   47</a></span>&#160;T <a class="code" href="namespaceopenage_1_1util.xhtml#a7e483e123bf554b630319eb3dd012c02">mod</a>(T x) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    T r = x % modulo;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (r &lt; 0) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">return</span> r + modulo;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">return</span> r;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> amount&gt;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;constexpr</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a656c9d55c02d291f899cdae14b356d7a">   63</a></span>&#160;T <a class="code" href="namespaceopenage_1_1util.xhtml#a656c9d55c02d291f899cdae14b356d7a">rol</a>(T x) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    static_assert(<span class="keyword">sizeof</span>(T)*CHAR_BIT &gt; amount &amp;&amp; amount &gt; 0, <span class="stringliteral">&quot;invalid rotation amount&quot;</span>);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">return</span> (x &lt;&lt; amount) | (x &gt;&gt; (<span class="keyword">sizeof</span>(T)*CHAR_BIT - amount));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;constexpr</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">   75</a></span>&#160;<span class="keyword">inline</span> T <a class="code" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">div</a>(T x, T m) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">return</span> (x - mod&lt;T&gt;(x, m)) / m;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="structopenage_1_1util_1_1less.xhtml">   86</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopenage_1_1util_1_1less.xhtml">less</a> {</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="structopenage_1_1util_1_1less.xhtml#a803609f289c6ff68259ae83ffceaa334">   87</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structopenage_1_1util_1_1less.xhtml#a803609f289c6ff68259ae83ffceaa334">operator ()</a>(<span class="keyword">const</span> T x, <span class="keyword">const</span> T y)<span class="keyword"> const </span>{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> *x &lt; *y;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;};</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">// Size of uint64_t measured in bytes</span></div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">   94</a></span>&#160;<span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a> = 8;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">inline</span> uint64_t</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">  111</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(<span class="keyword">const</span> uint8_t *start, <span class="keywordtype">size_t</span> count, <span class="keywordtype">bool</span> big_endian=<span class="keyword">false</span>) {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> (count &gt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Tried to copy more than &quot;</span> &lt;&lt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a> &lt;&lt; <span class="stringliteral">&quot; bytes&quot;</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    uint64_t <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>{0};</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (big_endian) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; count; i++) {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> |= static_cast&lt;uint64_t&gt;(*(start + i)) &lt;&lt; (7 - i) * 8;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; count; i++) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> |= static_cast&lt;uint64_t&gt;(*(start + i)) &lt;&lt; i * 8;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">inline</span> std::vector&lt;uint8_t&gt;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">  145</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a>(<span class="keyword">const</span> uint64_t value, <span class="keywordtype">bool</span> big_endian=<span class="keyword">false</span>) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>(<a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>, 0);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (big_endian) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>; i++) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>[i] = (value &gt;&gt; ((7 - i) * 8)) &amp; 0xff;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>; i++) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>[i] = (value &gt;&gt; (i * 8)) &amp; 0xff;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">  170</a></span>&#160;<span class="keyword">inline</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">array64_size</a>(<span class="keywordtype">size_t</span> count) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordtype">size_t</span> partial = mod&lt;size_t, uint64_s&gt;(count);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> ((count - partial) / <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>) + (partial ? 1 : 0);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">inline</span> std::vector&lt;uint64_t&gt;</div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">  190</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a>(<span class="keyword">const</span> uint8_t *start, <span class="keywordtype">size_t</span> count, <span class="keywordtype">bool</span> big_endian=<span class="keyword">false</span>) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordtype">size_t</span> size{<a class="code" href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">array64_size</a>(count)};</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::vector&lt;uint64_t&gt; <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>(size, 0);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordtype">size_t</span> rem_bytes;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; size; i++) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        rem_bytes = count - i * <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>[i] = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            start + (i * <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>),</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a>(rem_bytes, <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>),</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            big_endian</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        );</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">inline</span> std::vector&lt;uint8_t&gt;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">  222</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a>(<span class="keyword">const</span> uint64_t *start, <span class="keywordtype">size_t</span> count, <span class="keywordtype">bool</span> big_endian=<span class="keyword">false</span>) {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    std::vector&lt;uint8_t&gt; <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.reserve(count * <a class="code" href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">uint64_s</a>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; count; i++) {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        std::vector&lt;uint8_t&gt; block = <a class="code" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a>(*(start + i), big_endian);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.insert(<a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.end(), block.begin(), block.end());</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#af88424f642ef1ba4e6b2eb1c05ad8e3c">  239</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1util.xhtml#af88424f642ef1ba4e6b2eb1c05ad8e3c">vector_extend</a>(std::vector&lt;T&gt; &amp;vec, <span class="keyword">const</span> std::vector&lt;T&gt; &amp;ext) {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    vec.reserve(vec.size() + ext.size());</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    vec.insert(std::end(vec), std::begin(ext), std::end(ext));</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"> * Extend a vector with elements with move semantics.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a9fb1a345070c4a9dd714eb2e8ac2951c">  249</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1util.xhtml#af88424f642ef1ba4e6b2eb1c05ad8e3c">vector_extend</a>(std::vector&lt;T&gt; &amp;vec, std::vector&lt;T&gt; &amp;&amp;ext) {</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span> (vec.empty()) {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        vec = <a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(ext);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        vec.reserve(vec.size() + ext.size());</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(std::begin(ext), std::end(ext), std::back_inserter(vec));</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        ext.clear();</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#acd8f5a72ed6227f640eda13229878c6f">  268</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1util.xhtml#acd8f5a72ed6227f640eda13229878c6f">vector_remove_swap_end</a>(std::vector&lt;T&gt; &amp;vec, <span class="keywordtype">size_t</span> idx) {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="comment">// is at the end</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">if</span> (idx == vec.size() - 1) {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        vec.pop_back();</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// is in the middle</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (idx &lt; vec.size()) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        std::swap(vec[idx], vec.back());</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        vec.pop_back();</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;}</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">  289</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">SharedPtrLess</a> {</div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml#a2d342306bb66a154d214154377f6ee07">  290</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml#a2d342306bb66a154d214154377f6ee07">operator ()</a>(<span class="keyword">const</span> std::shared_ptr&lt;T&gt; &amp;left,</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                     <span class="keyword">const</span> std::shared_ptr&lt;T&gt; &amp;right) {</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(not left or not right)) {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordflow">return</span> *left &lt; *right;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;};</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;} <span class="comment">// namespace openage::util</span></div><div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a34ba6f7abd32acb48dfc6ad6efdc1bc8"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">openage::util::div</a></div><div class="ttdeci">constexpr T div(T x, T m)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00075">misc.h:75</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml_a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e"><div class="ttname"><a href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">openage::ability_type::move</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a656c9d55c02d291f899cdae14b356d7a"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a656c9d55c02d291f899cdae14b356d7a">openage::util::rol</a></div><div class="ttdeci">constexpr T rol(T x)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00063">misc.h:63</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a34591a1d8ee5da3f16f56554590d5e16"><div class="ttname"><a href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; min(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00475">fixed_point.h:475</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ae9d6c19aadc0f6a1d502f42852172de0"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">openage::util::uint64_to_array8</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; uint64_to_array8(const uint64_t value, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00145">misc.h:145</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aa30219231e1ac7a89ef5d1fb44894e9e"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">openage::util::array8_to_array64</a></div><div class="ttdeci">std::vector&lt; uint64_t &gt; array8_to_array64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00190">misc.h:190</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml">openage::util</a></div><div class="ttdef"><b>Definition:</b> <a href="draw_8h_source.xhtml#l00009">draw.h:9</a></div></div>
<div class="ttc" id="compiler_8h_xhtml"><div class="ttname"><a href="compiler_8h.xhtml">compiler.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a7e483e123bf554b630319eb3dd012c02"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a7e483e123bf554b630319eb3dd012c02">openage::util::mod</a></div><div class="ttdeci">constexpr T mod(T x, T m)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00032">misc.h:32</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a5f6ab09d105c3dfecc8de7dfd7be7ca2"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5f6ab09d105c3dfecc8de7dfd7be7ca2">openage::util::empty_string</a></div><div class="ttdeci">std::string empty_string</div><div class="ttdef"><b>Definition:</b> <a href="misc_8cpp_source.xhtml#l00008">misc.cpp:8</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a69b6ecf2b5119f11c33d2b5b89cec86c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">openage::util::array8_to_uint64</a></div><div class="ttdeci">uint64_t array8_to_uint64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00111">misc.h:111</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_af9f52b617e7434a421cd5f9de448b600"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">openage::util::array64_to_array8</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; array64_to_array8(const uint64_t *start, size_t count, bool big_endian=false)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00222">misc.h:222</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_acd8f5a72ed6227f640eda13229878c6f"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#acd8f5a72ed6227f640eda13229878c6f">openage::util::vector_remove_swap_end</a></div><div class="ttdeci">void vector_remove_swap_end(std::vector&lt; T &gt; &amp;vec, size_t idx)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00268">misc.h:268</a></div></div>
<div class="ttc" id="structopenage_1_1util_1_1less_xhtml_a803609f289c6ff68259ae83ffceaa334"><div class="ttname"><a href="structopenage_1_1util_1_1less.xhtml#a803609f289c6ff68259ae83ffceaa334">openage::util::less::operator()</a></div><div class="ttdeci">bool operator()(const T x, const T y) const</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00087">misc.h:87</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_af88424f642ef1ba4e6b2eb1c05ad8e3c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#af88424f642ef1ba4e6b2eb1c05ad8e3c">openage::util::vector_extend</a></div><div class="ttdeci">void vector_extend(std::vector&lt; T &gt; &amp;vec, const std::vector&lt; T &gt; &amp;ext)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00239">misc.h:239</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abab1bbea3efd69cf8087a807b5b5f8f2"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abab1bbea3efd69cf8087a807b5b5f8f2">openage::util::array64_size</a></div><div class="ttdeci">constexpr size_t array64_size(size_t count)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00170">misc.h:170</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a90bf47b9ae769862b60096e171e3204b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a90bf47b9ae769862b60096e171e3204b">openage::util::uint64_s</a></div><div class="ttdeci">static constexpr size_t uint64_s</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00094">misc.h:94</a></div></div>
<div class="ttc" id="structopenage_1_1util_1_1_shared_ptr_less_xhtml_a2d342306bb66a154d214154377f6ee07"><div class="ttname"><a href="structopenage_1_1util_1_1_shared_ptr_less.xhtml#a2d342306bb66a154d214154377f6ee07">openage::util::SharedPtrLess::operator()</a></div><div class="ttdeci">bool operator()(const std::shared_ptr&lt; T &gt; &amp;left, const std::shared_ptr&lt; T &gt; &amp;right)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00290">misc.h:290</a></div></div>
<div class="ttc" id="structopenage_1_1util_1_1less_xhtml"><div class="ttname"><a href="structopenage_1_1util_1_1less.xhtml">openage::util::less</a></div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00086">misc.h:86</a></div></div>
<div class="ttc" id="structopenage_1_1util_1_1_shared_ptr_less_xhtml"><div class="ttname"><a href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">openage::util::SharedPtrLess</a></div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00289">misc.h:289</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="misc_8h.xhtml">misc.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
