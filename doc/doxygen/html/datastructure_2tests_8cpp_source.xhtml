<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: libopenage/datastructure/tests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('datastructure_2tests_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">tests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="datastructure_2tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2014-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="datastructure_2tests_8h.xhtml">tests.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;../testing/testing.h&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="constexpr__map_8h.xhtml">constexpr_map.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="pairing__heap_8h.xhtml">pairing_heap.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">namespace </span>datastructure {</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml">   15</a></span>&#160;<span class="keyword">namespace </span>tests {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">   18</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">pairing_heap_0</a>() {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap&lt;int&gt;</a> heap{};</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    (heap.size() == 0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    heap.push(0);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    heap.push(1);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    heap.push(2);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    heap.push(3);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    heap.push(4);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="comment">// state: 01234</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 5);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.top(), 0);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 0);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 1);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 2);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 3);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 1);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    heap.push(0);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    heap.push(10);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// state: 0 4 10</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 0);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 4);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 10);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 0);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    heap.push(5);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    heap.push(5);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    heap.push(0);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    heap.push(5);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    heap.push(5);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 0);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop(), 5);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 0);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">   65</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">pairing_heap_1</a>() {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap&lt;heap_elem&gt;</a> heap{};</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    heap.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{1});</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">auto</span> node_u1 = heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{2});</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{3});</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// 1 2 3</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    node_u1-&gt;data.data = 0;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    heap.decrease(node_u1);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="comment">// 0 1 3</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 0);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 1);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// 3</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{4});</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{0});</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{2});</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{5});</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{1});</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{6});</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">auto</span> node_u2 = heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{7});</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{8});</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{9});</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{10});</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 0);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 1);</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// now update the 7-node to 8</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    node_u2-&gt;data.data = 8;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    heap.update(node_u2);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// 2 3 4 5 6 8 8 9 10</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 2);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 3);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 4);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 5);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 6);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 8);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 8);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 9);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 10);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">  112</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">pairing_heap_2</a>() {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap&lt;heap_elem&gt;</a> heap{};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    heap.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{1});</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">auto</span> node = heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{2});</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{3});</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// state: 1 2 3, now remove 2</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    heap.unlink_node(node);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// state: 1 3</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 1);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.pop().data, 3);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">  127</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">pairing_heap_3</a>() {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap&lt;heap_elem&gt;</a> heap{};</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    heap.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{0});</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{1});</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{2});</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{3});</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{4});</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    heap.push(<a class="code" href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">heap_elem</a>{5});</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    heap.pop(); <span class="comment">// trigger pairing</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    heap.clear();</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.size(), 0);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(heap.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">// exported test</span></div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a68c5daac0260fc457d5916be54f20a82">  145</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a68c5daac0260fc457d5916be54f20a82">pairing_heap</a>() {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">pairing_heap_0</a>();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">pairing_heap_1</a>();</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">pairing_heap_2</a>();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">pairing_heap_3</a>();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">// exported test</span></div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ade00c39e05018597baff76d22dedff44">  154</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ade00c39e05018597baff76d22dedff44">constexpr_map</a>() {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    static_assert(create_const_map&lt;int, int&gt;().size() == 0, <span class="stringliteral">&quot;wrong size&quot;</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(0, 42)).size() == 1,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                  <span class="stringliteral">&quot;wrong size&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(0, 42),</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                                             std::make_pair(13, 37)).size() == 2,</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                  <span class="stringliteral">&quot;wrong size&quot;</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    static_assert(not create_const_map&lt;int, int&gt;().contains(9001),</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                  <span class="stringliteral">&quot;empty map doesn&#39;t contain anything&quot;</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 0),</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                                             std::make_pair(13, 37)).contains(42),</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                  <span class="stringliteral">&quot;contained element missing&quot;</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 0),</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                                             std::make_pair(13, 37)).contains(13),</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                  <span class="stringliteral">&quot;contained element missing&quot;</span>);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    static_assert(not create_const_map&lt;int, int&gt;(std::make_pair(42, 0),</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                                                 std::make_pair(13, 37)).contains(9001),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                  <span class="stringliteral">&quot;uncontained element seems to be contained.&quot;</span>);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">#ifndef _MSC_VER // HACK: MSVC doesn&#39;t have full C++14 constexpr support</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 9001),</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                             std::make_pair(13, 37)).get(42) == 9001,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                  <span class="stringliteral">&quot;fetched wrong value&quot;</span>);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    static_assert(create_const_map&lt;int, int&gt;(std::make_pair(42, 9001),</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                             std::make_pair(13, 37)).get(13) == 37,</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                  <span class="stringliteral">&quot;fetched wrong value&quot;</span>);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    constexpr <span class="keyword">auto</span> cmap = create_const_map&lt;int, int&gt;(</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        std::make_pair(0, 0),</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        std::make_pair(13, 37),</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        std::make_pair(42, 9001)</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    );</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    cmap.contains(0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    not cmap.contains(18) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(cmap.size(), 3);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(cmap.get(13), 37);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(cmap.get(42), 9001);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}}} <span class="comment">// openage::datastructure::tests</span></div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_a57b696ae13dfb3c80d6c8cc7224b7c51"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a57b696ae13dfb3c80d6c8cc7224b7c51">openage::datastructure::tests::pairing_heap_0</a></div><div class="ttdeci">void pairing_heap_0()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00018">tests.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_af82ba08f4a466babf0ca5ca833b91fa9"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#af82ba08f4a466babf0ca5ca833b91fa9">openage::datastructure::tests::pairing_heap_1</a></div><div class="ttdeci">void pairing_heap_1()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00065">tests.cpp:65</a></div></div>
<div class="ttc" id="pairing__heap_8h_xhtml"><div class="ttname"><a href="pairing__heap_8h.xhtml">pairing_heap.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_ae3ac08d1b58fe615f03e6332d84011af"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ae3ac08d1b58fe615f03e6332d84011af">openage::datastructure::tests::pairing_heap_3</a></div><div class="ttdeci">void pairing_heap_3()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00127">tests.cpp:127</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_a4fbf658dd2eeeb34fb83295dd631e280"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a4fbf658dd2eeeb34fb83295dd631e280">openage::datastructure::tests::pairing_heap_2</a></div><div class="ttdeci">void pairing_heap_2()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00112">tests.cpp:112</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_a68c5daac0260fc457d5916be54f20a82"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#a68c5daac0260fc457d5916be54f20a82">openage::datastructure::tests::pairing_heap</a></div><div class="ttdeci">void pairing_heap()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00145">tests.cpp:145</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a></div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00037">pairing_heap.h:37</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_1_1tests_xhtml_ade00c39e05018597baff76d22dedff44"><div class="ttname"><a href="namespaceopenage_1_1datastructure_1_1tests.xhtml#ade00c39e05018597baff76d22dedff44">openage::datastructure::tests::constexpr_map</a></div><div class="ttdeci">void constexpr_map()</div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8cpp_source.xhtml#l00154">tests.cpp:154</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a75e9e7602b59aeee47a2fd84a10c8f74"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">openage::datastructure::PairingHeap::push</a></div><div class="ttdeci">element_t push(const T &amp;item)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00217">pairing_heap.h:217</a></div></div>
<div class="ttc" id="constexpr__map_8h_xhtml"><div class="ttname"><a href="constexpr__map_8h.xhtml">constexpr_map.h</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="datastructure_2tests_8h_xhtml"><div class="ttname"><a href="datastructure_2tests_8h.xhtml">tests.h</a></div></div>
<div class="ttc" id="structopenage_1_1datastructure_1_1tests_1_1heap__elem_xhtml"><div class="ttname"><a href="structopenage_1_1datastructure_1_1tests_1_1heap__elem.xhtml">openage::datastructure::tests::heap_elem</a></div><div class="ttdef"><b>Definition:</b> <a href="datastructure_2tests_8h_source.xhtml#l00015">tests.h:15</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_7ea809f223a8f5a589c716fad2b2f668.xhtml">datastructure</a></li><li class="navelem"><a class="el" href="datastructure_2tests_8cpp.xhtml">tests.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
