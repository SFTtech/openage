<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::datastructure::ConcurrentQueue&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1datastructure_1_1_concurrent_queue.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-types">Private Types</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classopenage_1_1datastructure_1_1_concurrent_queue-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::datastructure::ConcurrentQueue&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A threadsafe queue.  
 <a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for openage::datastructure::ConcurrentQueue&lt; T &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_concurrent_queue__inherit__graph.svg" width="228" height="522"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for openage::datastructure::ConcurrentQueue&lt; T &gt;:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_concurrent_queue__coll__graph.svg" width="174" height="206"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af9b0d0bc8cea20b87178f1be1d9fc005"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#af9b0d0bc8cea20b87178f1be1d9fc005">clear</a> ()</td></tr>
<tr class="memdesc:af9b0d0bc8cea20b87178f1be1d9fc005"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all elements from the queue.  <a href="#af9b0d0bc8cea20b87178f1be1d9fc005">More...</a><br /></td></tr>
<tr class="separator:af9b0d0bc8cea20b87178f1be1d9fc005"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa78ec939e767d66a811046c3165e63c5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#aa78ec939e767d66a811046c3165e63c5">empty</a> ()</td></tr>
<tr class="memdesc:aa78ec939e767d66a811046c3165e63c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the queue is empty.  <a href="#aa78ec939e767d66a811046c3165e63c5">More...</a><br /></td></tr>
<tr class="separator:aa78ec939e767d66a811046c3165e63c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac425a78bff1d289707da09d6a14922dc"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ac425a78bff1d289707da09d6a14922dc">front</a> ()</td></tr>
<tr class="memdesc:ac425a78bff1d289707da09d6a14922dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the front item of the queue without removing it.  <a href="#ac425a78bff1d289707da09d6a14922dc">More...</a><br /></td></tr>
<tr class="separator:ac425a78bff1d289707da09d6a14922dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec749002b655d28b0aa5f99a802a0008"><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#aec749002b655d28b0aa5f99a802a0008">pop</a> ()</td></tr>
<tr class="memdesc:aec749002b655d28b0aa5f99a802a0008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the front item of the queue and returns it.  <a href="#aec749002b655d28b0aa5f99a802a0008">More...</a><br /></td></tr>
<tr class="separator:aec749002b655d28b0aa5f99a802a0008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c71a5b5a99e60590130d2afe866137c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a1c71a5b5a99e60590130d2afe866137c">push</a> (const T &amp;item)</td></tr>
<tr class="memdesc:a1c71a5b5a99e60590130d2afe866137c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends the given item to the queue.  <a href="#a1c71a5b5a99e60590130d2afe866137c">More...</a><br /></td></tr>
<tr class="separator:a1c71a5b5a99e60590130d2afe866137c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a245e3f0f06675868d5854f135cc6ed48"><td class="memItemLeft" align="right" valign="top">std::unique_lock&lt; <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a7670bfb41573e5be70fdbe94d21324bf">mutex_t</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a> ()</td></tr>
<tr class="memdesc:a245e3f0f06675868d5854f135cc6ed48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a lock to the queue so multiple of the above operations can be done sequentially.  <a href="#a245e3f0f06675868d5854f135cc6ed48">More...</a><br /></td></tr>
<tr class="separator:a245e3f0f06675868d5854f135cc6ed48"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-types"></a>
Private Types</h2></td></tr>
<tr class="memitem:a7670bfb41573e5be70fdbe94d21324bf"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a7670bfb41573e5be70fdbe94d21324bf">mutex_t</a> = std::recursive_mutex</td></tr>
<tr class="memdesc:a7670bfb41573e5be70fdbe94d21324bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type of mutex used for the queue.  <a href="#a7670bfb41573e5be70fdbe94d21324bf">More...</a><br /></td></tr>
<tr class="separator:a7670bfb41573e5be70fdbe94d21324bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a2beddd3e8f45546f8925c256b5d524dc"><td class="memItemLeft" align="right" valign="top">std::queue&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a></td></tr>
<tr class="memdesc:a2beddd3e8f45546f8925c256b5d524dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The internally used queue.  <a href="#a2beddd3e8f45546f8925c256b5d524dc">More...</a><br /></td></tr>
<tr class="separator:a2beddd3e8f45546f8925c256b5d524dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c18ef183f2c0a1b4fdbd07f1523f20"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a7670bfb41573e5be70fdbe94d21324bf">mutex_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a></td></tr>
<tr class="memdesc:a78c18ef183f2c0a1b4fdbd07f1523f20"><td class="mdescLeft">&#160;</td><td class="mdescRight">The mutex to synchronize the queue.  <a href="#a78c18ef183f2c0a1b4fdbd07f1523f20">More...</a><br /></td></tr>
<tr class="separator:a78c18ef183f2c0a1b4fdbd07f1523f20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad671d49bbf03d0412a5f0ec4e1b539d5"><td class="memItemLeft" align="right" valign="top">std::condition_variable_any&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">elements_available</a></td></tr>
<tr class="memdesc:ad671d49bbf03d0412a5f0ec4e1b539d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Condition variable to signal, whether elements are avaiable from the queue.  <a href="#ad671d49bbf03d0412a5f0ec4e1b539d5">More...</a><br /></td></tr>
<tr class="separator:ad671d49bbf03d0412a5f0ec4e1b539d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class openage::datastructure::ConcurrentQueue&lt; T &gt;</h3>

<p>A threadsafe queue. </p>
<p>Wraps the std::queue with a mutex.</p>
<p>Supports waiting for data from another thread. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00020">20</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a7670bfb41573e5be70fdbe94d21324bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7670bfb41573e5be70fdbe94d21324bf">&#9670;&nbsp;</a></span>mutex_t</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a7670bfb41573e5be70fdbe94d21324bf">mutex_t</a> =  std::recursive_mutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Type of mutex used for the queue. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00024">24</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="af9b0d0bc8cea20b87178f1be1d9fc005"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9b0d0bc8cea20b87178f1be1d9fc005">&#9670;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes all elements from the queue. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00028">28</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                 {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        std::lock_guard&lt;mutex_t&gt; <a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>{this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a>};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">while</span> (!this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.empty()) {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.pop();</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a78c18ef183f2c0a1b4fdbd07f1523f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">openage::datastructure::ConcurrentQueue::mutex</a></div><div class="ttdeci">mutex_t mutex</div><div class="ttdoc">The mutex to synchronize the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00082">concurrent_queue.h:82</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a2beddd3e8f45546f8925c256b5d524dc"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">openage::datastructure::ConcurrentQueue::queue</a></div><div class="ttdeci">std::queue&lt; T &gt; queue</div><div class="ttdoc">The internally used queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00079">concurrent_queue.h:79</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a245e3f0f06675868d5854f135cc6ed48"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">openage::datastructure::ConcurrentQueue::lock</a></div><div class="ttdeci">std::unique_lock&lt; mutex_t &gt; lock()</div><div class="ttdoc">Return a lock to the queue so multiple of the above operations can be done sequentially.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00073">concurrent_queue.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="aa78ec939e767d66a811046c3165e63c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa78ec939e767d66a811046c3165e63c5">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the queue is empty. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00036">36</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                 {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        std::lock_guard&lt;mutex_t&gt; <a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>{this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a>};</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.empty();</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a78c18ef183f2c0a1b4fdbd07f1523f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">openage::datastructure::ConcurrentQueue::mutex</a></div><div class="ttdeci">mutex_t mutex</div><div class="ttdoc">The mutex to synchronize the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00082">concurrent_queue.h:82</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a2beddd3e8f45546f8925c256b5d524dc"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">openage::datastructure::ConcurrentQueue::queue</a></div><div class="ttdeci">std::queue&lt; T &gt; queue</div><div class="ttdoc">The internally used queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00079">concurrent_queue.h:79</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a245e3f0f06675868d5854f135cc6ed48"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">openage::datastructure::ConcurrentQueue::lock</a></div><div class="ttdeci">std::unique_lock&lt; mutex_t &gt; lock()</div><div class="ttdoc">Return a lock to the queue so multiple of the above operations can be done sequentially.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00073">concurrent_queue.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="ac425a78bff1d289707da09d6a14922dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac425a78bff1d289707da09d6a14922dc">&#9670;&nbsp;</a></span>front()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::front </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the front item of the queue without removing it. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00042">42</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;               {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        std::unique_lock&lt;mutex_t&gt; <a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>{this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a>};</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">while</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.empty()) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">elements_available</a>.wait(<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.front();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a78c18ef183f2c0a1b4fdbd07f1523f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">openage::datastructure::ConcurrentQueue::mutex</a></div><div class="ttdeci">mutex_t mutex</div><div class="ttdoc">The mutex to synchronize the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00082">concurrent_queue.h:82</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a2beddd3e8f45546f8925c256b5d524dc"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">openage::datastructure::ConcurrentQueue::queue</a></div><div class="ttdeci">std::queue&lt; T &gt; queue</div><div class="ttdoc">The internally used queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00079">concurrent_queue.h:79</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_ad671d49bbf03d0412a5f0ec4e1b539d5"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">openage::datastructure::ConcurrentQueue::elements_available</a></div><div class="ttdeci">std::condition_variable_any elements_available</div><div class="ttdoc">Condition variable to signal, whether elements are avaiable from the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00088">concurrent_queue.h:88</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a245e3f0f06675868d5854f135cc6ed48"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">openage::datastructure::ConcurrentQueue::lock</a></div><div class="ttdeci">std::unique_lock&lt; mutex_t &gt; lock()</div><div class="ttdoc">Return a lock to the queue so multiple of the above operations can be done sequentially.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00073">concurrent_queue.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a245e3f0f06675868d5854f135cc6ed48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a245e3f0f06675868d5854f135cc6ed48">&#9670;&nbsp;</a></span>lock()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unique_lock&lt;<a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a7670bfb41573e5be70fdbe94d21324bf">mutex_t</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::lock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return a lock to the queue so multiple of the above operations can be done sequentially. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00073">73</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                   {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">return</span> std::unique_lock&lt;mutex_t&gt;{this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a>};</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a78c18ef183f2c0a1b4fdbd07f1523f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">openage::datastructure::ConcurrentQueue::mutex</a></div><div class="ttdeci">mutex_t mutex</div><div class="ttdoc">The mutex to synchronize the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00082">concurrent_queue.h:82</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="concurrent__queue_8h_source.xhtml#l00028">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::clear()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00036">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::empty()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00042">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::front()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00051">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::pop()</a>, and <a class="el" href="concurrent__queue_8h_source.xhtml#l00062">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::push()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_concurrent_queue_a245e3f0f06675868d5854f135cc6ed48_icgraph.svg" width="424" height="460"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aec749002b655d28b0aa5f99a802a0008"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec749002b655d28b0aa5f99a802a0008">&#9670;&nbsp;</a></span>pop()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T&amp; <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::pop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the front item of the queue and returns it. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00051">51</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;             {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        std::unique_lock&lt;mutex_t&gt; <a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>{this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a>};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">while</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.empty()) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">elements_available</a>.wait(<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">auto</span> &amp;item = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.front();</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.pop();</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">return</span> item;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a78c18ef183f2c0a1b4fdbd07f1523f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">openage::datastructure::ConcurrentQueue::mutex</a></div><div class="ttdeci">mutex_t mutex</div><div class="ttdoc">The mutex to synchronize the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00082">concurrent_queue.h:82</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a2beddd3e8f45546f8925c256b5d524dc"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">openage::datastructure::ConcurrentQueue::queue</a></div><div class="ttdeci">std::queue&lt; T &gt; queue</div><div class="ttdoc">The internally used queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00079">concurrent_queue.h:79</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_ad671d49bbf03d0412a5f0ec4e1b539d5"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">openage::datastructure::ConcurrentQueue::elements_available</a></div><div class="ttdeci">std::condition_variable_any elements_available</div><div class="ttdoc">Condition variable to signal, whether elements are avaiable from the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00088">concurrent_queue.h:88</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a245e3f0f06675868d5854f135cc6ed48"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">openage::datastructure::ConcurrentQueue::lock</a></div><div class="ttdeci">std::unique_lock&lt; mutex_t &gt; lock()</div><div class="ttdoc">Return a lock to the queue so multiple of the above operations can be done sequentially.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00073">concurrent_queue.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="a1c71a5b5a99e60590130d2afe866137c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c71a5b5a99e60590130d2afe866137c">&#9670;&nbsp;</a></span>push()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::push </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>item</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Appends the given item to the queue. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00062">62</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                             {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        std::unique_lock&lt;mutex_t&gt; <a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>{this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">mutex</a>};</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">queue</a>.push(item);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">lock</a>.unlock();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">elements_available</a>.notify_one();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a78c18ef183f2c0a1b4fdbd07f1523f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a78c18ef183f2c0a1b4fdbd07f1523f20">openage::datastructure::ConcurrentQueue::mutex</a></div><div class="ttdeci">mutex_t mutex</div><div class="ttdoc">The mutex to synchronize the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00082">concurrent_queue.h:82</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a2beddd3e8f45546f8925c256b5d524dc"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a2beddd3e8f45546f8925c256b5d524dc">openage::datastructure::ConcurrentQueue::queue</a></div><div class="ttdeci">std::queue&lt; T &gt; queue</div><div class="ttdoc">The internally used queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00079">concurrent_queue.h:79</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_ad671d49bbf03d0412a5f0ec4e1b539d5"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#ad671d49bbf03d0412a5f0ec4e1b539d5">openage::datastructure::ConcurrentQueue::elements_available</a></div><div class="ttdeci">std::condition_variable_any elements_available</div><div class="ttdoc">Condition variable to signal, whether elements are avaiable from the queue.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00088">concurrent_queue.h:88</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_concurrent_queue_xhtml_a245e3f0f06675868d5854f135cc6ed48"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a245e3f0f06675868d5854f135cc6ed48">openage::datastructure::ConcurrentQueue::lock</a></div><div class="ttdeci">std::unique_lock&lt; mutex_t &gt; lock()</div><div class="ttdoc">Return a lock to the queue so multiple of the above operations can be done sequentially.</div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00073">concurrent_queue.h:73</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="ad671d49bbf03d0412a5f0ec4e1b539d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad671d49bbf03d0412a5f0ec4e1b539d5">&#9670;&nbsp;</a></span>elements_available</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::condition_variable_any <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::elements_available</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Condition variable to signal, whether elements are avaiable from the queue. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00088">88</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="concurrent__queue_8h_source.xhtml#l00042">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::front()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00051">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::pop()</a>, and <a class="el" href="concurrent__queue_8h_source.xhtml#l00062">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::push()</a>.</p>

</div>
</div>
<a id="a78c18ef183f2c0a1b4fdbd07f1523f20"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78c18ef183f2c0a1b4fdbd07f1523f20">&#9670;&nbsp;</a></span>mutex</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml#a7670bfb41573e5be70fdbe94d21324bf">mutex_t</a> <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::mutex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The mutex to synchronize the queue. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00082">82</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="concurrent__queue_8h_source.xhtml#l00028">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::clear()</a>, <a class="el" href="threading_8py_source.xhtml#l00075">openage.util.threading.ClosableQueue::close()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00036">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::empty()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00042">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::front()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00073">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::lock()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00051">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::pop()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00062">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::push()</a>, and <a class="el" href="threading_8py_source.xhtml#l00084">openage.util.threading.ClosableQueue::raise_if_closed()</a>.</p>

</div>
</div>
<a id="a2beddd3e8f45546f8925c256b5d524dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2beddd3e8f45546f8925c256b5d524dc">&#9670;&nbsp;</a></span>queue</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::queue&lt;T&gt; <a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">openage::datastructure::ConcurrentQueue</a>&lt; T &gt;::queue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The internally used queue. </p>

<p class="definition">Definition at line <a class="el" href="concurrent__queue_8h_source.xhtml#l00079">79</a> of file <a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="fifo_8py_source.xhtml#l00067">openage.util.filelike.fifo.FIFO::__len__()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00028">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::clear()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00036">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::empty()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00042">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::front()</a>, <a class="el" href="fifo_8py_source.xhtml#l00112">openage.util.filelike.fifo.FIFO::get_size()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00051">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::pop()</a>, <a class="el" href="concurrent__queue_8h_source.xhtml#l00062">openage::datastructure::ConcurrentQueue&lt; std::shared_ptr&lt; openage::audio::chunk_info_t &gt; &gt;::push()</a>, <a class="el" href="fifo_8py_source.xhtml#l00099">openage.util.filelike.fifo.FIFO::read()</a>, <a class="el" href="fifo_8py_source.xhtml#l00050">openage.util.filelike.fifo.FIFO::tellw()</a>, and <a class="el" href="fifo_8py_source.xhtml#l00082">openage.util.filelike.fifo.FIFO::write()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/datastructure/<a class="el" href="concurrent__queue_8h_source.xhtml">concurrent_queue.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1datastructure.xhtml">datastructure</a></li><li class="navelem"><a class="el" href="classopenage_1_1datastructure_1_1_concurrent_queue.xhtml">ConcurrentQueue</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
