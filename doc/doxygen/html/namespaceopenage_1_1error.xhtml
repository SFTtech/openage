<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::error Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1error.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">openage::error Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">Backtrace</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1error_1_1backtrace__symbol.xhtml">backtrace_symbol</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_error.xhtml">Error</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml">StackAnalyzer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a58eb7522d2a474098647490b1a6041f0"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a58eb7522d2a474098647490b1a6041f0">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="structopenage_1_1error_1_1backtrace__symbol.xhtml">backtrace_symbol</a> &amp;bt_sym)</td></tr>
<tr class="separator:a58eb7522d2a474098647490b1a6041f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab21567da92b6f9b758b2c16ca9c2186b"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#ab21567da92b6f9b758b2c16ca9c2186b">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">Backtrace</a> &amp;bt)</td></tr>
<tr class="separator:ab21567da92b6f9b758b2c16ca9c2186b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a036babcdd58261ba26288431876e7b02"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a036babcdd58261ba26288431876e7b02">demo</a> ()</td></tr>
<tr class="separator:a036babcdd58261ba26288431876e7b02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a902be6cbbea4f6485907cc5e15406b3a"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a902be6cbbea4f6485907cc5e15406b3a">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classopenage_1_1error_1_1_error.xhtml">Error</a> &amp;e)</td></tr>
<tr class="separator:a902be6cbbea4f6485907cc5e15406b3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2024deec6ddbb6949287eccd5be88a4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#ab2024deec6ddbb6949287eccd5be88a4">no_ensuring_message</a> ()</td></tr>
<tr class="separator:ab2024deec6ddbb6949287eccd5be88a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95135ee267683c05e0a7b64a4b32a999"><td class="memItemLeft" align="right" valign="top">SDL_GLContext&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a95135ee267683c05e0a7b64a4b32a999">create_debug_context</a> (SDL_Window *window)</td></tr>
<tr class="separator:a95135ee267683c05e0a7b64a4b32a999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae713528ccc0e378838c233a2a405026a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">terminate_handler</a> () noexcept</td></tr>
<tr class="separator:ae713528ccc0e378838c233a2a405026a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afafcc06f7279949f56f93e5506656528"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#afafcc06f7279949f56f93e5506656528">sigsegv_handler</a> (int)</td></tr>
<tr class="separator:afafcc06f7279949f56f93e5506656528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a456dc46fa28ef457ef19c8f879c256b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a456dc46fa28ef457ef19c8f879c256b1">exit_handler</a> ()</td></tr>
<tr class="separator:a456dc46fa28ef457ef19c8f879c256b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa782a00ec80760003f986c063aef169d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#aa782a00ec80760003f986c063aef169d">set_exit_ok</a> (bool value)</td></tr>
<tr class="separator:aa782a00ec80760003f986c063aef169d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a1f2a2504ac8f64e3666ce4322b32f0e6"><td class="memItemLeft" align="right" valign="top">constexpr const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a1f2a2504ac8f64e3666ce4322b32f0e6">runtime_error_message</a> = &quot;polymorphic openage <a class="el" href="classopenage_1_1error_1_1_error.xhtml">Error</a> object; catch by reference!&quot;</td></tr>
<tr class="separator:a1f2a2504ac8f64e3666ce4322b32f0e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69283bf7d976b89c848b6b413190e15a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#a69283bf7d976b89c848b6b413190e15a">enable_break_on_create</a> = false</td></tr>
<tr class="separator:a69283bf7d976b89c848b6b413190e15a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3d9c89190667cb25a58f4946755cd7c"><td class="memItemLeft" align="right" valign="top">constexpr uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#ae3d9c89190667cb25a58f4946755cd7c">skip_entry_frames</a> = 1</td></tr>
<tr class="separator:ae3d9c89190667cb25a58f4946755cd7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4d473d062c43372ff4db76ff90d212b"><td class="memItemLeft" align="right" valign="top">constexpr uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1error.xhtml#af4d473d062c43372ff4db76ff90d212b">base_skip_frames</a> = 1</td></tr>
<tr class="separator:af4d473d062c43372ff4db76ff90d212b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a95135ee267683c05e0a7b64a4b32a999"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95135ee267683c05e0a7b64a4b32a999">&#9670;&nbsp;</a></span>create_debug_context()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SDL_GLContext openage::error::create_debug_context </td>
          <td>(</td>
          <td class="paramtype">SDL_Window *&#160;</td>
          <td class="paramname"><em>window</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="gl__debug_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="gl__debug_8cpp_source.xhtml">gl_debug.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                                                       {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_DEBUG_FLAG);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> ctx = SDL_GL_CreateContext(window);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (ctx != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        GLint flags;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        glGetIntegerv(GL_CONTEXT_FLAGS, &amp;flags);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">if</span> (!(flags &amp; GL_CONTEXT_FLAG_DEBUG_BIT))</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">throw</span> Error(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>)&lt;&lt; <span class="stringliteral">&quot;Failed creating a debug OpenGL context.&quot;</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        glDebugMessageControl(GL_DONT_CARE, GL_DONT_CARE, GL_DONT_CARE, 0, <span class="keyword">nullptr</span>, GL_FALSE);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        glDebugMessageControl(GL_DONT_CARE, GL_DEBUG_TYPE_ERROR, GL_DONT_CARE, 0, <span class="keyword">nullptr</span>, GL_TRUE);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        glDebugMessageControl(GL_DONT_CARE, GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR, GL_DONT_CARE, 0, <span class="keyword">nullptr</span>, GL_TRUE);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        glDebugMessageCallback(callback, <span class="keyword">nullptr</span>);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> ctx;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="log_2____init_____8py_source.xhtml#l00124">openage::log::err()</a>, and <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1error_a95135ee267683c05e0a7b64a4b32a999_cgraph.svg" width="319" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a036babcdd58261ba26288431876e7b02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a036babcdd58261ba26288431876e7b02">&#9670;&nbsp;</a></span>demo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::demo </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="demo_8cpp_source.xhtml#l00045">45</a> of file <a class="el" href="demo_8cpp_source.xhtml">demo.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        bar(0);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    } <span class="keywordflow">catch</span> (Error &amp;exc) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">if</span> (exc.backtrace) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            exc.trim_backtrace();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">info</a>) &lt;&lt;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="stringliteral">&quot;exception_demo: captured the following exception:&quot;</span> &lt;&lt; std::endl &lt;&lt;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            exc &lt;&lt; std::endl &lt;&lt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="stringliteral">&quot;exception_demo: end of exception&quot;</span>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a3f1815b698faf5786fc5e20bcac7704b"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a3f1815b698faf5786fc5e20bcac7704b">openage::log.info</a></div><div class="ttdeci">def info(msg, *args, **kwargs)</div><div class="ttdoc">info message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00114">__init__.py:114</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="error_2error_8h_source.xhtml#l00097">openage::error::Error::backtrace</a>, <a class="el" href="log_2____init_____8py_source.xhtml#l00114">openage::log::info()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>, and <a class="el" href="error_2error_8cpp_source.xhtml#l00060">openage::error::Error::trim_backtrace()</a>.</p>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1error_a036babcdd58261ba26288431876e7b02_cgraph.svg" width="100%" height="432"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a456dc46fa28ef457ef19c8f879c256b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a456dc46fa28ef457ef19c8f879c256b1">&#9670;&nbsp;</a></span>exit_handler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::exit_handler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2handlers_8cpp_source.xhtml#l00119">119</a> of file <a class="el" href="error_2handlers_8cpp_source.xhtml">handlers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// This handler is registered to run atexit().</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// It is used to catch calls to exit() that occur somewhere inside</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// the running game (while exit_ok == false).</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// exit() should never be invoked directly while the game is running,</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// but some libraries such as libepoxy might do it anyway.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// The actual proper way of exiting the running game is via throwing</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// an exception or similar action.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (exit_ok) { <span class="keywordflow">return</span>; }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\x1b[31;1mexit() was called in an illegal place\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="ab2024deec6ddbb6949287eccd5be88a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2024deec6ddbb6949287eccd5be88a4">&#9670;&nbsp;</a></span>no_ensuring_message()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::error::no_ensuring_message </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2error_8h_source.xhtml#l00149">149</a> of file <a class="el" href="error_2error_8h_source.xhtml">error.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> std::string{};</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="a58eb7522d2a474098647490b1a6041f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58eb7522d2a474098647490b1a6041f0">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; openage::error::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1error_1_1backtrace__symbol.xhtml">backtrace_symbol</a> &amp;&#160;</td>
          <td class="paramname"><em>bt_sym</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints a <a class="el" href="structopenage_1_1error_1_1backtrace__symbol.xhtml">backtrace_symbol</a> object. </p>

<p class="definition">Definition at line <a class="el" href="backtrace_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="backtrace_8cpp_source.xhtml">backtrace.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                                                                        {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="comment">// imitate the looks of a Python traceback.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;  File &quot;</span>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <span class="keywordflow">if</span> (bt_sym.filename.empty()) {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        os &lt;&lt; <span class="charliteral">&#39;?&#39;</span>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        os &lt;&lt; <span class="charliteral">&#39;&quot;&#39;</span> &lt;&lt; bt_sym.filename &lt;&lt; <span class="charliteral">&#39;&quot;&#39;</span>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordflow">if</span> (bt_sym.lineno) {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;, line &quot;</span> &lt;&lt; bt_sym.lineno;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    }</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;, in &quot;</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">if</span> (bt_sym.functionname.empty()) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        os &lt;&lt; <span class="charliteral">&#39;?&#39;</span>;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        os &lt;&lt; bt_sym.functionname;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (bt_sym.pc != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot; [&quot;</span> &lt;&lt; bt_sym.pc &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="backtrace_8h_source.xhtml#l00035">openage::error::backtrace_symbol::filename</a>, <a class="el" href="backtrace_8h_source.xhtml#l00037">openage::error::backtrace_symbol::functionname</a>, <a class="el" href="backtrace_8h_source.xhtml#l00036">openage::error::backtrace_symbol::lineno</a>, and <a class="el" href="backtrace_8h_source.xhtml#l00038">openage::error::backtrace_symbol::pc</a>.</p>

</div>
</div>
<a id="ab21567da92b6f9b758b2c16ca9c2186b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab21567da92b6f9b758b2c16ca9c2186b">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; openage::error::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">Backtrace</a> &amp;&#160;</td>
          <td class="paramname"><em>bt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Prints an entire <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">Backtrace</a> object. </p>

<p class="definition">Definition at line <a class="el" href="backtrace_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="backtrace_8cpp_source.xhtml">backtrace.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                                                             {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="comment">// imitate the looks of a Python traceback.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    os &lt;&lt; <span class="stringliteral">&quot;Traceback (most recent call last):&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    bt.get_symbols([&amp;os](<span class="keyword">const</span> backtrace_symbol *symbol) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        os &lt;&lt; *symbol &lt;&lt; std::endl;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }, <span class="keyword">true</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div></div><!-- fragment -->
<p class="reference">References <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml#ad4e4e82a65ad250f048f66667d810440">openage::error::Backtrace::get_symbols()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1error_ab21567da92b6f9b758b2c16ca9c2186b_cgraph.svg" width="407" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a902be6cbbea4f6485907cc5e15406b3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a902be6cbbea4f6485907cc5e15406b3a">&#9670;&nbsp;</a></span>operator&lt;&lt;() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream &amp; openage::error::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1error_1_1_error.xhtml">Error</a> &amp;&#160;</td>
          <td class="paramname"><em>e</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2error_8cpp_source.xhtml#l00089">89</a> of file <a class="el" href="error_2error_8cpp_source.xhtml">error.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                                                        {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="comment">// output the exception cause</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordtype">bool</span> had_a_cause = <span class="keyword">true</span>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">try</span> {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        e.rethrow_cause();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        had_a_cause = <span class="keyword">false</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    } <span class="keywordflow">catch</span> (Error &amp;cause) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        os &lt;&lt; cause &lt;&lt; std::endl;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    } <span class="keywordflow">catch</span> (std::exception &amp;cause) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        os &lt;&lt; <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">util::demangle</a>(<span class="keyword">typeid</span>(cause).name()) &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; cause.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    } <span class="keywordflow">catch</span> (...) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;unknown non std::exception cause!&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> (had_a_cause) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        os &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;The above exception was the direct cause of the following exception:&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// output the exception backtrace</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (e.backtrace) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        os &lt;&lt; *e.backtrace;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;origin:&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// the exception message metadata also holds some &quot;backtrace-like&quot; info</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    os &lt;&lt; backtrace_symbol{</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        e.msg.filename,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        e.msg.lineno,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        e.msg.functionname,</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keyword">nullptr</span>} &lt;&lt; std::endl;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    os &lt;&lt; e.type_name();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (not e.msg.text.empty()) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        os &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; e.msg.text;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_aebed129b2a0773520cdd8d40b0f70318"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">openage::util::demangle</a></div><div class="ttdeci">std::string demangle(const char *symbol)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00025">compiler.cpp:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="error_2error_8h_source.xhtml#l00097">openage::error::Error::backtrace</a>, <a class="el" href="compiler_8cpp_source.xhtml#l00025">openage::util::demangle()</a>, <a class="el" href="message_8h_source.xhtml#l00063">openage::log::message::filename</a>, <a class="el" href="message_8h_source.xhtml#l00073">openage::log::message::functionname</a>, <a class="el" href="message_8h_source.xhtml#l00068">openage::log::message::lineno</a>, <a class="el" href="error_2error_8h_source.xhtml#l00091">openage::error::Error::msg</a>, <a class="el" href="error_2error_8cpp_source.xhtml#l00082">openage::error::Error::rethrow_cause()</a>, <a class="el" href="message_8h_source.xhtml#l00058">openage::log::message::text</a>, and <a class="el" href="error_2error_8cpp_source.xhtml#l00077">openage::error::Error::type_name()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1error_a902be6cbbea4f6485907cc5e15406b3a_cgraph.svg" width="100%" height="402"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="aa782a00ec80760003f986c063aef169d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa782a00ec80760003f986c063aef169d">&#9670;&nbsp;</a></span>set_exit_ok()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="compiler_8h.xhtml#aea581b919984cda327632efe3d11f8b3">OAAPI</a> void openage::error::set_exit_ok </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Call this to set or unset the atexit error handler.</p>
<p>In order to capture any stray calls to exit() from any place in the game (including libraries), set this to true on startup, and back to false right before termination.</p>
<p>pxd: void set_exit_ok(cppbool value) except + </p>

<p class="definition">Definition at line <a class="el" href="error_2handlers_8cpp_source.xhtml#l00134">134</a> of file <a class="el" href="error_2handlers_8cpp_source.xhtml">handlers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                             {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    exit_ok = value;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div></div><!-- fragment -->
</div>
</div>
<a id="afafcc06f7279949f56f93e5506656528"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afafcc06f7279949f56f93e5506656528">&#9670;&nbsp;</a></span>sigsegv_handler()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::sigsegv_handler </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2handlers_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="error_2handlers_8cpp_source.xhtml">handlers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                            {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// In theory, this handler may only call async-signal-safe functions,</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// such as write().</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *message = <span class="stringliteral">&quot;\n\x1b[31;1mSIGSEGV\x1b[m\n&quot;</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="namespaceopenage_1_1util.xhtml#a8cb190d6ba8c160e1453ff4379dd2dcb">util::ignore_result</a>(write(1, message, <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(message)));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// however, everything is broken anyways. can&#39;t hurt to try to print</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// more useful info. fuck the police! wheeee!</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::terminate();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a8cb190d6ba8c160e1453ff4379dd2dcb"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a8cb190d6ba8c160e1453ff4379dd2dcb">openage::util::ignore_result</a></div><div class="ttdeci">void ignore_result(T)</div><div class="ttdef"><b>Definition:</b> <a href="language_8h_source.xhtml#l00038">language.h:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="language_8h_source.xhtml#l00038">openage::util::ignore_result()</a>, and <a class="el" href="constexpr_8h_source.xhtml#l00030">openage::util::constexpr_::strlen()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1error_afafcc06f7279949f56f93e5506656528_cgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ae713528ccc0e378838c233a2a405026a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae713528ccc0e378838c233a2a405026a">&#9670;&nbsp;</a></span>terminate_handler()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::terminate_handler </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">noexcept</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2handlers_8cpp_source.xhtml#l00069">69</a> of file <a class="el" href="error_2handlers_8cpp_source.xhtml">handlers.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                               {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// immediately unset this handler, to avoid endless recursions if</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// terminate() is accidentially triggered from here.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    std::set_terminate(old_terminate_handler);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n\x1b[31;1mFATAL: terminate has been called\x1b[m&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (std::exception_ptr e_ptr = std::current_exception()) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\n\x1b[33muncaught exception\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">try</span> {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            std::rethrow_exception(e_ptr);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        } <span class="keywordflow">catch</span> (Error &amp;exc) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            std::cout &lt;&lt; exc &lt;&lt; std::endl;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        } <span class="keywordflow">catch</span> (std::exception &amp;exc) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            std::cout &lt;&lt;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="stringliteral">&quot;std::exception of type &quot;</span> &lt;&lt;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">util::demangle</a>(<span class="keyword">typeid</span>(exc).name()) &lt;&lt;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; exc.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        } <span class="keywordflow">catch</span> (...) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;non-standard exception object&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n\x1b[33mcurrent stack:\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    StackAnalyzer backtrace;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    backtrace.analyze();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::cout &lt;&lt; backtrace &lt;&lt; std::endl;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// die again to enable debugger functionality.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// that maybe print some additional useful info that we forgot about.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// \todo we maybe want to prevent that for end-users.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\x1b[33mhanding over to the system...\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    std::terminate();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_aebed129b2a0773520cdd8d40b0f70318"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">openage::util::demangle</a></div><div class="ttdeci">std::string demangle(const char *symbol)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00025">compiler.cpp:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00222">openage::error::StackAnalyzer::analyze()</a>, and <a class="el" href="compiler_8cpp_source.xhtml#l00025">openage::util::demangle()</a>.</p>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1error_ae713528ccc0e378838c233a2a405026a_cgraph.svg" width="100%" height="378"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="af4d473d062c43372ff4db76ff90d212b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4d473d062c43372ff4db76ff90d212b">&#9670;&nbsp;</a></span>base_skip_frames</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr uint64_t openage::error::base_skip_frames = 1</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Skip this many stack frames, this drops the stackanalyzer function call itself. </p>

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="stackanalyzer_8cpp_source.xhtml">stackanalyzer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00222">openage::error::StackAnalyzer::analyze()</a>.</p>

</div>
</div>
<a id="a69283bf7d976b89c848b6b413190e15a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69283bf7d976b89c848b6b413190e15a">&#9670;&nbsp;</a></span>enable_break_on_create</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::error::enable_break_on_create = false</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2error_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="error_2error_8cpp_source.xhtml">error.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="error_2error_8cpp_source.xhtml#l00016">openage::error::Error::debug_break_on_create()</a>.</p>

</div>
</div>
<a id="a1f2a2504ac8f64e3666ce4322b32f0e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f2a2504ac8f64e3666ce4322b32f0e6">&#9670;&nbsp;</a></span>runtime_error_message</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr const char* openage::error::runtime_error_message = &quot;polymorphic openage <a class="el" href="classopenage_1_1error_1_1_error.xhtml">Error</a> object; catch by reference!&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="error_2error_8cpp_source.xhtml#l00013">13</a> of file <a class="el" href="error_2error_8cpp_source.xhtml">error.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="error_2error_8cpp_source.xhtml#l00020">openage::error::Error::Error()</a>.</p>

</div>
</div>
<a id="ae3d9c89190667cb25a58f4946755cd7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3d9c89190667cb25a58f4946755cd7c">&#9670;&nbsp;</a></span>skip_entry_frames</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr uint64_t openage::error::skip_entry_frames = 1</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Skip this many frames at the beginning of the trace. Can trim away various libc calls. </p>

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00019">19</a> of file <a class="el" href="stackanalyzer_8cpp_source.xhtml">stackanalyzer.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00222">openage::error::StackAnalyzer::analyze()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1error.xhtml">error</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
