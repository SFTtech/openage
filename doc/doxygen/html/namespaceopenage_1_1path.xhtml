<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::path Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1path.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">openage::path Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceopenage_1_1path_1_1tests"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path_1_1tests.xhtml">tests</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1path_1_1compare__node__cost.xhtml">compare_node_cost</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cost comparison for node_pt.  <a href="structopenage_1_1path_1_1compare__node__cost.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1path_1_1_node.xhtml">Node</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">One navigation waypoint in a path.  <a href="classopenage_1_1path_1_1_node.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a planned trajectory.  <a href="classopenage_1_1path_1_1_path.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a42b919491ef91151284bc4c1cb3223a0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a42b919491ef91151284bc4c1cb3223a0">heuristic_t</a> = <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>(*)(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;start, const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;end)</td></tr>
<tr class="memdesc:a42b919491ef91151284bc4c1cb3223a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">function pointer type for distance estimation functions.  <a href="#a42b919491ef91151284bc4c1cb3223a0">More...</a><br /></td></tr>
<tr class="separator:a42b919491ef91151284bc4c1cb3223a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb0eaee59cf635000d9a737312cd4215"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> = float</td></tr>
<tr class="memdesc:aeb0eaee59cf635000d9a737312cd4215"><td class="mdescLeft">&#160;</td><td class="mdescRight">The data type for movement cost.  <a href="#aeb0eaee59cf635000d9a737312cd4215">More...</a><br /></td></tr>
<tr class="separator:aeb0eaee59cf635000d9a737312cd4215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf2b15337cb3eec1712f18c17c75c325"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> = std::shared_ptr&lt; <a class="el" href="classopenage_1_1path_1_1_node.xhtml">Node</a> &gt;</td></tr>
<tr class="memdesc:adf2b15337cb3eec1712f18c17c75c325"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type for storing navigation nodes.  <a href="#adf2b15337cb3eec1712f18c17c75c325">More...</a><br /></td></tr>
<tr class="separator:adf2b15337cb3eec1712f18c17c75c325"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2889597504b5f2d6987d132f1e5682f6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a2889597504b5f2d6987d132f1e5682f6">nodemap_t</a> = std::unordered_map&lt; <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>, <a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> &gt;</td></tr>
<tr class="memdesc:a2889597504b5f2d6987d132f1e5682f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Type for mapping tiles to nodes.  <a href="#a2889597504b5f2d6987d132f1e5682f6">More...</a><br /></td></tr>
<tr class="separator:a2889597504b5f2d6987d132f1e5682f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9eb90c4259c8bbf5764d94d9e1710991"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a9eb90c4259c8bbf5764d94d9e1710991">heap_t</a> = <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">datastructure::PairingHeap</a>&lt; <a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a>, <a class="el" href="structopenage_1_1path_1_1compare__node__cost.xhtml">compare_node_cost</a> &gt;</td></tr>
<tr class="memdesc:a9eb90c4259c8bbf5764d94d9e1710991"><td class="mdescLeft">&#160;</td><td class="mdescRight">Priority queue node item type.  <a href="#a9eb90c4259c8bbf5764d94d9e1710991">More...</a><br /></td></tr>
<tr class="separator:a9eb90c4259c8bbf5764d94d9e1710991"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a4699fb2dbfd8178b2234b9fbb935179f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a4699fb2dbfd8178b2234b9fbb935179f">to_point</a> (<a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start, <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> end, std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; passable)</td></tr>
<tr class="memdesc:a4699fb2dbfd8178b2234b9fbb935179f"><td class="mdescLeft">&#160;</td><td class="mdescRight">path between two static points  <a href="#a4699fb2dbfd8178b2234b9fbb935179f">More...</a><br /></td></tr>
<tr class="separator:a4699fb2dbfd8178b2234b9fbb935179f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a047e97b9a81a866f064ad6d6f8dddfd6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a047e97b9a81a866f064ad6d6f8dddfd6">to_object</a> (<a class="el" href="classopenage_1_1_terrain_object.xhtml">TerrainObject</a> *to_move, <a class="el" href="classopenage_1_1_terrain_object.xhtml">TerrainObject</a> *end, <a class="el" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a> rad)</td></tr>
<tr class="memdesc:a047e97b9a81a866f064ad6d6f8dddfd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">path between 2 objects, with how close to come to end point  <a href="#a047e97b9a81a866f064ad6d6f8dddfd6">More...</a><br /></td></tr>
<tr class="separator:a047e97b9a81a866f064ad6d6f8dddfd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4382f59f9523f9dd89a6689336cc353a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a4382f59f9523f9dd89a6689336cc353a">find_nearest</a> (<a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start, std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; valid_end, std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; passable)</td></tr>
<tr class="memdesc:a4382f59f9523f9dd89a6689336cc353a"><td class="mdescLeft">&#160;</td><td class="mdescRight">path to nearest object with lambda  <a href="#a4382f59f9523f9dd89a6689336cc353a">More...</a><br /></td></tr>
<tr class="separator:a4382f59f9523f9dd89a6689336cc353a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acafe3c2e0b6cef7750a14663eab6c883"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a> (<a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start, std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; valid_end, std::function&lt; <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; heuristic, std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; passable)</td></tr>
<tr class="memdesc:acafe3c2e0b6cef7750a14663eab6c883"><td class="mdescLeft">&#160;</td><td class="mdescRight">finds a path between two endpoints  <a href="#acafe3c2e0b6cef7750a14663eab6c883">More...</a><br /></td></tr>
<tr class="separator:acafe3c2e0b6cef7750a14663eab6c883"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a825dde52e9d0fd7fe6fa6970a1ec58e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a825dde52e9d0fd7fe6fa6970a1ec58e0">manhattan_cost</a> (const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;start, const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;end)</td></tr>
<tr class="memdesc:a825dde52e9d0fd7fe6fa6970a1ec58e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manhattan distance cost estimation.  <a href="#a825dde52e9d0fd7fe6fa6970a1ec58e0">More...</a><br /></td></tr>
<tr class="separator:a825dde52e9d0fd7fe6fa6970a1ec58e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d47462a02dd8b972acca24d5e05f179"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a7d47462a02dd8b972acca24d5e05f179">chebyshev_cost</a> (const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;start, const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;end)</td></tr>
<tr class="memdesc:a7d47462a02dd8b972acca24d5e05f179"><td class="mdescLeft">&#160;</td><td class="mdescRight">Chebyshev distance cost estimation.  <a href="#a7d47462a02dd8b972acca24d5e05f179">More...</a><br /></td></tr>
<tr class="separator:a7d47462a02dd8b972acca24d5e05f179"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18aa96b43da6809c7796eaa4214a3420"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a18aa96b43da6809c7796eaa4214a3420">euclidean_cost</a> (const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;start, const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;end)</td></tr>
<tr class="memdesc:a18aa96b43da6809c7796eaa4214a3420"><td class="mdescLeft">&#160;</td><td class="mdescRight">Euclidean distance cost estimation.  <a href="#a18aa96b43da6809c7796eaa4214a3420">More...</a><br /></td></tr>
<tr class="separator:a18aa96b43da6809c7796eaa4214a3420"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64affc7c4a103a4ffabfd72c454962cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a64affc7c4a103a4ffabfd72c454962cf">euclidean_squared_cost</a> (const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;start, const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;end)</td></tr>
<tr class="memdesc:a64affc7c4a103a4ffabfd72c454962cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Squared euclidean distance cost estimation.  <a href="#a64affc7c4a103a4ffabfd72c454962cf">More...</a><br /></td></tr>
<tr class="separator:a64affc7c4a103a4ffabfd72c454962cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dca43db0e959d455ac0d5c7c8cb26fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a4dca43db0e959d455ac0d5c7c8cb26fb">euclidean_squared_to_euclidean_cost</a> (const <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> euclidean_squared_value)</td></tr>
<tr class="memdesc:a4dca43db0e959d455ac0d5c7c8cb26fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculate euclidean distance from a already calculated squared euclidean distance.  <a href="#a4dca43db0e959d455ac0d5c7c8cb26fb">More...</a><br /></td></tr>
<tr class="separator:a4dca43db0e959d455ac0d5c7c8cb26fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fb2450790038eed534dfe29ad57d350"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a4fb2450790038eed534dfe29ad57d350">passable_line</a> (<a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> start, <a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> end, std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;passable, float samples=5.0f)</td></tr>
<tr class="separator:a4fb2450790038eed534dfe29ad57d350"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a7e49ca629b6fed008584d7752dc98e9a"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> {1.f/8}</td></tr>
<tr class="memdesc:a7e49ca629b6fed008584d7752dc98e9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size of phys-coord grid for path nodes.  <a href="#a7e49ca629b6fed008584d7752dc98e9a">More...</a><br /></td></tr>
<tr class="separator:a7e49ca629b6fed008584d7752dc98e9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec9efa004e47a51d7525a0959ebdfb83"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="structopenage_1_1coord_1_1phys3__delta.xhtml">coord::phys3_delta</a> const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1path.xhtml#aec9efa004e47a51d7525a0959ebdfb83">neigh_phys</a> []</td></tr>
<tr class="memdesc:aec9efa004e47a51d7525a0959ebdfb83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Phys3 delta coordinates to select for path neighbors.  <a href="#aec9efa004e47a51d7525a0959ebdfb83">More...</a><br /></td></tr>
<tr class="separator:aec9efa004e47a51d7525a0959ebdfb83"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="aeb0eaee59cf635000d9a737312cd4215"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb0eaee59cf635000d9a737312cd4215">&#9670;&nbsp;</a></span>cost_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a> = typedef float</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The data type for movement cost. </p>

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8h_source.xhtml#l00030">30</a> of file <a class="el" href="pathfinding_2path_8h_source.xhtml">path.h</a>.</p>

</div>
</div>
<a id="a9eb90c4259c8bbf5764d94d9e1710991"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9eb90c4259c8bbf5764d94d9e1710991">&#9670;&nbsp;</a></span>heap_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1path.xhtml#a9eb90c4259c8bbf5764d94d9e1710991">openage::path::heap_t</a> = typedef <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">datastructure::PairingHeap</a>&lt;<a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a>, <a class="el" href="structopenage_1_1path_1_1compare__node__cost.xhtml">compare_node_cost</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Priority queue node item type. </p>

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8h_source.xhtml#l00055">55</a> of file <a class="el" href="pathfinding_2path_8h_source.xhtml">path.h</a>.</p>

</div>
</div>
<a id="a42b919491ef91151284bc4c1cb3223a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42b919491ef91151284bc4c1cb3223a0">&#9670;&nbsp;</a></span>heuristic_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1path.xhtml#a42b919491ef91151284bc4c1cb3223a0">openage::path::heuristic_t</a> = typedef <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> (*)(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;start, const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;end)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>function pointer type for distance estimation functions. </p>

<p class="definition">Definition at line <a class="el" href="heuristics_8h_source.xhtml#l00013">13</a> of file <a class="el" href="heuristics_8h_source.xhtml">heuristics.h</a>.</p>

</div>
</div>
<a id="adf2b15337cb3eec1712f18c17c75c325"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf2b15337cb3eec1712f18c17c75c325">&#9670;&nbsp;</a></span>node_pt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">openage::path::node_pt</a> = typedef std::shared_ptr&lt;<a class="el" href="classopenage_1_1path_1_1_node.xhtml">Node</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type for storing navigation nodes. </p>

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8h_source.xhtml#l00035">35</a> of file <a class="el" href="pathfinding_2path_8h_source.xhtml">path.h</a>.</p>

</div>
</div>
<a id="a2889597504b5f2d6987d132f1e5682f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2889597504b5f2d6987d132f1e5682f6">&#9670;&nbsp;</a></span>nodemap_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="namespaceopenage_1_1path.xhtml#a2889597504b5f2d6987d132f1e5682f6">openage::path::nodemap_t</a> = typedef std::unordered_map&lt;<a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>, <a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Type for mapping tiles to nodes. </p>

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8h_source.xhtml#l00040">40</a> of file <a class="el" href="pathfinding_2path_8h_source.xhtml">path.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="acafe3c2e0b6cef7750a14663eab6c883"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acafe3c2e0b6cef7750a14663eab6c883">&#9670;&nbsp;</a></span>a_star()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a> openage::path::a_star </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>valid_end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>heuristic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>passable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>finds a path between two endpoints </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">start</td><td>the starting tile coords </td></tr>
    <tr><td class="paramname">end</td><td>the ending tile coords </td></tr>
    <tr><td class="paramname">heuristic</td><td>the heuristic for evaluating cost </td></tr>
    <tr><td class="paramname">passable</td><td>lambda to decide which terrain is passable </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>path between the given tiles </dd></dl>

<p class="definition">Definition at line <a class="el" href="a__star_8cpp_source.xhtml#l00066">66</a> of file <a class="el" href="a__star_8cpp_source.xhtml">a_star.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                                            {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// path node storage, always provides cheapest next node.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#a9eb90c4259c8bbf5764d94d9e1710991">heap_t</a> node_candidates;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// list of known tiles and corresponding node.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#a2889597504b5f2d6987d132f1e5682f6">nodemap_t</a> visited_tiles;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// add starting node</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> start_node = std::make_shared&lt;Node&gt;(start, <span class="keyword">nullptr</span>, .0f, heuristic(start));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    visited_tiles[start_node-&gt;position] = start_node;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    node_candidates.push(start_node);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    start_node-&gt;heap_node = node_candidates.push(start_node);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// track the closest we can get to the end position</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// used when no path is found</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> closest_node = start_node;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// while there are candidates to visit</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">while</span> (not node_candidates.empty()) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> best_candidate = node_candidates.pop();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        best_candidate-&gt;was_best = <span class="keyword">true</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// node to terminate the search was found</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">if</span> (valid_end(best_candidate-&gt;position)) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>) &lt;&lt;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="stringliteral">&quot;path cost is &quot;</span> &lt;&lt;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                util::FloatFixed&lt;3, 8&gt;{closest_node-&gt;future_cost});</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">return</span> best_candidate-&gt;generate_backtrace();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">// closest node for cases when target cannot be reached</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span> (best_candidate-&gt;heuristic_cost &lt; closest_node-&gt;heuristic_cost) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            closest_node = best_candidate;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// evaluate all neighbors of the current candidate for further progress</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> neighbor : best_candidate-&gt;get_neighbors(visited_tiles)) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">if</span> (neighbor-&gt;was_best) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">if</span> (not <a class="code" href="namespaceopenage_1_1path.xhtml#a4fb2450790038eed534dfe29ad57d350">passable_line</a>(best_candidate, neighbor, passable)) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordtype">bool</span> not_visited = (visited_tiles.count(neighbor-&gt;position) == 0);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> new_past_cost = best_candidate-&gt;past_cost + best_candidate-&gt;cost_to(*neighbor);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// if new cost is better than the previous path</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (not_visited or new_past_cost &lt; neighbor-&gt;past_cost) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">if</span> (not_visited) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="comment">// calculate heuristic only once per node</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    neighbor-&gt;heuristic_cost = heuristic(neighbor-&gt;position);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordflow">if</span> (neighbor-&gt;heuristic_cost &gt; closest_node-&gt;heuristic_cost * 3) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">continue</span>; <span class="comment">// dont search forever...</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="comment">// update new cost knowledge</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                neighbor-&gt;past_cost        = new_past_cost;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                neighbor-&gt;future_cost      = neighbor-&gt;past_cost + neighbor-&gt;heuristic_cost;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                neighbor-&gt;path_predecessor = best_candidate;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">if</span> (not_visited) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    neighbor-&gt;heap_node = node_candidates.push(neighbor);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    visited_tiles[neighbor-&gt;position] = neighbor;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    node_candidates.decrease(neighbor-&gt;heap_node);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>) &lt;&lt;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="stringliteral">&quot;incomplete path cost is &quot;</span> &lt;&lt;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        util::FloatFixed&lt;3, 8&gt;{closest_node-&gt;future_cost});</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> closest_node-&gt;generate_backtrace();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_aad3d76b2466dbc4f81552935f2d84faa"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">openage::log.dbg</a></div><div class="ttdeci">def dbg(msg, *args, **kwargs)</div><div class="ttdoc">debug message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00109">__init__.py:109</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a9eb90c4259c8bbf5764d94d9e1710991"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a9eb90c4259c8bbf5764d94d9e1710991">openage::path::heap_t</a></div><div class="ttdeci">datastructure::PairingHeap&lt; node_pt, compare_node_cost &gt; heap_t</div><div class="ttdoc">Priority queue node item type.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00055">path.h:55</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_adf2b15337cb3eec1712f18c17c75c325"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">openage::path::node_pt</a></div><div class="ttdeci">std::shared_ptr&lt; Node &gt; node_pt</div><div class="ttdoc">Type for storing navigation nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00035">path.h:35</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a4fb2450790038eed534dfe29ad57d350"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a4fb2450790038eed534dfe29ad57d350">openage::path::passable_line</a></div><div class="ttdeci">bool passable_line(node_pt start, node_pt end, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable, float samples)</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8cpp_source.xhtml#l00100">path.cpp:100</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a2889597504b5f2d6987d132f1e5682f6"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a2889597504b5f2d6987d132f1e5682f6">openage::path::nodemap_t</a></div><div class="ttdeci">std::unordered_map&lt; coord::phys3, node_pt &gt; nodemap_t</div><div class="ttdoc">Type for mapping tiles to nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00040">path.h:40</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="log_2____init_____8py_source.xhtml#l00109">openage::log::dbg()</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00380">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::decrease()</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00429">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::empty()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>, <a class="el" href="pathfinding_2path_8cpp_source.xhtml#l00100">passable_line()</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00236">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::pop()</a>, and <a class="el" href="pairing__heap_8h_source.xhtml#l00217">openage::datastructure::PairingHeap&lt; T, compare, heapnode_t &gt;::push()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a__star_8cpp_source.xhtml#l00058">find_nearest()</a>, <a class="el" href="a__star_8cpp_source.xhtml#l00044">to_object()</a>, and <a class="el" href="a__star_8cpp_source.xhtml#l00030">to_point()</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_acafe3c2e0b6cef7750a14663eab6c883_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_acafe3c2e0b6cef7750a14663eab6c883_icgraph.svg" width="100%" height="445"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a7d47462a02dd8b972acca24d5e05f179"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d47462a02dd8b972acca24d5e05f179">&#9670;&nbsp;</a></span>chebyshev_cost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> openage::path::chebyshev_cost </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Chebyshev distance cost estimation. </p>
<dl class="section return"><dt>Returns</dt><dd>y or x difference, whichever is higher. </dd></dl>

<p class="definition">Definition at line <a class="el" href="heuristics_8cpp_source.xhtml#l00018">18</a> of file <a class="el" href="heuristics_8cpp_source.xhtml">heuristics.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                                                      {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> dx = <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>(start.ne - end.ne).to_float();</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> dy = <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>(start.se - end.se).to_float();</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a>(dx, dy);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div><div class="ttc" id="namespacestd_xhtml_a6af851cc1249a970adde4dc422ff824a"><div class="ttname"><a href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; abs(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00491">fixed_point.h:491</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a1c0bc145caf5f0b2af8d16d29d952180"><div class="ttname"><a href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; max(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00483">fixed_point.h:483</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00491">std::abs()</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00483">std::max()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a7d47462a02dd8b972acca24d5e05f179_cgraph.svg" width="552" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a18aa96b43da6809c7796eaa4214a3420"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18aa96b43da6809c7796eaa4214a3420">&#9670;&nbsp;</a></span>euclidean_cost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> openage::path::euclidean_cost </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Euclidean distance cost estimation. </p>
<dl class="section return"><dt>Returns</dt><dd>the hypotenuse length of the rectangular triangle formed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="heuristics_8cpp_source.xhtml#l00024">24</a> of file <a class="el" href="heuristics_8cpp_source.xhtml">heuristics.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;                                                                      {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keywordflow">return</span> (end - start).length();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div></div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a__star_8cpp_source.xhtml#l00030">to_point()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a18aa96b43da6809c7796eaa4214a3420_icgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a64affc7c4a103a4ffabfd72c454962cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64affc7c4a103a4ffabfd72c454962cf">&#9670;&nbsp;</a></span>euclidean_squared_cost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> openage::path::euclidean_squared_cost </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Squared euclidean distance cost estimation. </p>
<dl class="section return"><dt>Returns</dt><dd>the square of the hypotenuse length of the rectangular triangle formed. </dd></dl>

<p class="definition">Definition at line <a class="el" href="heuristics_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="heuristics_8cpp_source.xhtml">heuristics.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                                                              {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> dx = (start.ne - end.ne).to_float();</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> dy = (start.se - end.se).to_float();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> dx * dx + dy * dy;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a__star_8cpp_source.xhtml#l00030">to_point()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a64affc7c4a103a4ffabfd72c454962cf_icgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a4dca43db0e959d455ac0d5c7c8cb26fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dca43db0e959d455ac0d5c7c8cb26fb">&#9670;&nbsp;</a></span>euclidean_squared_to_euclidean_cost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> openage::path::euclidean_squared_to_euclidean_cost </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>&#160;</td>
          <td class="paramname"><em>euclidean_squared_value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate euclidean distance from a already calculated squared euclidean distance. </p>

</div>
</div>
<a id="a4382f59f9523f9dd89a6689336cc353a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4382f59f9523f9dd89a6689336cc353a">&#9670;&nbsp;</a></span>find_nearest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a> openage::path::find_nearest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>valid_end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>passable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>path to nearest object with lambda </p>

<p class="definition">Definition at line <a class="el" href="a__star_8cpp_source.xhtml#l00058">58</a> of file <a class="el" href="a__star_8cpp_source.xhtml">a_star.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                                                  {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Use Dijkstra (hueristic = 0)</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">auto</span> zero = [](<span class="keyword">const</span> coord::phys3 &amp;) -&gt; <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> { <span class="keywordflow">return</span> .0f; };</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(start, valid_end, zero, passable);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_acafe3c2e0b6cef7750a14663eab6c883"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">openage::path::a_star</a></div><div class="ttdeci">Path a_star(coord::phys3 start, std::function&lt; bool(const coord::phys3 &amp;)&gt; valid_end, std::function&lt; cost_t(const coord::phys3 &amp;)&gt; heuristic, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable)</div><div class="ttdoc">finds a path between two endpoints</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00066">a_star.cpp:66</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a__star_8cpp_source.xhtml#l00066">a_star()</a>.</p>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a4382f59f9523f9dd89a6689336cc353a_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a825dde52e9d0fd7fe6fa6970a1ec58e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a825dde52e9d0fd7fe6fa6970a1ec58e0">&#9670;&nbsp;</a></span>manhattan_cost()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> openage::path::manhattan_cost </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Manhattan distance cost estimation. </p>
<dl class="section return"><dt>Returns</dt><dd>the sum of the x and y difference. </dd></dl>

<p class="definition">Definition at line <a class="el" href="heuristics_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="heuristics_8cpp_source.xhtml">heuristics.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;                                                                      {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> dx = <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>(start.ne - end.ne).to_float();</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> dy = <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>(start.se - end.se).to_float();</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keywordflow">return</span> dx + dy;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;}</div><div class="ttc" id="namespacestd_xhtml_a6af851cc1249a970adde4dc422ff824a"><div class="ttname"><a href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; abs(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00491">fixed_point.h:491</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00491">std::abs()</a>.</p>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a825dde52e9d0fd7fe6fa6970a1ec58e0_cgraph.svg" width="548" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a4fb2450790038eed534dfe29ad57d350"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4fb2450790038eed534dfe29ad57d350">&#9670;&nbsp;</a></span>passable_line()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::path::passable_line </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>passable</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>samples</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8cpp_source.xhtml#l00100">100</a> of file <a class="el" href="pathfinding_2path_8cpp_source.xhtml">path.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                                                                                              {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// interpolate between points and make passablity checks</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="comment">// (dont check starting position)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= samples; ++i) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment">// \todo needs more fixed-point</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordtype">double</span> percent = (double) i / samples;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <a class="code" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a> ne = (1.0 - percent) * start-&gt;position.ne.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>() + percent * end-&gt;position.ne.to_double();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <a class="code" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a> se = (1.0 - percent) * start-&gt;position.se.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>() + percent * end-&gt;position.se.to_double();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <a class="code" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a> up = (1.0 - percent) * start-&gt;position.up.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>() + percent * end-&gt;position.up.to_double();</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span> (!passable(coord::phys3{ne, se, up})) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a3d55d1b8ecdb0fd4ff8e7e3da2598554"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">openage::util::FixedPoint::to_double</a></div><div class="ttdeci">constexpr double to_double() const</div><div class="ttdoc">Converter to retrieve the number as double.</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00263">fixed_point.h:263</a></div></div>
<div class="ttc" id="namespaceopenage_1_1coord_xhtml_a257112db0574d981f4bd017656c687fe"><div class="ttname"><a href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">openage::coord::phys_t</a></div><div class="ttdeci">util::FixedPoint&lt; int64_t, phys_t_radix_pos &gt; phys_t</div><div class="ttdef"><b>Definition:</b> <a href="declarations_8h_source.xhtml#l00022">declarations.h:22</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00263">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::to_double()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a__star_8cpp_source.xhtml#l00066">a_star()</a>, and <a class="el" href="pathfinding_2tests_8cpp_source.xhtml#l00286">openage::path::tests::node_passable_line_0()</a>.</p>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a4fb2450790038eed534dfe29ad57d350_cgraph.svg" width="416" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a4fb2450790038eed534dfe29ad57d350_icgraph.svg" width="100%" height="465"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a047e97b9a81a866f064ad6d6f8dddfd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a047e97b9a81a866f064ad6d6f8dddfd6">&#9670;&nbsp;</a></span>to_object()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a> openage::path::to_object </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopenage_1_1_terrain_object.xhtml">openage::TerrainObject</a> *&#160;</td>
          <td class="paramname"><em>to_move</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classopenage_1_1_terrain_object.xhtml">openage::TerrainObject</a> *&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a>&#160;</td>
          <td class="paramname"><em>rad</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>path between 2 objects, with how close to come to end point </p>

<p class="definition">Definition at line <a class="el" href="a__star_8cpp_source.xhtml#l00044">44</a> of file <a class="el" href="a__star_8cpp_source.xhtml">a_star.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                                {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    coord::phys3 start = to_move-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#adf9b18542dda79a323947f5d8707346b">pos</a>.<a class="code" href="structopenage_1_1tile__range.xhtml#a66f28f55fc7cb96a713d76b15d855a0e">draw</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> valid_end = [&amp;](<span class="keyword">const</span> coord::phys3 &amp;pos) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> end-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">from_edge</a>(pos) &lt; rad;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    };</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> heuristic = [&amp;](<span class="keyword">const</span> coord::phys3 &amp;pos) -&gt; <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> (end-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">from_edge</a>(pos) - to_move-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#a6b82e5577be0620a320954e13d0f5f08">min_axis</a>() / 2L).to_float();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(start, valid_end, heuristic, to_move-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#af86e4e2bf2ac48fc1b37cc436a50c5a1">passable</a>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="ttc" id="classopenage_1_1_terrain_object_xhtml_a6ef3514689565c74e503570d0ba7adbb"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">openage::TerrainObject::from_edge</a></div><div class="ttdeci">virtual coord::phys_t from_edge(const coord::phys3 &amp;point) const =0</div><div class="ttdoc">how far is a point from the edge of this object</div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml_adf9b18542dda79a323947f5d8707346b"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#adf9b18542dda79a323947f5d8707346b">openage::TerrainObject::pos</a></div><div class="ttdeci">tile_range pos</div><div class="ttdoc">the range of tiles which are covered by this object</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00085">terrain_object.h:85</a></div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml_af86e4e2bf2ac48fc1b37cc436a50c5a1"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#af86e4e2bf2ac48fc1b37cc436a50c5a1">openage::TerrainObject::passable</a></div><div class="ttdeci">std::function&lt; bool(const coord::phys3 &amp;)&gt; passable</div><div class="ttdoc">decide which terrains this object can be on this function should be true if given a valid position fo...</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00119">terrain_object.h:119</a></div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml_a6b82e5577be0620a320954e13d0f5f08"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#a6b82e5577be0620a320954e13d0f5f08">openage::TerrainObject::min_axis</a></div><div class="ttdeci">virtual coord::phys_t min_axis() const =0</div><div class="ttdoc">the shortest line that can be placed across the objects center</div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_acafe3c2e0b6cef7750a14663eab6c883"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">openage::path::a_star</a></div><div class="ttdeci">Path a_star(coord::phys3 start, std::function&lt; bool(const coord::phys3 &amp;)&gt; valid_end, std::function&lt; cost_t(const coord::phys3 &amp;)&gt; heuristic, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable)</div><div class="ttdoc">finds a path between two endpoints</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00066">a_star.cpp:66</a></div></div>
<div class="ttc" id="structopenage_1_1tile__range_xhtml_a66f28f55fc7cb96a713d76b15d855a0e"><div class="ttname"><a href="structopenage_1_1tile__range.xhtml#a66f28f55fc7cb96a713d76b15d855a0e">openage::tile_range::draw</a></div><div class="ttdeci">coord::phys3 draw</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00038">terrain_object.h:38</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a__star_8cpp_source.xhtml#l00066">a_star()</a>, <a class="el" href="terrain__object_8h_source.xhtml#l00038">openage::tile_range::draw</a>, <a class="el" href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">openage::TerrainObject::from_edge()</a>, <a class="el" href="classopenage_1_1_terrain_object.xhtml#a6b82e5577be0620a320954e13d0f5f08">openage::TerrainObject::min_axis()</a>, <a class="el" href="terrain__object_8h_source.xhtml#l00119">openage::TerrainObject::passable</a>, and <a class="el" href="terrain__object_8h_source.xhtml#l00085">openage::TerrainObject::pos</a>.</p>

<p class="reference">Referenced by <a class="el" href="unit_2action_8cpp_source.xhtml#l00715">openage::MoveAction::set_path()</a>, and <a class="el" href="unit_2action_8cpp_source.xhtml#l00464">openage::IdleAction::update()</a>.</p>
<div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a047e97b9a81a866f064ad6d6f8dddfd6_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a047e97b9a81a866f064ad6d6f8dddfd6_icgraph.svg" width="566" height="150"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a4699fb2dbfd8178b2234b9fbb935179f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4699fb2dbfd8178b2234b9fbb935179f">&#9670;&nbsp;</a></span>to_point()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1path_1_1_path.xhtml">Path</a> openage::path::to_point </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::function&lt; bool(const <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt;&#160;</td>
          <td class="paramname"><em>passable</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>path between two static points </p>

<p class="definition">Definition at line <a class="el" href="a__star_8cpp_source.xhtml#l00030">30</a> of file <a class="el" href="a__star_8cpp_source.xhtml">a_star.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                                                              {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">auto</span> valid_end = [&amp;](<span class="keyword">const</span> coord::phys3 &amp;point) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#a64affc7c4a103a4ffabfd72c454962cf">euclidean_squared_cost</a>(point, end) &lt; <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a>.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">to_float</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">auto</span> heuristic = [&amp;](<span class="keyword">const</span> coord::phys3 &amp;point) -&gt; <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#a18aa96b43da6809c7796eaa4214a3420">euclidean_cost</a>(point, end);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(start, valid_end, heuristic, passable);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1path_xhtml_a7e49ca629b6fed008584d7752dc98e9a"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">openage::path::path_grid_size</a></div><div class="ttdeci">constexpr coord::phys_t path_grid_size</div><div class="ttdoc">Size of phys-coord grid for path nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00060">path.h:60</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a18aa96b43da6809c7796eaa4214a3420"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a18aa96b43da6809c7796eaa4214a3420">openage::path::euclidean_cost</a></div><div class="ttdeci">cost_t euclidean_cost(const coord::phys3 &amp;start, const coord::phys3 &amp;end)</div><div class="ttdoc">Euclidean distance cost estimation.</div><div class="ttdef"><b>Definition:</b> <a href="heuristics_8cpp_source.xhtml#l00024">heuristics.cpp:24</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_acafe3c2e0b6cef7750a14663eab6c883"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">openage::path::a_star</a></div><div class="ttdeci">Path a_star(coord::phys3 start, std::function&lt; bool(const coord::phys3 &amp;)&gt; valid_end, std::function&lt; cost_t(const coord::phys3 &amp;)&gt; heuristic, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable)</div><div class="ttdoc">finds a path between two endpoints</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00066">a_star.cpp:66</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a64affc7c4a103a4ffabfd72c454962cf"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a64affc7c4a103a4ffabfd72c454962cf">openage::path::euclidean_squared_cost</a></div><div class="ttdeci">cost_t euclidean_squared_cost(const coord::phys3 &amp;start, const coord::phys3 &amp;end)</div><div class="ttdoc">Squared euclidean distance cost estimation.</div><div class="ttdef"><b>Definition:</b> <a href="heuristics_8cpp_source.xhtml#l00028">heuristics.cpp:28</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a07a0fa1c13f5aff3f184a2d82574e7e7"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">openage::util::FixedPoint::to_float</a></div><div class="ttdeci">constexpr float to_float() const</div><div class="ttdoc">Converter to retrieve the number as float.</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00252">fixed_point.h:252</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a__star_8cpp_source.xhtml#l00066">a_star()</a>, <a class="el" href="heuristics_8cpp_source.xhtml#l00024">euclidean_cost()</a>, <a class="el" href="heuristics_8cpp_source.xhtml#l00028">euclidean_squared_cost()</a>, <a class="el" href="pathfinding_2path_8h_source.xhtml#l00060">path_grid_size</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00252">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::to_float()</a>.</p>

<p class="reference">Referenced by <a class="el" href="unit_2action_8cpp_source.xhtml#l00715">openage::MoveAction::set_path()</a>.</p>
<div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a4699fb2dbfd8178b2234b9fbb935179f_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1path_a4699fb2dbfd8178b2234b9fbb935179f_icgraph.svg" width="559" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="aec9efa004e47a51d7525a0959ebdfb83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec9efa004e47a51d7525a0959ebdfb83">&#9670;&nbsp;</a></span>neigh_phys</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structopenage_1_1coord_1_1phys3__delta.xhtml">coord::phys3_delta</a> const openage::path::neigh_phys[]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  1, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> * -1, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  1, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  0, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  1, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  1, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  0, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  1, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> * -1, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  1, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> * -1, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  0, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> * -1, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> * -1, 0},</div><div class="line">    {<a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> *  0, <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a> * -1, 0}</div><div class="line">}</div><div class="ttc" id="namespaceopenage_1_1path_xhtml_a7e49ca629b6fed008584d7752dc98e9a"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">openage::path::path_grid_size</a></div><div class="ttdeci">constexpr coord::phys_t path_grid_size</div><div class="ttdoc">Size of phys-coord grid for path nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00060">path.h:60</a></div></div>
</div><!-- fragment -->
<p>Phys3 delta coordinates to select for path neighbors. </p>

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8h_source.xhtml#l00065">65</a> of file <a class="el" href="pathfinding_2path_8h_source.xhtml">path.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pathfinding_2path_8cpp_source.xhtml#l00083">openage::path::Node::get_neighbors()</a>.</p>

</div>
</div>
<a id="a7e49ca629b6fed008584d7752dc98e9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e49ca629b6fed008584d7752dc98e9a">&#9670;&nbsp;</a></span>path_grid_size</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="namespaceopenage_1_1coord.xhtml#a257112db0574d981f4bd017656c687fe">coord::phys_t</a> openage::path::path_grid_size {1.f/8}</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Size of phys-coord grid for path nodes. </p>

<p class="definition">Definition at line <a class="el" href="pathfinding_2path_8h_source.xhtml#l00060">60</a> of file <a class="el" href="pathfinding_2path_8h_source.xhtml">path.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="unit_2action_8cpp_source.xhtml#l00067">openage::UnitAction::adjacent_range()</a>, <a class="el" href="ability_8cpp_source.xhtml#l00079">openage::MoveAbility::invoke()</a>, and <a class="el" href="a__star_8cpp_source.xhtml#l00030">to_point()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1path.xhtml">path</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
