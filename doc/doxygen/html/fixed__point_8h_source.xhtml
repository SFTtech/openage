<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/fixed_point.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('fixed__point_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">fixed_point.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fixed__point_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;climits&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="misc_8h.xhtml">misc.h</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span>util {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> amount, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;constexpr <span class="keyword">static</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;(amount + (std::is_signed&lt;T&gt;::value ? 1 : 0) &lt; <span class="keyword">sizeof</span>(T) * CHAR_BIT), T&gt;::type</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#afe036a1f307dd739bb4855cb0b799f38">   28</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#afe036a1f307dd739bb4855cb0b799f38">safe_shiftleft</a>(T value) {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keywordflow">return</span> static_cast&lt;T&gt;(</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keyword">static_cast&lt;</span>typename std::make_unsigned&lt;T&gt;::type<span class="keyword">&gt;</span>(value) &lt;&lt; amount</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    );</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;}</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> amount, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;constexpr <span class="keyword">static</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;(amount &gt;= <span class="keyword">sizeof</span>(T) * CHAR_BIT), T&gt;::type</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">   43</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">safe_shiftright</a>(T value) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">return</span> value &lt; 0 ? -1 : 0;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> amount, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;constexpr <span class="keyword">static</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;(amount &lt; <span class="keyword">sizeof</span>(T) * CHAR_BIT), T&gt;::type</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aa341b7244c12ea3496bdcd56e226d791">   50</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">safe_shiftright</a>(T value) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">return</span> value &gt;&gt; amount;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">int</span> amount, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;constexpr <span class="keyword">static</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;(amount &lt; 0), T&gt;::type</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a101479979c88a661de76a6e70fb2978b">   62</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#a101479979c88a661de76a6e70fb2978b">safe_shift</a>(T value) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">safe_shiftright</a>&lt;-amount&gt;(value);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">int</span> amount, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;constexpr <span class="keyword">static</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;(amount &gt;= 0), T&gt;::type</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a5346916e27392c8a141e10890f42925e">   70</a></span>&#160;<a class="code" href="namespaceopenage_1_1util.xhtml#a101479979c88a661de76a6e70fb2978b">safe_shift</a>(T value) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> safe_shiftleft&lt;amount&gt;(value);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="keywordtype">int</span>_type, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> fractional_bits&gt;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml">   86</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#ab22d295eb3c55c51a00f584aa783bf7e">   88</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ab22d295eb3c55c51a00f584aa783bf7e">raw_type</a> = int_type;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a428d93899638a0471ea60c5d9850292c">   89</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">this_type</a> = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;int_type, fractional_bits&gt;</a>;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac2879fa6f6c8a01ca162ec4f1fdaca57">   90</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac2879fa6f6c8a01ca162ec4f1fdaca57">unsigned_int_type</a> = <span class="keyword">typename</span> std::make_unsigned&lt;int_type&gt;::type;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">same_type_but_unsigned</a> = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>&lt;<span class="keyword">typename</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac2879fa6f6c8a01ca162ec4f1fdaca57">FixedPoint::unsigned_int_type</a>,</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a42da6bbdfdd34c65db112929c3f94e71">   92</a></span>&#160;                                              fractional_bits&gt;;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Helper function to create the scaling factors that are used below.</span></div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#adbd7a81351040e264df9f0b82bc8e494">   96</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">double</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#adbd7a81351040e264df9f0b82bc8e494">power_of_two</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> power) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">double</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> = 1.0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">while</span> (power--) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a> *= 2.0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">  107</a></span>&#160;    int_type <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a970aefe3504ce8bdcb0ad2f8a21e4e57">  109</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a970aefe3504ce8bdcb0ad2f8a21e4e57">from_double_factor</a> = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#adbd7a81351040e264df9f0b82bc8e494">power_of_two</a>(fractional_bits);</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a91787091503691b05e2bd1c0df99a326">  110</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a91787091503691b05e2bd1c0df99a326">to_double_factor</a> = 1 / <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a970aefe3504ce8bdcb0ad2f8a21e4e57">from_double_factor</a>;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a887393057ecf8e0b2505086842768776">  111</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a887393057ecf8e0b2505086842768776">from_float_factor</a> = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a970aefe3504ce8bdcb0ad2f8a21e4e57">from_double_factor</a>;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a10ad20f2db009ff3b153a1a5812038a6">  112</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">float</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a10ad20f2db009ff3b153a1a5812038a6">to_float_factor</a> = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a91787091503691b05e2bd1c0df99a326">to_double_factor</a>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa5d7fef738e76cec9c68bc6412acaa5e">  114</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa5d7fef738e76cec9c68bc6412acaa5e">approx_decimal_places</a> = static_cast&lt;unsigned int&gt;(</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        static_cast&lt;double&gt;(fractional_bits) * 0.30103 + 1</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    );</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// constexpr helper function for get_fractional_part()</span></div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a2858e0798bf7e033c56f6ec653180588">  119</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">typename</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac2879fa6f6c8a01ca162ec4f1fdaca57">FixedPoint::unsigned_int_type</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a2858e0798bf7e033c56f6ec653180588">fractional_part_bitmask</a>() {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">// return ~(MAX_VAL &lt;&lt; fractional_bits);</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> static_cast&lt;FixedPoint::unsigned_int_type&gt;(</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            ~(</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                safe_shiftleft&lt;fractional_bits, FixedPoint::unsigned_int_type&gt;(</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    <a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::numeric_limits&lt;FixedPoint::unsigned_int_type&gt;::max</a>()</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        )));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keyword">friend</span> std::hash&lt;openage::util::FixedPoint&lt;int_type, fractional_bits&gt;&gt;;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a5f225133013eccb8bbdd9a4628308a59">  130</a></span>&#160;    <span class="keyword">static</span> constexpr int_type <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a5f225133013eccb8bbdd9a4628308a59">raw_value_from_double</a>(<span class="keywordtype">double</span> n) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">return</span> static_cast&lt;int_type&gt;(n * <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a970aefe3504ce8bdcb0ad2f8a21e4e57">from_double_factor</a>);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// obligatory copy constructor / assignment operator.</span></div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a50908a8761e19864f030d822856c3227">  136</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a50908a8761e19864f030d822856c3227">FixedPoint</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;other)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        :</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>(other.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>) {}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac0e556f78cde2795b26c10709032f3e7">  140</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac0e556f78cde2795b26c10709032f3e7">FixedPoint</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;&amp;other) noexcept</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        :</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>(<a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(other.raw_value)) {}</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a4e39dbaf3295e64070ba80f9972e3513">  144</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a4e39dbaf3295e64070ba80f9972e3513">operator =</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;other) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        this-&gt;raw_value = other.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a65edb5b4e90d9e34dbe44d32890759b9">  149</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a4e39dbaf3295e64070ba80f9972e3513">operator =</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;&amp;other) noexcept {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        this-&gt;raw_value = <a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(other.raw_value);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a0a2d3297574a2e5996aefd540a7b0dfb">  157</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a0a2d3297574a2e5996aefd540a7b0dfb">FixedPoint</a>()</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        :</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>(0) {}</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="comment">// implicitly construct from double.</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// for other creations, use the factory methods below.</span></div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a52f8593a8358172f788ee3597c4b5981">  166</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a52f8593a8358172f788ee3597c4b5981">FixedPoint</a>(<span class="keywordtype">double</span> n) : <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a>::<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a5f225133013eccb8bbdd9a4628308a59">raw_value_from_double</a>(n)) {}</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac15c9eac48a2d30284089c642f7176b5">  171</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ac15c9eac48a2d30284089c642f7176b5">zero</a>() {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a703b41f0cb3fb93f1b5dcd20e6c968b4">FixedPoint::from_int</a>(0);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a703b41f0cb3fb93f1b5dcd20e6c968b4">  178</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a703b41f0cb3fb93f1b5dcd20e6c968b4">from_int</a>(int_type n) {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::from_raw_value</a>(safe_shiftleft&lt;fractional_bits, int_type&gt;(n));</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a7cc8c2bd1dad2337630abf6f6e42aef3">  185</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a7cc8c2bd1dad2337630abf6f6e42aef3">from_float</a>(<span class="keywordtype">float</span> n) {</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::from_raw_value</a>(static_cast&lt;int_type&gt;(n * <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a887393057ecf8e0b2505086842768776">from_float_factor</a>));</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">  192</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">from_double</a>(<span class="keywordtype">double</span> n) {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::from_raw_value</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a5f225133013eccb8bbdd9a4628308a59">FixedPoint::raw_value_from_double</a>(n));</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> other_<span class="keywordtype">int</span>_type, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> other_fractional_bits&gt;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a6602fc6e0cf22db46a7a2c4d65bbf866">  200</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a6602fc6e0cf22db46a7a2c4d65bbf866">from_fixedpoint</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;other_int_type, other_fractional_bits&gt;</a> &amp;other) {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::from_raw_value</a>(</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            safe_shift&lt;fractional_bits - other_fractional_bits, int_type&gt;(other.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>())</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        );</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1432784032d62a4b43961b88de32ae86">  209</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1432784032d62a4b43961b88de32ae86">min_value</a>() {</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::from_raw_value</a>(<a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::numeric_limits&lt;int_type&gt;::min</a>());</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a30783d598a6f1a133ba94b3e0bf319a0">  216</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a30783d598a6f1a133ba94b3e0bf319a0">max_value</a>() {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::from_raw_value</a>(<a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::numeric_limits&lt;int_type&gt;::max</a>());</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">  224</a></span>&#160;    <span class="keyword">static</span> constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">from_raw_value</a>(int_type <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>.raw_value = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">result</a>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">  234</a></span>&#160;    constexpr int_type <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    }</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a12dc86de2b985fdaff044ed9ab38e453">  241</a></span>&#160;    constexpr int_type <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a12dc86de2b985fdaff044ed9ab38e453">to_int</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordflow">return</span> safe_shiftright&lt;fractional_bits, int_type&gt;(this-&gt;raw_value);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    }</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a8adbb099a4f7a0db820f923e8ffc1a02">  245</a></span>&#160;    constexpr <span class="keyword">explicit</span> <span class="keyword">operator</span> int()<span class="keyword"> const </span>{</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a12dc86de2b985fdaff044ed9ab38e453">to_int</a>();</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    }</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">  252</a></span>&#160;    constexpr <span class="keywordtype">float</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">to_float</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordflow">return</span> static_cast&lt;float&gt;(this-&gt;raw_value) * <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a10ad20f2db009ff3b153a1a5812038a6">FixedPoint::to_float_factor</a>;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a132f65f53a2a87b36f880fc567ec857f">  256</a></span>&#160;    constexpr <span class="keyword">explicit</span> <span class="keyword">operator</span> float()<span class="keyword"> const </span>{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">to_float</a>();</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">  263</a></span>&#160;    constexpr <span class="keywordtype">double</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordflow">return</span> static_cast&lt;double&gt;(this-&gt;raw_value) * <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a91787091503691b05e2bd1c0df99a326">FixedPoint::to_double_factor</a>;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a0c4cacca4318bbc4f50a568b1fc1789c">  267</a></span>&#160;    constexpr <span class="keyword">explicit</span> <span class="keyword">operator</span> double()<span class="keyword"> const </span>{</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    }</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#aff707b86b379bbb8491212631d1df769">  274</a></span>&#160;    std::string <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aff707b86b379bbb8491212631d1df769">str</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        std::ostringstream builder;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        builder &lt;&lt; <span class="stringliteral">&quot;FixedPoint(&quot;</span> &lt;&lt; this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>()</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;, fracbits=&quot;</span> &lt;&lt; fractional_bits</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;, raw=&quot;</span> &lt;&lt; this-&gt;raw_value</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordflow">return</span> builder.str();</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    };</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a41ce8a71883f18088e7876aa8e2600e4">  286</a></span>&#160;    constexpr <span class="keyword">typename</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint::same_type_but_unsigned</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a41ce8a71883f18088e7876aa8e2600e4">get_fractional_part</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment">// returns a new variable with only the bits from</span></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="comment">// fractional_part_bitmask set.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::same_type_but_unsigned::from_raw_value</a>(</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            static_cast&lt;FixedPoint::unsigned_int_type&gt;(this-&gt;raw_value) &amp;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            std::integral_constant&lt;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                int_type,</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a2858e0798bf7e033c56f6ec653180588">FixedPoint::fractional_part_bitmask</a>()</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            &gt;::value</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        );</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">// Comparison operators for comparison with other</span></div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#abc8d2dddcdda2d24df395759a4a3f1ab">  299</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#abc8d2dddcdda2d24df395759a4a3f1ab">operator ==</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a> == o.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#ad6bf5d9ab688b4f8b56a0f1e5a68f572">  303</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ad6bf5d9ab688b4f8b56a0f1e5a68f572">operator !=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a> != o.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    }</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a5caaef66c0cf9920f83bfb20524bb2ef">  307</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a5caaef66c0cf9920f83bfb20524bb2ef">operator &lt;</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a> &lt; o.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1780e721d3db4c21864c9172a63198c6">  311</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1780e721d3db4c21864c9172a63198c6">operator &gt;</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a> &gt; o.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a211506fc52a7e2a73b6eba2cf6d2f66a">  315</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a211506fc52a7e2a73b6eba2cf6d2f66a">operator &lt;=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a> &lt;= o.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    }</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a97237e56fbe59abeec8469929c0f56b7">  319</a></span>&#160;    constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a97237e56fbe59abeec8469929c0f56b7">operator &gt;=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;o)<span class="keyword"> const </span>{</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a> &gt;= o.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="comment">// Unary operators</span></div><div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a78cd3057f1c6d052604a7ea7b3f97b8b">  324</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a78cd3057f1c6d052604a7ea7b3f97b8b">operator +</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="comment">// the inner_int_type template is required for enable_if.</span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> inner_<span class="keywordtype">int</span>_type=<span class="keywordtype">int</span>_type&gt;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    constexpr</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keyword">typename</span> std::enable_if&lt;std::is_signed&lt;inner_int_type&gt;::value, <span class="keyword">typename</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint::this_type</a>&gt;::type</div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#aec3105441d3a31509744116f782fe3e7">  332</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aec3105441d3a31509744116f782fe3e7">operator -</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        static_assert(std::is_same&lt;inner_int_type, int_type&gt;::value, <span class="stringliteral">&quot;inner_int_type must == int_type&quot;</span>);</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint::this_type::from_raw_value</a>(-this-&gt;raw_value);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa0eb736578910b123ea19652c670daab">  338</a></span>&#160;    constexpr <span class="keywordtype">double</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa0eb736578910b123ea19652c670daab">hypot</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> rhs) {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">std::hypot</a>(this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>(), rhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>());</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a36dd5c06bff45023368c192f65f38182">  343</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a36dd5c06bff45023368c192f65f38182">hypotfp</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> rhs) {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a>(this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa0eb736578910b123ea19652c670daab">hypot</a>(rhs));</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">// Basic operators</span></div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1066c5bc35ea84af4566a7950541a7ab">  348</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1066c5bc35ea84af4566a7950541a7ab">operator +=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;n) {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        this-&gt;raw_value += n.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a0fc27c9ffb04dc23906380db8f228e53">  353</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a0fc27c9ffb04dc23906380db8f228e53">operator -=</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;n) {</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        this-&gt;raw_value -= n.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    }</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> N&gt;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">typename</span> std::enable_if&lt;std::is_arithmetic&lt;N&gt;::value, <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;&gt;::type</div><div class="line"><a name="l00363"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#acf610f0ece81e2c4cbf0a405aba9c7c8">  363</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#acf610f0ece81e2c4cbf0a405aba9c7c8">operator *=</a>(<span class="keyword">const</span> N &amp;rhs) {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        this-&gt;raw_value *= rhs;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> N&gt;</div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a8a479bc1182f83c94eecc577eb493d7f">  372</a></span>&#160;    constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a8a479bc1182f83c94eecc577eb493d7f">operator /=</a>(<span class="keyword">const</span> N &amp;rhs) {</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        this-&gt;raw_value = <a class="code" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">div</a>(this-&gt;raw_value, static_cast&lt;int_type&gt;(rhs));</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    }</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a2836456e5e71b3c8ddb7815c7040599b">  377</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a2836456e5e71b3c8ddb7815c7040599b">swap</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;rhs) {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        std::swap(this-&gt;raw_value, rhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    }</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="comment">// I/O operators</span></div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a251133bb4a6195067bf32e242bba0d88">  382</a></span>&#160;    <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a251133bb4a6195067bf32e242bba0d88">operator &lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;n) {</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        os &lt;&lt; std::fixed &lt;&lt; std::setprecision(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa5d7fef738e76cec9c68bc6412acaa5e">FixedPoint::approx_decimal_places</a>) &lt;&lt; double(n);</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">return</span> os;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#a37518ac1b10368036cfce134555d5512">  387</a></span>&#160;    <span class="keyword">friend</span> std::istream &amp;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a37518ac1b10368036cfce134555d5512">operator &gt;&gt;</a>(std::istream &amp;is, <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint</a> &amp;n) {</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keywordtype">double</span> temp;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        is &gt;&gt; temp;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        n = temp;</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        <span class="keywordflow">return</span> is;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_fixed_point.xhtml#ae963a0d669b00ec8a65da1bf0041172a">  394</a></span>&#160;    constexpr <span class="keywordtype">double</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ae963a0d669b00ec8a65da1bf0041172a">sqrt</a>() {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a>(this-&gt;<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">to_double</a>());</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;};</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">// Binary operators</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> F&gt;</div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a4202ea3aad51da9bcef0572898fc7175">  406</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#a4202ea3aad51da9bcef0572898fc7175">operator +</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> &amp;rhs) {</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint&lt;I, F&gt;::from_raw_value</a>(lhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>() + rhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>());</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;}</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> F&gt;</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a4e4ab8c3700eebbe1f3367ea7aa4de17">  414</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#a4202ea3aad51da9bcef0572898fc7175">operator +</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> &amp;lhs, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;rhs) {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a>{lhs} + <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">FixedPoint&lt;I, F&gt;::from_double</a>(rhs);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> F&gt;</div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a976790c1ec88a9cce32a887ca49526db">  422</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#a976790c1ec88a9cce32a887ca49526db">operator -</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> &amp;lhs, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> &amp;rhs) {</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint&lt;I, F&gt;::from_raw_value</a>(lhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>() - rhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>());</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> F&gt;</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a0691ea67643c9ec3e8ef552a45583a81">  430</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#a976790c1ec88a9cce32a887ca49526db">operator -</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> &amp;lhs, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;rhs) {</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a>{lhs} - <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">FixedPoint&lt;I, F&gt;::from_double</a>(rhs);</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;}</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F, <span class="keyword">typename</span> N&gt;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="keyword">typename</span> std::enable_if&lt;std::is_arithmetic&lt;N&gt;::value, FixedPoint&lt;I, F&gt;&gt;::type</div><div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">  440</a></span>&#160;constexpr <a class="code" href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">operator *</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> lhs, <span class="keyword">const</span> N &amp;rhs) {</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint&lt;I, F&gt;::from_raw_value</a>(lhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>() * rhs);</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;}</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="comment"> FixedPoint * FixedPoint is missing to prevent surprising overflows.</span></div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="comment"> using fp = FixedPoint&lt;uint64_t, 16&gt;;</span></div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;<span class="comment"> fp a = fp.from_int(1 &lt;&lt; 16);</span></div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;<span class="comment"> =&gt; a * a will overflow because:</span></div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;<span class="comment">    a.rawvalue == 2^(16+16) == 2^32</span></div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;<span class="comment">    -&gt; a.rawvalue * a.rawvalue == 2^64 =&gt; pwnt</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F, <span class="keyword">typename</span> N&gt;</div><div class="line"><a name="l00459"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a4e6ea5affdccd958479d0eba1b74ce0f">  459</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#a4e6ea5affdccd958479d0eba1b74ce0f">operator /</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">FixedPoint&lt;I, F&gt;</a> lhs, <span class="keyword">const</span> N &amp;rhs) {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">FixedPoint&lt;I, F&gt;::from_raw_value</a>(<a class="code" href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">div</a>(lhs.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>(), static_cast&lt;I&gt;(rhs)));</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;}</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;}} <span class="comment">// namespace openage::util</span></div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="comment">// std function overloads</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacestd.xhtml">std</a> {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00470"></a><span class="lineno"><a class="line" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">  470</a></span>&#160;constexpr <span class="keywordtype">double</span> <a class="code" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">sqrt</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> n) {</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">return</span> n.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#ae963a0d669b00ec8a65da1bf0041172a">sqrt</a>();</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;}</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00475"></a><span class="lineno"><a class="line" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">  475</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">min</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> x, <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> y) {</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">openage::util::FixedPoint&lt;I, F&gt;::from_raw_value</a>(</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        <a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a>(x.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>(),</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                 y.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>())</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    );</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">  483</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">max</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> x, <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> y) {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">openage::util::FixedPoint&lt;I, F&gt;::from_raw_value</a>(</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        <a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a>(x.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>(),</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                 y.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>())</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    );</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;}</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00491"></a><span class="lineno"><a class="line" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">  491</a></span>&#160;constexpr <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">abs</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> n) {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">openage::util::FixedPoint&lt;I, F&gt;::from_raw_value</a>(</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        <a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>(n.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">get_raw_value</a>())</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    );</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00498"></a><span class="lineno"><a class="line" href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">  498</a></span>&#160;constexpr <span class="keywordtype">double</span> <a class="code" href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">hypot</a>(<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> x, <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> y) {</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;    <span class="keywordflow">return</span> x.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#aa0eb736578910b123ea19652c670daab">hypot</a>(y);</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;}</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="structstd_1_1hash_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml">  503</a></span>&#160;<span class="keyword">struct </span><a class="code" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">hash</a>&lt;<a class="code" href="namespaceopenage.xhtml">openage</a>::util::FixedPoint&lt;I, F&gt;&gt; {</div><div class="line"><a name="l00504"></a><span class="lineno"><a class="line" href="structstd_1_1hash_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#a4decb3a80285baa0de819035ddbfe50b">  504</a></span>&#160;    constexpr <span class="keywordtype">size_t</span> operator ()(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> &amp;n)<span class="keyword"> const </span>{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <span class="keywordflow">return</span> std::hash&lt;I&gt;{}(n.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">raw_value</a>);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    }</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;};</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keywordtype">unsigned</span> F&gt;</div><div class="line"><a name="l00510"></a><span class="lineno"><a class="line" href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml">  510</a></span>&#160;<span class="keyword">struct </span>numeric_limits&lt;<a class="code" href="namespaceopenage.xhtml">openage</a>::util::FixedPoint&lt;I, F&gt;&gt; {</div><div class="line"><a name="l00511"></a><span class="lineno"><a class="line" href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#a6691046f0043d8eede86b6c920718b0e">  511</a></span>&#160;    constexpr <span class="keyword">static</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> <a class="code" href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#a6691046f0043d8eede86b6c920718b0e">min</a>() {</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a1432784032d62a4b43961b88de32ae86">openage::util::FixedPoint&lt;I, F&gt;::min_value</a>();</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;    }</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div><div class="line"><a name="l00515"></a><span class="lineno"><a class="line" href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#acd9652a369be3466ee4753147f2ec823">  515</a></span>&#160;    constexpr <span class="keyword">static</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt;I, F&gt;</a> <a class="code" href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#acd9652a369be3466ee4753147f2ec823">max</a>() {</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a30783d598a6f1a133ba94b3e0bf319a0">openage::util::FixedPoint&lt;I, F&gt;::max_value</a>();</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    }</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;};</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;} <span class="comment">// namespace std</span></div><div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a2836456e5e71b3c8ddb7815c7040599b"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a2836456e5e71b3c8ddb7815c7040599b">openage::util::FixedPoint::swap</a></div><div class="ttdeci">void swap(FixedPoint &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00377">fixed_point.h:377</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a3bf715e5d34cd92f0d595d414888f69b"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a3bf715e5d34cd92f0d595d414888f69b">openage::util::FixedPoint::raw_value</a></div><div class="ttdeci">int_type raw_value</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00107">fixed_point.h:107</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a0a2d3297574a2e5996aefd540a7b0dfb"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a0a2d3297574a2e5996aefd540a7b0dfb">openage::util::FixedPoint::FixedPoint</a></div><div class="ttdeci">constexpr FixedPoint()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00157">fixed_point.h:157</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a10ad20f2db009ff3b153a1a5812038a6"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a10ad20f2db009ff3b153a1a5812038a6">openage::util::FixedPoint::to_float_factor</a></div><div class="ttdeci">static constexpr const float to_float_factor</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00112">fixed_point.h:112</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a1780e721d3db4c21864c9172a63198c6"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a1780e721d3db4c21864c9172a63198c6">openage::util::FixedPoint::operator &gt;</a></div><div class="ttdeci">constexpr bool operator &gt;(const FixedPoint &amp;o) const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00311">fixed_point.h:311</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a34ba6f7abd32acb48dfc6ad6efdc1bc8"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a34ba6f7abd32acb48dfc6ad6efdc1bc8">openage::util::div</a></div><div class="ttdeci">constexpr T div(T x, T m)</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00075">misc.h:75</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a251133bb4a6195067bf32e242bba0d88"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a251133bb4a6195067bf32e242bba0d88">openage::util::FixedPoint::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;os, const FixedPoint &amp;n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00382">fixed_point.h:382</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml_a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e"><div class="ttname"><a href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">openage::ability_type::move</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a34591a1d8ee5da3f16f56554590d5e16"><div class="ttname"><a href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; min(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00475">fixed_point.h:475</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a703b41f0cb3fb93f1b5dcd20e6c968b4"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a703b41f0cb3fb93f1b5dcd20e6c968b4">openage::util::FixedPoint::from_int</a></div><div class="ttdeci">static constexpr FixedPoint from_int(int_type n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00178">fixed_point.h:178</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a4202ea3aad51da9bcef0572898fc7175"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a4202ea3aad51da9bcef0572898fc7175">openage::util::operator+</a></div><div class="ttdeci">constexpr FixedPoint&lt; I, F &gt; operator+(const FixedPoint&lt; I, F &gt; &amp;lhs, const FixedPoint&lt; I, F &gt; &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00406">fixed_point.h:406</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a2858e0798bf7e033c56f6ec653180588"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a2858e0798bf7e033c56f6ec653180588">openage::util::FixedPoint::fractional_part_bitmask</a></div><div class="ttdeci">static constexpr FixedPoint::unsigned_int_type fractional_part_bitmask()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00119">fixed_point.h:119</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a50908a8761e19864f030d822856c3227"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a50908a8761e19864f030d822856c3227">openage::util::FixedPoint::FixedPoint</a></div><div class="ttdeci">constexpr FixedPoint(const FixedPoint &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00136">fixed_point.h:136</a></div></div>
<div class="ttc" id="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4_xhtml_a6691046f0043d8eede86b6c920718b0e"><div class="ttname"><a href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#a6691046f0043d8eede86b6c920718b0e">std::numeric_limits&lt; openage::util::FixedPoint&lt; I, F &gt; &gt;::min</a></div><div class="ttdeci">static constexpr openage::util::FixedPoint&lt; I, F &gt; min()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00511">fixed_point.h:511</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a483c36345c5b597c1626162bc96dc52c"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">openage::util::FixedPoint::from_double</a></div><div class="ttdeci">static constexpr FixedPoint from_double(double n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00192">fixed_point.h:192</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a8a479bc1182f83c94eecc577eb493d7f"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a8a479bc1182f83c94eecc577eb493d7f">openage::util::FixedPoint::operator/=</a></div><div class="ttdeci">constexpr FixedPoint &amp; operator/=(const N &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00372">fixed_point.h:372</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a1f37c9c7cfd9dbe87e3ce104476bbda4"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a1f37c9c7cfd9dbe87e3ce104476bbda4">openage::util::safe_shiftright</a></div><div class="ttdeci">static constexpr std::enable_if&lt;(amount &gt;=sizeof(T) *CHAR_BIT), T &gt;::type safe_shiftright(T value)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00043">fixed_point.h:43</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a37518ac1b10368036cfce134555d5512"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a37518ac1b10368036cfce134555d5512">openage::util::FixedPoint::operator &gt;&gt;</a></div><div class="ttdeci">friend std::istream &amp; operator &gt;&gt;(std::istream &amp;is, FixedPoint &amp;n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00387">fixed_point.h:387</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a6af851cc1249a970adde4dc422ff824a"><div class="ttname"><a href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; abs(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00491">fixed_point.h:491</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a0fc27c9ffb04dc23906380db8f228e53"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a0fc27c9ffb04dc23906380db8f228e53">openage::util::FixedPoint::operator -=</a></div><div class="ttdeci">constexpr FixedPoint &amp; operator -=(const FixedPoint &amp;n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00353">fixed_point.h:353</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a12dc86de2b985fdaff044ed9ab38e453"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a12dc86de2b985fdaff044ed9ab38e453">openage::util::FixedPoint::to_int</a></div><div class="ttdeci">constexpr int_type to_int() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00241">fixed_point.h:241</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1testing_xhtml_ac25bf81db406af62d08113ef7ae9fd6e"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1testing.xhtml#ac25bf81db406af62d08113ef7ae9fd6e">openage::testing.testing.result</a></div><div class="ttdeci">def result(value)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8py_source.xhtml#l00044">testing.py:44</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a970aefe3504ce8bdcb0ad2f8a21e4e57"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a970aefe3504ce8bdcb0ad2f8a21e4e57">openage::util::FixedPoint::from_double_factor</a></div><div class="ttdeci">static constexpr const double from_double_factor</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00109">fixed_point.h:109</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_ab22d295eb3c55c51a00f584aa783bf7e"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#ab22d295eb3c55c51a00f584aa783bf7e">openage::util::FixedPoint&lt; int64_t, 16 &gt;::raw_type</a></div><div class="ttdeci">int64_t raw_type</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00088">fixed_point.h:88</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_ad6bf5d9ab688b4f8b56a0f1e5a68f572"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#ad6bf5d9ab688b4f8b56a0f1e5a68f572">openage::util::FixedPoint::operator !=</a></div><div class="ttdeci">constexpr bool operator !=(const FixedPoint &amp;o) const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00303">fixed_point.h:303</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="hash__functions_8h_source.xhtml#l00009">hash_functions.h:9</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a91787091503691b05e2bd1c0df99a326"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a91787091503691b05e2bd1c0df99a326">openage::util::FixedPoint::to_double_factor</a></div><div class="ttdeci">static constexpr const double to_double_factor</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00110">fixed_point.h:110</a></div></div>
<div class="ttc" id="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4_xhtml_acd9652a369be3466ee4753147f2ec823"><div class="ttname"><a href="structstd_1_1numeric__limits_3_01openage_1_1util_1_1_fixed_point_3_01_i_00_01_f_01_4_01_4.xhtml#acd9652a369be3466ee4753147f2ec823">std::numeric_limits&lt; openage::util::FixedPoint&lt; I, F &gt; &gt;::max</a></div><div class="ttdeci">static constexpr openage::util::FixedPoint&lt; I, F &gt; max()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00515">fixed_point.h:515</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a4e39dbaf3295e64070ba80f9972e3513"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a4e39dbaf3295e64070ba80f9972e3513">openage::util::FixedPoint::operator=</a></div><div class="ttdeci">constexpr FixedPoint &amp; operator=(const FixedPoint &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00144">fixed_point.h:144</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_ac2879fa6f6c8a01ca162ec4f1fdaca57"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#ac2879fa6f6c8a01ca162ec4f1fdaca57">openage::util::FixedPoint&lt; int64_t, 16 &gt;::unsigned_int_type</a></div><div class="ttdeci">typename std::make_unsigned&lt; int64_t &gt;::type unsigned_int_type</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00090">fixed_point.h:90</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a6602fc6e0cf22db46a7a2c4d65bbf866"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a6602fc6e0cf22db46a7a2c4d65bbf866">openage::util::FixedPoint::from_fixedpoint</a></div><div class="ttdeci">static constexpr FixedPoint from_fixedpoint(const FixedPoint&lt; other_int_type, other_fractional_bits &gt; &amp;other)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00200">fixed_point.h:200</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a3d55d1b8ecdb0fd4ff8e7e3da2598554"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a3d55d1b8ecdb0fd4ff8e7e3da2598554">openage::util::FixedPoint::to_double</a></div><div class="ttdeci">constexpr double to_double() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00263">fixed_point.h:263</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a1432784032d62a4b43961b88de32ae86"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a1432784032d62a4b43961b88de32ae86">openage::util::FixedPoint::min_value</a></div><div class="ttdeci">static constexpr const FixedPoint min_value()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00209">fixed_point.h:209</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a4e6ea5affdccd958479d0eba1b74ce0f"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a4e6ea5affdccd958479d0eba1b74ce0f">openage::util::operator/</a></div><div class="ttdeci">constexpr FixedPoint&lt; I, F &gt; operator/(const FixedPoint&lt; I, F &gt; lhs, const N &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00459">fixed_point.h:459</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a211506fc52a7e2a73b6eba2cf6d2f66a"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a211506fc52a7e2a73b6eba2cf6d2f66a">openage::util::FixedPoint::operator&lt;=</a></div><div class="ttdeci">constexpr bool operator&lt;=(const FixedPoint &amp;o) const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00315">fixed_point.h:315</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_aa01c403263c2142c0ce9ce40cde89066"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#aa01c403263c2142c0ce9ce40cde89066">openage::util::FixedPoint::from_raw_value</a></div><div class="ttdeci">static constexpr FixedPoint from_raw_value(int_type raw_value)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00224">fixed_point.h:224</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a30783d598a6f1a133ba94b3e0bf319a0"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a30783d598a6f1a133ba94b3e0bf319a0">openage::util::FixedPoint::max_value</a></div><div class="ttdeci">static constexpr const FixedPoint max_value()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00216">fixed_point.h:216</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_aa0eb736578910b123ea19652c670daab"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#aa0eb736578910b123ea19652c670daab">openage::util::FixedPoint::hypot</a></div><div class="ttdeci">constexpr double hypot(const FixedPoint&lt; I, F &gt; rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00338">fixed_point.h:338</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a8058d6b15a78f7a977945ee4d62de903"><div class="ttname"><a href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">std::hypot</a></div><div class="ttdeci">constexpr double hypot(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00498">fixed_point.h:498</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a36dd5c06bff45023368c192f65f38182"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a36dd5c06bff45023368c192f65f38182">openage::util::FixedPoint::hypotfp</a></div><div class="ttdeci">constexpr FixedPoint&lt; I, F &gt; hypotfp(const FixedPoint&lt; I, F &gt; rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00343">fixed_point.h:343</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a887393057ecf8e0b2505086842768776"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a887393057ecf8e0b2505086842768776">openage::util::FixedPoint::from_float_factor</a></div><div class="ttdeci">static constexpr const float from_float_factor</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00111">fixed_point.h:111</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aa3949bf1d23f5c8446474135851399fc"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">openage::util::operator *</a></div><div class="ttdeci">std::enable_if&lt; std::is_arithmetic&lt; N &gt;::value, FixedPoint&lt; I, F &gt; &gt;::type constexpr operator *(const FixedPoint&lt; I, F &gt; lhs, const N &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00440">fixed_point.h:440</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a5caaef66c0cf9920f83bfb20524bb2ef"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a5caaef66c0cf9920f83bfb20524bb2ef">openage::util::FixedPoint::operator&lt;</a></div><div class="ttdeci">constexpr bool operator&lt;(const FixedPoint &amp;o) const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00307">fixed_point.h:307</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a3cb605abe74b26763ac7340c3785656a"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">openage::util::hash</a></div><div class="ttdeci">uint64_t hash(const uint64_t key[2], const uint8_t *data, size_t len_data)</div><div class="ttdef"><b>Definition:</b> <a href="hash_8cpp_source.xhtml#l00036">hash.cpp:36</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_abc8d2dddcdda2d24df395759a4a3f1ab"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#abc8d2dddcdda2d24df395759a4a3f1ab">openage::util::FixedPoint::operator==</a></div><div class="ttdeci">constexpr bool operator==(const FixedPoint &amp;o) const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00299">fixed_point.h:299</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_aff707b86b379bbb8491212631d1df769"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#aff707b86b379bbb8491212631d1df769">openage::util::FixedPoint::str</a></div><div class="ttdeci">std::string str() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00274">fixed_point.h:274</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a97237e56fbe59abeec8469929c0f56b7"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a97237e56fbe59abeec8469929c0f56b7">openage::util::FixedPoint::operator &gt;=</a></div><div class="ttdeci">constexpr bool operator &gt;=(const FixedPoint &amp;o) const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00319">fixed_point.h:319</a></div></div>
<div class="ttc" id="misc_8h_xhtml"><div class="ttname"><a href="misc_8h.xhtml">misc.h</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a7cc8c2bd1dad2337630abf6f6e42aef3"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a7cc8c2bd1dad2337630abf6f6e42aef3">openage::util::FixedPoint::from_float</a></div><div class="ttdeci">static constexpr FixedPoint from_float(float n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00185">fixed_point.h:185</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_ac0e556f78cde2795b26c10709032f3e7"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#ac0e556f78cde2795b26c10709032f3e7">openage::util::FixedPoint::FixedPoint</a></div><div class="ttdeci">constexpr FixedPoint(FixedPoint &amp;&amp;other) noexcept</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00140">fixed_point.h:140</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a78cd3057f1c6d052604a7ea7b3f97b8b"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a78cd3057f1c6d052604a7ea7b3f97b8b">openage::util::FixedPoint::operator+</a></div><div class="ttdeci">constexpr FixedPoint operator+() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00324">fixed_point.h:324</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a1066c5bc35ea84af4566a7950541a7ab"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a1066c5bc35ea84af4566a7950541a7ab">openage::util::FixedPoint::operator+=</a></div><div class="ttdeci">constexpr FixedPoint &amp; operator+=(const FixedPoint &amp;n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00348">fixed_point.h:348</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_aec3105441d3a31509744116f782fe3e7"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#aec3105441d3a31509744116f782fe3e7">openage::util::FixedPoint::operator -</a></div><div class="ttdeci">constexpr std::enable_if&lt; std::is_signed&lt; inner_int_type &gt;::value, typename FixedPoint::this_type &gt;::type operator -() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00332">fixed_point.h:332</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_afe036a1f307dd739bb4855cb0b799f38"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#afe036a1f307dd739bb4855cb0b799f38">openage::util::safe_shiftleft</a></div><div class="ttdeci">static constexpr std::enable_if&lt;(amount+(std::is_signed&lt; T &gt;::value ? 1 :0)&lt; sizeof(T) *CHAR_BIT), T &gt;::type safe_shiftleft(T value)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00028">fixed_point.h:28</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a52f8593a8358172f788ee3597c4b5981"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a52f8593a8358172f788ee3597c4b5981">openage::util::FixedPoint::FixedPoint</a></div><div class="ttdeci">constexpr FixedPoint(double n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00166">fixed_point.h:166</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_ae963a0d669b00ec8a65da1bf0041172a"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#ae963a0d669b00ec8a65da1bf0041172a">openage::util::FixedPoint::sqrt</a></div><div class="ttdeci">constexpr double sqrt()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00394">fixed_point.h:394</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_acf610f0ece81e2c4cbf0a405aba9c7c8"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#acf610f0ece81e2c4cbf0a405aba9c7c8">openage::util::FixedPoint::operator *=</a></div><div class="ttdeci">std::enable_if&lt; std::is_arithmetic&lt; N &gt;::value, FixedPoint &amp; &gt;::type constexpr operator *=(const N &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00363">fixed_point.h:363</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_affe7a3ec44c6f7ac96312875af742f87"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#affe7a3ec44c6f7ac96312875af742f87">openage::util::FixedPoint::get_raw_value</a></div><div class="ttdeci">constexpr int_type get_raw_value() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00234">fixed_point.h:234</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_adbd7a81351040e264df9f0b82bc8e494"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#adbd7a81351040e264df9f0b82bc8e494">openage::util::FixedPoint::power_of_two</a></div><div class="ttdeci">static constexpr double power_of_two(unsigned int power)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00096">fixed_point.h:96</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a5f225133013eccb8bbdd9a4628308a59"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a5f225133013eccb8bbdd9a4628308a59">openage::util::FixedPoint::raw_value_from_double</a></div><div class="ttdeci">static constexpr int_type raw_value_from_double(double n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00130">fixed_point.h:130</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_ac15c9eac48a2d30284089c642f7176b5"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#ac15c9eac48a2d30284089c642f7176b5">openage::util::FixedPoint::zero</a></div><div class="ttdeci">static constexpr FixedPoint zero()</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00171">fixed_point.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a976790c1ec88a9cce32a887ca49526db"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a976790c1ec88a9cce32a887ca49526db">openage::util::operator -</a></div><div class="ttdeci">constexpr FixedPoint&lt; I, F &gt; operator -(const FixedPoint&lt; I, F &gt; &amp;lhs, const FixedPoint&lt; I, F &gt; &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00422">fixed_point.h:422</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a101479979c88a661de76a6e70fb2978b"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a101479979c88a661de76a6e70fb2978b">openage::util::safe_shift</a></div><div class="ttdeci">static constexpr std::enable_if&lt;(amount&lt; 0), T &gt;::type safe_shift(T value)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00062">fixed_point.h:62</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a1c0bc145caf5f0b2af8d16d29d952180"><div class="ttname"><a href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; max(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00483">fixed_point.h:483</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint</a></div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00086">fixed_point.h:86</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a07a0fa1c13f5aff3f184a2d82574e7e7"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">openage::util::FixedPoint::to_float</a></div><div class="ttdeci">constexpr float to_float() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00252">fixed_point.h:252</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a41ce8a71883f18088e7876aa8e2600e4"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a41ce8a71883f18088e7876aa8e2600e4">openage::util::FixedPoint::get_fractional_part</a></div><div class="ttdeci">constexpr FixedPoint::same_type_but_unsigned get_fractional_part() const</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00286">fixed_point.h:286</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_aa5d7fef738e76cec9c68bc6412acaa5e"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#aa5d7fef738e76cec9c68bc6412acaa5e">openage::util::FixedPoint::approx_decimal_places</a></div><div class="ttdeci">static constexpr const unsigned int approx_decimal_places</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00114">fixed_point.h:114</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a0fc492a11cf74e80f976b24bea2a2eb2"><div class="ttname"><a href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a></div><div class="ttdeci">constexpr double sqrt(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00470">fixed_point.h:470</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="fixed__point_8h.xhtml">fixed_point.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
