<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: openage/convert/dataformat/data_formatter.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('data__formatter_8py_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">data_formatter.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="data__formatter_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1convert_1_1dataformat_1_1data__formatter.xhtml">    1</a></span>&#160;<span class="comment"># Copyright 2014-2017 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"># TODO pylint: disable=C,R</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">from</span> . <span class="keyword">import</span> entry_parser</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keyword">from</span> . <span class="keyword">import</span> util</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">from</span> .generated_file <span class="keyword">import</span> GeneratedFile</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">from</span> .members <span class="keyword">import</span> RefMember</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml">DataFormatter</a>:</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="stringliteral">    transforms and merges data structures</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="stringliteral">    the input data also specifies the output structure.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="stringliteral">    this class generates the plaintext being stored in the data files</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="stringliteral">    it is the central part of the data exporting functionality.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml">   20</a></span>&#160;    <span class="comment"># csv column delimiter:</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    DELIMITER = <span class="stringliteral">&quot;,&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a2ee353d31aed79b45e5fbbb6ebfbe39b">   23</a></span>&#160;    member_methods = {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <span class="stringliteral">&quot;fill&quot;</span>: <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_member_function.xhtml">entry_parser.ParserMemberFunction</a>(</div><div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a85ead735668cbfde167276d76cde7830">   25</a></span>&#160;            func_name = <span class="stringliteral">&quot;fill&quot;</span>,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            templates = {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;                <span class="comment"># used as dummy when there is no field to parse</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                0: <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_template.xhtml">entry_parser.ParserTemplate</a>(</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                    signature    = <span class="stringliteral">&quot;int {}fill(const std::string &amp; /*line*/)&quot;</span>,</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;                    headers      = {<span class="stringliteral">&quot;std::string&quot;</span>},</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;                    impl_headers = set(),</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;                    template     = (</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;                        <span class="stringliteral">&quot;$signature {\n&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;                        <span class="stringliteral">&quot;    return -1;\n&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;                        <span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;                    )</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                ),</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                <span class="comment"># used to parse at least one member field of the struct</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;                <span class="keywordtype">None</span>: <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_template.xhtml">entry_parser.ParserTemplate</a>(</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                    signature    = <span class="stringliteral">&quot;int {}fill(const std::string &amp;line)&quot;</span>,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;                    headers      = util.determine_headers(</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                        (<span class="stringliteral">&quot;std::string&quot;</span>,)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;                    ),</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                    impl_headers = util.determine_headers(</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                        (<span class="stringliteral">&quot;strtok_custom&quot;</span>, <span class="stringliteral">&quot;engine_error&quot;</span>, <span class="stringliteral">&quot;std::vector&quot;</span>)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                    ),</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    template     = (</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                        <span class="stringliteral">&quot;$signature {\n&quot;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;                        <span class="stringliteral">&quot;    std::vector&lt;std::string&gt; buf = openage::util::split_escape(\n&quot;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                        <span class="stringliteral">&quot;        line, &#39;$delimiter&#39;, $member_count\n&quot;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                        <span class="stringliteral">&quot;    );\n&quot;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                        <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                        <span class="stringliteral">&quot;    if (buf.size() != $member_count) {\n&quot;</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;                        <span class="stringliteral">&quot;        throw openage::error::Error(\n&quot;</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        <span class="stringliteral">&quot;            ERR\n&quot;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                        <span class="stringliteral">&#39;            &lt;&lt; &quot;Tokenizing $struct_name led to &quot;\n&#39;</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                        <span class="stringliteral">&#39;            &lt;&lt; buf.size()\n&#39;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                        <span class="stringliteral">&#39;            &lt;&lt; &quot; columns (expected &quot;\n&#39;</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                        <span class="stringliteral">&#39;            &lt;&lt; $member_count\n&#39;</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                        <span class="stringliteral">&#39;            &lt;&lt; &quot;)!&quot;\n&#39;</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                        <span class="stringliteral">&quot;        );\n&quot;</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        <span class="stringliteral">&quot;    }\n&quot;</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                        <span class="stringliteral">&quot;$parsers\n&quot;</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                        <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                        <span class="stringliteral">&quot;    return -1;\n&quot;</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                        <span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                    ),</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                )</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        ),</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="stringliteral">&quot;recurse&quot;</span>: <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_member_function.xhtml">entry_parser.ParserMemberFunction</a>(</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            func_name = <span class="stringliteral">&quot;recurse&quot;</span>,</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            templates = {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                <span class="comment"># used when this struct requires no further recursion</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                0: <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_template.xhtml">entry_parser.ParserTemplate</a>(</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    signature    = (</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                        <span class="stringliteral">&quot;bool {}recurse(const openage::util::CSVCollection &amp; /*storage*/, &quot;</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                        <span class="stringliteral">&quot;const std::string &amp; /*basedir*/)&quot;</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    ),</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    headers      = util.determine_headers(</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        (<span class="stringliteral">&quot;std::string&quot;</span>, <span class="stringliteral">&quot;csv_collection&quot;</span>)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    ),</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                    impl_headers = set(),</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    template     = (</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <span class="stringliteral">&quot;$signature {\n&quot;</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                        <span class="stringliteral">&quot;    return true;\n&quot;</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        <span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    )</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                ),</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                <span class="comment"># used when we have to recurse deeper</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordtype">None</span>: <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_template.xhtml">entry_parser.ParserTemplate</a>(</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    signature = (</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                        <span class="stringliteral">&quot;bool {}recurse(const openage::util::CSVCollection &amp;storage, &quot;</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        <span class="stringliteral">&quot;const std::string &amp;basedir)&quot;</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    ),</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    headers   = util.determine_headers(</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        (<span class="stringliteral">&quot;std::string&quot;</span>, <span class="stringliteral">&quot;csv_collection&quot;</span>)</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    ),</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    impl_headers = set(),</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    template  = (</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        <span class="stringliteral">&quot;$signature {\n&quot;</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="stringliteral">&quot;$parsers\n&quot;</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                        <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <span class="stringliteral">&quot;    return true;\n&quot;</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                        <span class="stringliteral">&quot;}\n&quot;</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    )</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                ),</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        ),</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a8400943f6fb6fbe252b6848075fd5260">__init__</a>(self):</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment"># list of all dumpable data sets</span></div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a8400943f6fb6fbe252b6848075fd5260">  115</a></span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a13a1209ec54d2f580f14a94bbad919f1">data</a> = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a13a1209ec54d2f580f14a94bbad919f1">  117</a></span>&#160;        <span class="comment"># collection of all type definitions</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">typedefs</a> = <a class="code" href="namespaceopenage_1_1py.xhtml#a5ba80af3e9224d2de11179ce232f75d9">dict</a>()</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">  120</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a6a121fdc6aaa3d511826dbc2f3e8ed11">add_data</a>(self, data_set_pile, prefix=None, single_output=None):</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral">        add a given StructDefinition to the storage, so it can be exported later.</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral">        other exported data structures are collected from the given input.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a6a121fdc6aaa3d511826dbc2f3e8ed11">  127</a></span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(data_set_pile, list):</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            data_set_pile = [data_set_pile]</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="comment"># add all data sets</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">for</span> data_set <span class="keywordflow">in</span> data_set_pile:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="comment"># TODO: allow prefixes for all file types</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="comment"># (missing: struct, structimpl)</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">if</span> prefix:</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                data_set.prefix = prefix</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">if</span> single_output:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                data_set.single_output = single_output</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="comment"># collect column type specifications</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">for</span> member_name, member_type <span class="keywordflow">in</span> data_set.members.items():</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="comment"># store resolved (first-time definitions) members in a</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="comment"># symbol list</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">if</span> isinstance(member_type, RefMember):</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    <span class="keywordflow">if</span> member_type.resolved:</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                        <span class="keywordflow">if</span> member_type.get_effective_type() <span class="keywordflow">in</span> self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">typedefs</a>:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                            <span class="keywordflow">if</span> data_set.members[member_name] <span class="keywordflow">is</span> <span class="keywordflow">not</span> self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">typedefs</a>[member_type.get_effective_type()]:</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;different redefinition of type %s&quot;</span> % member_type.get_effective_type())</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            ref_member = data_set.members[member_name]</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                            <span class="comment"># if not overridden,</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                            <span class="comment"># use name of struct file to store</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                            <span class="keywordflow">if</span> ref_member.file_name <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                                ref_member.file_name = data_set.name_struct_file</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                            self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">typedefs</a>[member_type.get_effective_type()] = ref_member</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a13a1209ec54d2f580f14a94bbad919f1">data</a>.append(data_set)</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a5dd2ca6f27cffabc611a817c7ad69232">export</a>(self, projectdir, requested_formats):</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral">        Generates files in the requested formats to projectdir.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral">        projectdir is a util.fslike.path.Path.</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment"># storage of all needed content snippets</span></div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a5dd2ca6f27cffabc611a817c7ad69232">  170</a></span>&#160;        generate_files = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">for</span> format_ <span class="keywordflow">in</span> requested_formats:</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            files = <a class="code" href="namespaceopenage_1_1py.xhtml#a5ba80af3e9224d2de11179ce232f75d9">dict</a>()</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            snippets = <a class="code" href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">list</a>()</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="comment"># iterate over all stored data sets and</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment"># generate all data snippets for the requested output formats.</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">for</span> data_set <span class="keywordflow">in</span> self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a13a1209ec54d2f580f14a94bbad919f1">data</a>:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="comment"># resolve data xrefs for this data_set</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                data_set.dynamic_ref_update(self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">typedefs</a>)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                <span class="comment"># generate one output chunk list for each requested format</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">if</span> format_ == <span class="stringliteral">&quot;csv&quot;</span>:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    new_snippets = data_set.generate_csv(self)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">elif</span> format_ == <span class="stringliteral">&quot;struct&quot;</span>:</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    new_snippets = data_set.generate_struct(self)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">elif</span> format_ == <span class="stringliteral">&quot;structimpl&quot;</span>:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    new_snippets = data_set.generate_struct_implementation(self)</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">else</span>:</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;unknown export format %s requested&quot;</span> % format_)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                snippets.extend(new_snippets)</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="comment"># create snippets for the encountered type definitions</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">for</span> _, type_definition <span class="keywordflow">in</span> sorted(self.<a class="code" href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">typedefs</a>.items()):</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                type_snippets = type_definition.get_snippets(type_definition.file_name, format_)</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                snippets.extend(type_snippets)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="comment"># assign all snippets to generated files</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">for</span> snippet <span class="keywordflow">in</span> snippets:</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="comment"># if this file was not yet created, do it nao</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span> snippet.file_name <span class="keywordflow">not</span> <span class="keywordflow">in</span> files:</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    files[snippet.file_name] = <a class="code" href="classopenage_1_1convert_1_1dataformat_1_1generated__file_1_1_generated_file.xhtml">GeneratedFile</a>(snippet.file_name, format_)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                files[snippet.file_name].add_snippet(snippet)</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            generate_files.extend(files.values())</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="comment"># files is currently a list of GeneratedFile objects.</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment"># find xref header includes</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">for</span> gen_file <span class="keywordflow">in</span> generate_files:</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="comment"># only create headers for non-data files</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">if</span> gen_file.format_ <span class="keywordflow">not</span> <span class="keywordflow">in</span> {<span class="stringliteral">&quot;csv&quot;</span>}:</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                gen_file.create_xref_headers(generate_files)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                gen_file.create_forward_declarations(generate_files)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="comment"># we now invoke the content generation for each generated file</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span> gen_file <span class="keywordflow">in</span> generate_files:</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            file_name, content = gen_file.generate()</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keyword">with</span> projectdir[file_name].open(<span class="stringliteral">&#39;wb&#39;</span>) <span class="keyword">as</span> outfile:</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                outfile.write(content.encode(<span class="stringliteral">&#39;utf-8&#39;</span>))</div><div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml">openage.convert.dataformat.data_formatter.DataFormatter</a></div><div class="ttdef"><b>Definition:</b> <a href="data__formatter_8py_source.xhtml#l00020">data_formatter.py:20</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter_xhtml_a6a121fdc6aaa3d511826dbc2f3e8ed11"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a6a121fdc6aaa3d511826dbc2f3e8ed11">openage.convert.dataformat.data_formatter.DataFormatter.add_data</a></div><div class="ttdeci">def add_data(self, data_set_pile, prefix=None, single_output=None)</div><div class="ttdoc">add a given StructDefinition to the storage, so it can be exported later.</div><div class="ttdef"><b>Definition:</b> <a href="data__formatter_8py_source.xhtml#l00127">data_formatter.py:127</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_template_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_template.xhtml">openage.convert.dataformat.entry_parser.ParserTemplate</a></div><div class="ttdoc">Tempalte for a data parser function, its content is generated.</div><div class="ttdef"><b>Definition:</b> <a href="entry__parser_8py_source.xhtml#l00041">entry_parser.py:41</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1generated__file_1_1_generated_file_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1generated__file_1_1_generated_file.xhtml">openage.convert.dataformat.generated_file.GeneratedFile</a></div><div class="ttdoc">represents a writable file that was generated automatically.</div><div class="ttdef"><b>Definition:</b> <a href="generated__file_8py_source.xhtml#l00018">generated_file.py:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a58cbca251b8e2118e0a6b9b0b78a7b32"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a58cbca251b8e2118e0a6b9b0b78a7b32">openage::py::list</a></div><div class="ttdeci">Obj list()</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00359">pyobject.cpp:359</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a5ba80af3e9224d2de11179ce232f75d9"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a5ba80af3e9224d2de11179ce232f75d9">openage::py::dict</a></div><div class="ttdeci">Obj dict()</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00352">pyobject.cpp:352</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter_xhtml_a8400943f6fb6fbe252b6848075fd5260"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a8400943f6fb6fbe252b6848075fd5260">openage.convert.dataformat.data_formatter.DataFormatter.__init__</a></div><div class="ttdeci">def __init__(self)</div><div class="ttdef"><b>Definition:</b> <a href="data__formatter_8py_source.xhtml#l00115">data_formatter.py:115</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter_xhtml_a5dd2ca6f27cffabc611a817c7ad69232"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a5dd2ca6f27cffabc611a817c7ad69232">openage.convert.dataformat.data_formatter.DataFormatter.export</a></div><div class="ttdeci">def export(self, projectdir, requested_formats)</div><div class="ttdoc">Generates files in the requested formats to projectdir.</div><div class="ttdef"><b>Definition:</b> <a href="data__formatter_8py_source.xhtml#l00170">data_formatter.py:170</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_member_function_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1entry__parser_1_1_parser_member_function.xhtml">openage.convert.dataformat.entry_parser.ParserMemberFunction</a></div><div class="ttdef"><b>Definition:</b> <a href="entry__parser_8py_source.xhtml#l00079">entry_parser.py:79</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter_xhtml_ae3f03279be0148880a253eb1f134e4ab"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#ae3f03279be0148880a253eb1f134e4ab">openage.convert.dataformat.data_formatter.DataFormatter.typedefs</a></div><div class="ttdeci">typedefs</div><div class="ttdef"><b>Definition:</b> <a href="data__formatter_8py_source.xhtml#l00120">data_formatter.py:120</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter_xhtml_a13a1209ec54d2f580f14a94bbad919f1"><div class="ttname"><a href="classopenage_1_1convert_1_1dataformat_1_1data__formatter_1_1_data_formatter.xhtml#a13a1209ec54d2f580f14a94bbad919f1">openage.convert.dataformat.data_formatter.DataFormatter.data</a></div><div class="ttdeci">data</div><div class="ttdef"><b>Definition:</b> <a href="data__formatter_8py_source.xhtml#l00117">data_formatter.py:117</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5432d0784b34fd012a3258f7fe2e6e8b.xhtml">openage</a></li><li class="navelem"><a class="el" href="dir_f8c2790f072062ca31393539e9a4c2e7.xhtml">convert</a></li><li class="navelem"><a class="el" href="dir_2220708b3a09db22ca7ba5a5fcfaa7ea.xhtml">dataformat</a></li><li class="navelem"><a class="el" href="data__formatter_8py.xhtml">data_formatter.py</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
