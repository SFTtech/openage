<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/error/handlers.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('error_2handlers_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">handlers.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="error_2handlers_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This file holds handlers for std::terminate and SIGSEGV.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * The handlers print stack trace and (for terminate) exception information,</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * before allowing the program to exit.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * The handlers are installed when loading the library, and uninstalled</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * when unloading it.</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_2handlers_8h.xhtml">handlers.h</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;exception&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifdef _MSC_VER</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;io.h&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;../util/signal.h&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;../util/init.h&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;../util/language.h&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_2error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="stackanalyzer_8h.xhtml">stackanalyzer.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>error {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;[[noreturn]] <span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">terminate_handler</a>() noexcept;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#afafcc06f7279949f56f93e5506656528">sigsegv_handler</a>(<span class="keywordtype">int</span> <span class="comment">/* unused */</span>);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#a456dc46fa28ef457ef19c8f879c256b1">exit_handler</a>();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// The global state has internal linkage only.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;namespace {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keywordtype">bool</span> exit_ok;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<a class="code" href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">std::terminate_handler</a> old_terminate_handler;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#ifdef __FreeBSD__</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">typedef</span> sig_t sighandler_t;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;sighandler_t old_sigsegv_handler;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;util::OnInit install_handlers([]() {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    old_sigsegv_handler = signal(SIGSEGV, <a class="code" href="namespaceopenage_1_1error.xhtml#afafcc06f7279949f56f93e5506656528">sigsegv_handler</a>);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    old_terminate_handler = std::set_terminate(<a class="code" href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">terminate_handler</a>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    exit_ok = <span class="keyword">true</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    atexit(<a class="code" href="namespaceopenage_1_1error.xhtml#a456dc46fa28ef457ef19c8f879c256b1">exit_handler</a>);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;});</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;util::OnDeInit restore_handlers([]() {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    std::set_terminate(old_terminate_handler);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    signal(SIGSEGV, old_sigsegv_handler);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;});</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;} <span class="comment">// anonymous namespace</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">   69</a></span>&#160;[[noreturn]] <span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">terminate_handler</a>() noexcept {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="comment">// immediately unset this handler, to avoid endless recursions if</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// terminate() is accidentially triggered from here.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    std::set_terminate(old_terminate_handler);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n\x1b[31;1mFATAL: terminate has been called\x1b[m&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">if</span> (std::exception_ptr e_ptr = std::current_exception()) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        std::cout &lt;&lt; <span class="stringliteral">&quot;\n\x1b[33muncaught exception\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">try</span> {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            std::rethrow_exception(e_ptr);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        } <span class="keywordflow">catch</span> (<a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a> &amp;exc) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            std::cout &lt;&lt; exc &lt;&lt; std::endl;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        } <span class="keywordflow">catch</span> (std::exception &amp;exc) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            std::cout &lt;&lt;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="stringliteral">&quot;std::exception of type &quot;</span> &lt;&lt;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                <a class="code" href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">util::demangle</a>(<span class="keyword">typeid</span>(exc).name()) &lt;&lt;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; exc.what() &lt;&lt; std::endl;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        } <span class="keywordflow">catch</span> (...) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            std::cout &lt;&lt; <span class="stringliteral">&quot;non-standard exception object&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\n\x1b[33mcurrent stack:\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml">StackAnalyzer</a> backtrace;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    backtrace.<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#acd0f91c95c892dbb81e037a3bca05daf">analyze</a>();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::cout &lt;&lt; backtrace &lt;&lt; std::endl;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// die again to enable debugger functionality.</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// that maybe print some additional useful info that we forgot about.</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="comment">// TODO: we maybe want to prevent that for end-users.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\x1b[33mhanding over to the system...\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    std::terminate();</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1error.xhtml#afafcc06f7279949f56f93e5506656528">  107</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#afafcc06f7279949f56f93e5506656528">sigsegv_handler</a>(<span class="keywordtype">int</span> <span class="comment">/* unused */</span>) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="comment">// In theory, this handler may only call async-signal-safe functions,</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="comment">// such as write().</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *message = <span class="stringliteral">&quot;\n\x1b[31;1mSIGSEGV\x1b[m\n&quot;</span>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="namespaceopenage_1_1util.xhtml#a8cb190d6ba8c160e1453ff4379dd2dcb">util::ignore_result</a>(write(1, message, <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(message)));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="comment">// however, everything is broken anyways. can&#39;t hurt to try to print</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// more useful info. fuck the police! wheeee!</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    std::terminate();</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1error.xhtml#a456dc46fa28ef457ef19c8f879c256b1">  119</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#a456dc46fa28ef457ef19c8f879c256b1">exit_handler</a>() {</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="comment">// This handler is registered to run atexit().</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="comment">// It is used to catch calls to exit() that occur somewhere inside</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="comment">// the running game (while exit_ok == false).</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">// exit() should never be invoked directly while the game is running,</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="comment">// but some libraries such as libepoxy might do it anyway.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="comment">// The actual proper way of exiting the running game is via throwing</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// an exception or similar action.</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span> (exit_ok) { <span class="keywordflow">return</span>; }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::cout &lt;&lt; <span class="stringliteral">&quot;\x1b[31;1mexit() was called in an illegal place\x1b[m\n&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1error.xhtml#aa782a00ec80760003f986c063aef169d">  134</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1error.xhtml#aa782a00ec80760003f986c063aef169d">set_exit_ok</a>(<span class="keywordtype">bool</span> value) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    exit_ok = value;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;}</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}} <span class="comment">// openage::error</span></div><div class="ttc" id="namespaceopenage_1_1error_xhtml_aa782a00ec80760003f986c063aef169d"><div class="ttname"><a href="namespaceopenage_1_1error.xhtml#aa782a00ec80760003f986c063aef169d">openage::error::set_exit_ok</a></div><div class="ttdeci">void set_exit_ok(bool value)</div><div class="ttdef"><b>Definition:</b> <a href="error_2handlers_8cpp_source.xhtml#l00134">handlers.cpp:134</a></div></div>
<div class="ttc" id="namespaceopenage_1_1error_xhtml_a456dc46fa28ef457ef19c8f879c256b1"><div class="ttname"><a href="namespaceopenage_1_1error.xhtml#a456dc46fa28ef457ef19c8f879c256b1">openage::error::exit_handler</a></div><div class="ttdeci">void exit_handler()</div><div class="ttdef"><b>Definition:</b> <a href="error_2handlers_8cpp_source.xhtml#l00119">handlers.cpp:119</a></div></div>
<div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="namespaceopenage_1_1error_xhtml_ae713528ccc0e378838c233a2a405026a"><div class="ttname"><a href="namespaceopenage_1_1error.xhtml#ae713528ccc0e378838c233a2a405026a">openage::error::terminate_handler</a></div><div class="ttdeci">void terminate_handler() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="error_2handlers_8cpp_source.xhtml#l00069">handlers.cpp:69</a></div></div>
<div class="ttc" id="stackanalyzer_8h_xhtml"><div class="ttname"><a href="stackanalyzer_8h.xhtml">stackanalyzer.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1error_xhtml_afafcc06f7279949f56f93e5506656528"><div class="ttname"><a href="namespaceopenage_1_1error.xhtml#afafcc06f7279949f56f93e5506656528">openage::error::sigsegv_handler</a></div><div class="ttdeci">void sigsegv_handler(int)</div><div class="ttdef"><b>Definition:</b> <a href="error_2handlers_8cpp_source.xhtml#l00107">handlers.cpp:107</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a8cb190d6ba8c160e1453ff4379dd2dcb"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a8cb190d6ba8c160e1453ff4379dd2dcb">openage::util::ignore_result</a></div><div class="ttdeci">void ignore_result(T)</div><div class="ttdef"><b>Definition:</b> <a href="language_8h_source.xhtml#l00038">language.h:38</a></div></div>
<div class="ttc" id="error_2error_8h_xhtml"><div class="ttname"><a href="error_2error_8h.xhtml">error.h</a></div></div>
<div class="ttc" id="classopenage_1_1error_1_1_stack_analyzer_xhtml_acd0f91c95c892dbb81e037a3bca05daf"><div class="ttname"><a href="classopenage_1_1error_1_1_stack_analyzer.xhtml#acd0f91c95c892dbb81e037a3bca05daf">openage::error::StackAnalyzer::analyze</a></div><div class="ttdeci">void analyze()</div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8cpp_source.xhtml#l00222">stackanalyzer.cpp:222</a></div></div>
<div class="ttc" id="error_2handlers_8h_xhtml"><div class="ttname"><a href="error_2handlers_8h.xhtml">handlers.h</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aebed129b2a0773520cdd8d40b0f70318"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aebed129b2a0773520cdd8d40b0f70318">openage::util::demangle</a></div><div class="ttdeci">std::string demangle(const char *symbol)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00025">compiler.cpp:25</a></div></div>
<div class="ttc" id="classopenage_1_1error_1_1_stack_analyzer_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_stack_analyzer.xhtml">openage::error::StackAnalyzer</a></div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8h_source.xhtml#l00027">stackanalyzer.h:27</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_3c7a1d16eeb7847b36e40c66a45c0cab.xhtml">error</a></li><li class="navelem"><a class="el" href="error_2handlers_8cpp.xhtml">handlers.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
