<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::event::Loop Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1event_1_1_loop.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classopenage_1_1event_1_1_loop-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::event::Loop Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The core class to manage event class and targets.  
 <a href="classopenage_1_1event_1_1_loop.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for openage::event::Loop:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1904c3c6896c276199d5fd604663c3a2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a1904c3c6896c276199d5fd604663c3a2">add_event_class</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;cls)</td></tr>
<tr class="memdesc:a1904c3c6896c276199d5fd604663c3a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">register a new event class  <a href="#a1904c3c6896c276199d5fd604663c3a2">More...</a><br /></td></tr>
<tr class="separator:a1904c3c6896c276199d5fd604663c3a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a345332e87684e73eeef16da46255882f"><td class="memItemLeft" align="right" valign="top">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a345332e87684e73eeef16da46255882f">create_event</a> (const std::string &amp;name, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;target, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state, const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;reference_time, const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;params=<a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({}))</td></tr>
<tr class="memdesc:a345332e87684e73eeef16da46255882f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Add a new <a class="el" href="classopenage_1_1event_1_1_event.xhtml" title="The actual one event that may be called - it is used to manage the event itself.">Event</a> to the queue.  <a href="#a345332e87684e73eeef16da46255882f">More...</a><br /></td></tr>
<tr class="separator:a345332e87684e73eeef16da46255882f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea3bb40d2dfbca8a48c8389af357ebb0"><td class="memItemLeft" align="right" valign="top">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aea3bb40d2dfbca8a48c8389af357ebb0">create_event</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;eventclass, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;target, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state, const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;reference_time, const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;params=<a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({}))</td></tr>
<tr class="memdesc:aea3bb40d2dfbca8a48c8389af357ebb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This will generate a new randomly named eventclass for this specific element.  <a href="#aea3bb40d2dfbca8a48c8389af357ebb0">More...</a><br /></td></tr>
<tr class="separator:aea3bb40d2dfbca8a48c8389af357ebb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea43d31d3b22e6ae29087df21aa014a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aea43d31d3b22e6ae29087df21aa014a7">onfilter</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;eventclass, const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;)</td></tr>
<tr class="separator:aea43d31d3b22e6ae29087df21aa014a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada595233343c378554941df3ff039c4b"><td class="memTemplParams" colspan="2">template&lt;class evntclass_t &gt; </td></tr>
<tr class="memitem:ada595233343c378554941df3ff039c4b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#ada595233343c378554941df3ff039c4b">onfilter</a> (const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;filter)</td></tr>
<tr class="separator:ada595233343c378554941df3ff039c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a172ef3ff0f7d0586a06a6b356a7515f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a172ef3ff0f7d0586a06a6b356a7515f1">register_object</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;)</td></tr>
<tr class="separator:a172ef3ff0f7d0586a06a6b356a7515f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeba9e515057a87d7fbfddb8585095de6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aeba9e515057a87d7fbfddb8585095de6">reach_time</a> (const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;max_time, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state)</td></tr>
<tr class="memdesc:aeba9e515057a87d7fbfddb8585095de6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute all events that are registered until a certain point in time.  <a href="#aeba9e515057a87d7fbfddb8585095de6">More...</a><br /></td></tr>
<tr class="separator:aeba9e515057a87d7fbfddb8585095de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adde017808ad3b24a4a95c6cad4fcd2db"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:adde017808ad3b24a4a95c6cad4fcd2db"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#adde017808ad3b24a4a95c6cad4fcd2db">create_change</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; &amp;event, const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;changes_at, const T &amp;new_value)</td></tr>
<tr class="memdesc:adde017808ad3b24a4a95c6cad4fcd2db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Register that a given event must be reevaluated at a time, this usually happens because this event depended on an eventtarget that got changed at this time.  <a href="#adde017808ad3b24a4a95c6cad4fcd2db">More...</a><br /></td></tr>
<tr class="separator:adde017808ad3b24a4a95c6cad4fcd2db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bd405975ded3f10fbf48eabd2a6cb49"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a2bd405975ded3f10fbf48eabd2a6cb49">get_queue</a> () const</td></tr>
<tr class="separator:a2bd405975ded3f10fbf48eabd2a6cb49"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:aa73104f71472a83e1afff4f11e0c619f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aa73104f71472a83e1afff4f11e0c619f">execute_events</a> (const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;max_time, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state)</td></tr>
<tr class="memdesc:aa73104f71472a83e1afff4f11e0c619f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Execute the events.  <a href="#aa73104f71472a83e1afff4f11e0c619f">More...</a><br /></td></tr>
<tr class="separator:aa73104f71472a83e1afff4f11e0c619f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cb0ae638435b575fe689c550b27a823"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a3cb0ae638435b575fe689c550b27a823">update_changes</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state)</td></tr>
<tr class="memdesc:a3cb0ae638435b575fe689c550b27a823"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call all the time change functions.  <a href="#a3cb0ae638435b575fe689c550b27a823">More...</a><br /></td></tr>
<tr class="separator:a3cb0ae638435b575fe689c550b27a823"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:ac56f6ba1b5422a37dd76082d1f12d588"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::string, std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a></td></tr>
<tr class="memdesc:ac56f6ba1b5422a37dd76082d1f12d588"><td class="mdescLeft">&#160;</td><td class="mdescRight">Here we do the bookkeeping of registered event classes.  <a href="#ac56f6ba1b5422a37dd76082d1f12d588">More...</a><br /></td></tr>
<tr class="separator:ac56f6ba1b5422a37dd76082d1f12d588"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2aa3c5ecf7ac25ee07ae50e0e206cf95"><td class="memItemLeft" align="right" valign="top">std::list&lt; <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a2aa3c5ecf7ac25ee07ae50e0e206cf95">filters</a></td></tr>
<tr class="memdesc:a2aa3c5ecf7ac25ee07ae50e0e206cf95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Here we store all running filters that shall be applied whenever a new obejct is added to our objectstore.  <a href="#a2aa3c5ecf7ac25ee07ae50e0e206cf95">More...</a><br /></td></tr>
<tr class="separator:a2aa3c5ecf7ac25ee07ae50e0e206cf95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e92d18681ac0167d1b67e7ab147328"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a></td></tr>
<tr class="memdesc:aa3e92d18681ac0167d1b67e7ab147328"><td class="mdescLeft">&#160;</td><td class="mdescRight">All events are enqueued here.  <a href="#aa3e92d18681ac0167d1b67e7ab147328">More...</a><br /></td></tr>
<tr class="separator:aa3e92d18681ac0167d1b67e7ab147328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f9201d7ad7a6dccf71e3a6502982963"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a9f9201d7ad7a6dccf71e3a6502982963">active_event</a></td></tr>
<tr class="memdesc:a9f9201d7ad7a6dccf71e3a6502982963"><td class="mdescLeft">&#160;</td><td class="mdescRight">The currently processed event.  <a href="#a9f9201d7ad7a6dccf71e3a6502982963">More...</a><br /></td></tr>
<tr class="separator:a9f9201d7ad7a6dccf71e3a6502982963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c611cd54ec98d5f8e2b8486e6aa5d9e"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; uint64_t, std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a0c611cd54ec98d5f8e2b8486e6aa5d9e">curveindex</a></td></tr>
<tr class="separator:a0c611cd54ec98d5f8e2b8486e6aa5d9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a5951d4eb106c31663bdf480e12d382fb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a5951d4eb106c31663bdf480e12d382fb">demo::curvepong</a> ()</td></tr>
<tr class="separator:a5951d4eb106c31663bdf480e12d382fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The core class to manage event class and targets. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00032">32</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a1904c3c6896c276199d5fd604663c3a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1904c3c6896c276199d5fd604663c3a2">&#9670;&nbsp;</a></span>add_event_class()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::add_event_class </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>cls</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>register a new event class </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                                                               {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <a class="code" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a>.insert(std::make_pair(cls-&gt;id(), cls));</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;}</div><div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_ac56f6ba1b5422a37dd76082d1f12d588"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">openage::event::Loop::classstore</a></div><div class="ttdeci">std::unordered_map&lt; std::string, std::shared_ptr&lt; EventClass &gt; &gt; classstore</div><div class="ttdoc">Here we do the bookkeeping of registered event classes.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00113">loop.h:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="event_2loop_8h_source.xhtml#l00113">classstore</a>.</p>

</div>
</div>
<a id="adde017808ad3b24a4a95c6cad4fcd2db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adde017808ad3b24a4a95c6cad4fcd2db">&#9670;&nbsp;</a></span>create_change()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::create_change </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>changes_at</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>new_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Register that a given event must be reevaluated at a time, this usually happens because this event depended on an eventtarget that got changed at this time. </p>
<p>This inserts the event into the changes queue so it will be evaluated in the next loop iteration. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00137">137</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                             {</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: registering change of &quot;</span> &lt;&lt; evnt-&gt;get_eventclass()-&gt;id()</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;             &lt;&lt; <span class="stringliteral">&quot; at t=&quot;</span> &lt;&lt; changes_at &lt;&lt; <span class="stringliteral">&quot; to &quot;</span> &lt;&lt; new_value);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a7115692628b99b277fead8b39603c885">add_change</a>(evnt, changes_at);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a7115692628b99b277fead8b39603c885"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a7115692628b99b277fead8b39603c885">openage::event::EventQueue::add_change</a></div><div class="ttdeci">void add_change(const std::shared_ptr&lt; Event &gt; &amp;event, const curve::time_t &amp;changed_at)</div><div class="ttdoc">An event target has changed, and the event shall be retriggered.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00082">eventqueue.cpp:82</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="eventqueue_8cpp_source.xhtml#l00082">openage::event::EventQueue::add_change()</a>, <a class="el" href="message_8h_source.xhtml#l00176">DBG</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, and <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>.</p>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_adde017808ad3b24a4a95c6cad4fcd2db_cgraph.svg" width="100%" height="427"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a345332e87684e73eeef16da46255882f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a345332e87684e73eeef16da46255882f">&#9670;&nbsp;</a></span>create_event() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; openage::event::Loop::create_event </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>reference_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({})</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add a new <a class="el" href="classopenage_1_1event_1_1_event.xhtml" title="The actual one event that may be called - it is used to manage the event itself.">Event</a> to the queue. </p>
<p>The event is from the given class (name) and is invoked for a target in a state.</p>
<p>The <code>reference_time</code> is used to calculate the actual event time. </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                                                           {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a>.find(name);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">if</span> (it == <a class="code" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a>.end()) {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Trying to subscribe to eventclass &quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;                             &lt;&lt; name &lt;&lt; <span class="stringliteral">&quot;, which does not exist.&quot;</span>};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    }</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#ac5abd71bf0167e4b7d36f19a29f4a611">create_event</a>(target, it-&gt;second, state, reference_time, params);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div><div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_ac5abd71bf0167e4b7d36f19a29f4a611"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#ac5abd71bf0167e4b7d36f19a29f4a611">openage::event::EventQueue::create_event</a></div><div class="ttdeci">std::shared_ptr&lt; Event &gt; create_event(const std::shared_ptr&lt; EventTarget &gt; &amp;eventtarget, const std::shared_ptr&lt; EventClass &gt; &amp;eventclass, const std::shared_ptr&lt; State &gt; &amp;state, const curve::time_t &amp;reference_time, const EventClass::param_map &amp;params)</div><div class="ttdoc">Add an event for a specified target.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00016">eventqueue.cpp:16</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_ac56f6ba1b5422a37dd76082d1f12d588"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">openage::event::Loop::classstore</a></div><div class="ttdeci">std::unordered_map&lt; std::string, std::shared_ptr&lt; EventClass &gt; &gt; classstore</div><div class="ttdoc">Here we do the bookkeeping of registered event classes.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00113">loop.h:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="event_2loop_8h_source.xhtml#l00113">classstore</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00016">openage::event::EventQueue::create_event()</a>, <a class="el" href="log_2____init_____8py_source.xhtml#l00124">openage::log::err()</a>, <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>, and <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>.</p>

<p class="reference">Referenced by <a class="el" href="physics_8cpp_source.xhtml#l00489">openage::event::demo::Physics::reset()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_a345332e87684e73eeef16da46255882f_cgraph.svg" width="100%" height="579"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_a345332e87684e73eeef16da46255882f_icgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aea3bb40d2dfbca8a48c8389af357ebb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea3bb40d2dfbca8a48c8389af357ebb0">&#9670;&nbsp;</a></span>create_event() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; openage::event::Loop::create_event </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>eventclass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>reference_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({})</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This will generate a new randomly named eventclass for this specific element. </p>
<p>The <code>reference_time</code> is used to determine the actual event trigger time. </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                                                                           {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">auto</span> it = this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a>.find(eventclass-&gt;id());</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">if</span> (it == this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a>.end()) {</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keyword">auto</span> res = this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a>.insert(std::make_pair(eventclass-&gt;id(), eventclass));</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">if</span> (res.second) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            it = res.first;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;could not insert eventclass into class store&quot;</span>};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#ac5abd71bf0167e4b7d36f19a29f4a611">create_event</a>(target, it-&gt;second, state, reference_time, params);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div><div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_ac5abd71bf0167e4b7d36f19a29f4a611"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#ac5abd71bf0167e4b7d36f19a29f4a611">openage::event::EventQueue::create_event</a></div><div class="ttdeci">std::shared_ptr&lt; Event &gt; create_event(const std::shared_ptr&lt; EventTarget &gt; &amp;eventtarget, const std::shared_ptr&lt; EventClass &gt; &amp;eventclass, const std::shared_ptr&lt; State &gt; &amp;state, const curve::time_t &amp;reference_time, const EventClass::param_map &amp;params)</div><div class="ttdoc">Add an event for a specified target.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00016">eventqueue.cpp:16</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_ac56f6ba1b5422a37dd76082d1f12d588"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">openage::event::Loop::classstore</a></div><div class="ttdeci">std::unordered_map&lt; std::string, std::shared_ptr&lt; EventClass &gt; &gt; classstore</div><div class="ttdoc">Here we do the bookkeeping of registered event classes.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00113">loop.h:113</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="event_2loop_8h_source.xhtml#l00113">classstore</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00016">openage::event::EventQueue::create_event()</a>, <a class="el" href="message_8h_source.xhtml#l00179">ERR</a>, and <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_aea3bb40d2dfbca8a48c8389af357ebb0_cgraph.svg" width="100%" height="579"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa73104f71472a83e1afff4f11e0c619f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa73104f71472a83e1afff4f11e0c619f">&#9670;&nbsp;</a></span>execute_events()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int openage::event::Loop::execute_events </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>max_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Execute the events. </p>
<dl class="section return"><dt>Returns</dt><dd>number of events processed </dd></dl>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                                                            {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: Pending events in the queue (# = &quot;</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;             &lt;&lt; this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a7da54eb03b82d893e26af2af2749dd62">get_event_queue</a>().<a class="code" href="classopenage_1_1event_1_1_event_store.xhtml#a895a291c20860520abba447e1cd48fd0">size</a>() &lt;&lt; <span class="stringliteral">&quot;):&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordtype">size_t</span> i = 0;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a7da54eb03b82d893e26af2af2749dd62">get_event_queue</a>().<a class="code" href="classopenage_1_1event_1_1_event_store.xhtml#af94747a58143a4d16b0f94bd184444be">get_sorted_events</a>()) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;  event &quot;</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                     &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;: t=&quot;</span> &lt;&lt; e-&gt;get_time() &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; e-&gt;get_eventclass()-&gt;id());</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            i++;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordtype">int</span> cnt = 0;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// fetch an event from the queue that happens before &lt;= time_until</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        std::shared_ptr&lt;Event&gt; <span class="keyword">event</span> = this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#aec381e61d472643475de6fa50ae7b5d8">take_event</a>(time_until);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">if</span> (event == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">auto</span> target = <span class="keyword">event</span>-&gt;get_target().lock();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">if</span> (target) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: invoking event \&quot;&quot;</span> &lt;&lt; event-&gt;get_eventclass()-&gt;id()</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                     &lt;&lt; <span class="stringliteral">&quot;\&quot; on target \&quot;&quot;</span> &lt;&lt; target-&gt;id()</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                     &lt;&lt; <span class="stringliteral">&quot;\&quot; for time t=&quot;</span> &lt;&lt; <span class="keyword">event</span>-&gt;get_time());</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#a9f9201d7ad7a6dccf71e3a6502982963">active_event</a> = event;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="comment">// apply the event effects</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keyword">event</span>-&gt;get_eventclass()-&gt;invoke(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                *<span class="keyword">this</span>, target, state,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                event-&gt;get_time(), <span class="keyword">event</span>-&gt;get_params()</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            );</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            this-&gt;active_event = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            cnt += 1;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="comment">// if the event is REPEAT, readd the event.</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">if</span> (event-&gt;get_eventclass()-&gt;type == <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">EventClass::trigger_type::REPEAT</a>) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> new_time = <span class="keyword">event</span>-&gt;get_eventclass()-&gt;predict_invoke_time(</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                    target, state, event-&gt;get_time()</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                );</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <span class="keywordflow">if</span> (new_time != <a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::numeric_limits&lt;curve::time_t&gt;::min</a>()) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keyword">event</span>-&gt;set_time(new_time);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: repeating event \&quot;&quot;</span> &lt;&lt; event-&gt;get_eventclass()-&gt;id()</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                             &lt;&lt; <span class="stringliteral">&quot;\&quot; on target \&quot;&quot;</span> &lt;&lt; target-&gt;id()</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                             &lt;&lt; <span class="stringliteral">&quot;\&quot; will be reenqueued for time t=&quot;</span> &lt;&lt; <span class="keyword">event</span>-&gt;get_time());</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#ac4990fe7904f09c54158de776c6cb805">reenqueue</a>(event);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="comment">// The element was already removed from the queue, so we can safely</span></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="comment">// kill it by ignoring it.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        }</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keywordflow">return</span> cnt;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div><div class="ttc" id="namespacestd_xhtml_a34591a1d8ee5da3f16f56554590d5e16"><div class="ttname"><a href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; min(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00475">fixed_point.h:475</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_ac4990fe7904f09c54158de776c6cb805"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#ac4990fe7904f09c54158de776c6cb805">openage::event::EventQueue::reenqueue</a></div><div class="ttdeci">void reenqueue(const std::shared_ptr&lt; Event &gt; &amp;event)</div><div class="ttdoc">The event was just removed, add it again.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00148">eventqueue.cpp:148</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_xhtml_af909cf1de79df6389fd9431b7424b48a"><div class="ttname"><a href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">openage::curve::time_t</a></div><div class="ttdeci">util::FixedPoint&lt; int64_t, 16 &gt; time_t</div><div class="ttdoc">Defines the type that is used as time index.</div><div class="ttdef"><b>Definition:</b> <a href="curve_8h_source.xhtml#l00016">curve.h:16</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a7da54eb03b82d893e26af2af2749dd62"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a7da54eb03b82d893e26af2af2749dd62">openage::event::EventQueue::get_event_queue</a></div><div class="ttdeci">const EventStore &amp; get_event_queue() const</div><div class="ttdoc">Get an accessor to the running queue for state output purpose.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00153">eventqueue.cpp:153</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_aec381e61d472643475de6fa50ae7b5d8"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#aec381e61d472643475de6fa50ae7b5d8">openage::event::EventQueue::take_event</a></div><div class="ttdeci">std::shared_ptr&lt; Event &gt; take_event(const curve::time_t &amp;max_time)</div><div class="ttdoc">Obtain the next event from the event_queue that happens before &lt;= max_time.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00158">eventqueue.cpp:158</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_store_xhtml_af94747a58143a4d16b0f94bd184444be"><div class="ttname"><a href="classopenage_1_1event_1_1_event_store.xhtml#af94747a58143a4d16b0f94bd184444be">openage::event::EventStore::get_sorted_events</a></div><div class="ttdeci">std::vector&lt; std::shared_ptr&lt; Event &gt; &gt; get_sorted_events() const</div><div class="ttdoc">Helper function that should not be called 'in production'.</div><div class="ttdef"><b>Definition:</b> <a href="eventstore_8cpp_source.xhtml#l00099">eventstore.cpp:99</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_a9f9201d7ad7a6dccf71e3a6502982963"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#a9f9201d7ad7a6dccf71e3a6502982963">openage::event::Loop::active_event</a></div><div class="ttdeci">std::shared_ptr&lt; Event &gt; active_event</div><div class="ttdoc">The currently processed event.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00130">loop.h:130</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_store_xhtml_a895a291c20860520abba447e1cd48fd0"><div class="ttname"><a href="classopenage_1_1event_1_1_event_store.xhtml#a895a291c20860520abba447e1cd48fd0">openage::event::EventStore::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdef"><b>Definition:</b> <a href="eventstore_8cpp_source.xhtml#l00089">eventstore.cpp:89</a></div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">openage::event::EventClass::trigger_type::REPEAT</a></div><div class="ttdoc">Will be triggered unconditionally at the set time, &quot;at&quot; is the time that was set as return of predict...</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="event_2loop_8h_source.xhtml#l00130">active_event</a>, <a class="el" href="message_8h_source.xhtml#l00176">DBG</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00153">openage::event::EventQueue::get_event_queue()</a>, <a class="el" href="eventstore_8cpp_source.xhtml#l00099">openage::event::EventStore::get_sorted_events()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00475">std::min()</a>, <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00148">openage::event::EventQueue::reenqueue()</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">openage::event::EventClass::REPEAT</a>, <a class="el" href="eventstore_8cpp_source.xhtml#l00089">openage::event::EventStore::size()</a>, and <a class="el" href="eventqueue_8cpp_source.xhtml#l00158">openage::event::EventQueue::take_event()</a>.</p>

<p class="reference">Referenced by <a class="el" href="loop_8cpp_source.xhtml#l00056">reach_time()</a>.</p>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_aa73104f71472a83e1afff4f11e0c619f_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_aa73104f71472a83e1afff4f11e0c619f_icgraph.svg" width="350" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a2bd405975ded3f10fbf48eabd2a6cb49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bd405975ded3f10fbf48eabd2a6cb49">&#9670;&nbsp;</a></span>get_queue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a>&amp; openage::event::Loop::get_queue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00092">92</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                                        {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>.</p>

</div>
</div>
<a id="aea43d31d3b22e6ae29087df21aa014a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea43d31d3b22e6ae29087df21aa014a7">&#9670;&nbsp;</a></span>onfilter() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::onfilter </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>eventclass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="reference">Referenced by <a class="el" href="event_2loop_8h_source.xhtml#l00068">onfilter()</a>.</p>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_aea43d31d3b22e6ae29087df21aa014a7_icgraph.svg" width="350" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ada595233343c378554941df3ff039c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada595233343c378554941df3ff039c4b">&#9670;&nbsp;</a></span>onfilter() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class evntclass_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::onfilter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00068">68</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                             {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aea43d31d3b22e6ae29087df21aa014a7">onfilter</a>(std::make_shared&lt;evntclass_t&gt;(), filter);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aea43d31d3b22e6ae29087df21aa014a7"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aea43d31d3b22e6ae29087df21aa014a7">openage::event::Loop::onfilter</a></div><div class="ttdeci">void onfilter(const std::shared_ptr&lt; EventClass &gt; &amp;eventclass, const EventFilter &amp;)</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aea43d31d3b22e6ae29087df21aa014a7">onfilter()</a>.</p>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_ada595233343c378554941df3ff039c4b_cgraph.svg" width="350" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aeba9e515057a87d7fbfddb8585095de6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeba9e515057a87d7fbfddb8585095de6">&#9670;&nbsp;</a></span>reach_time()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::reach_time </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>max_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Execute all events that are registered until a certain point in time. </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                                                         {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="comment">// \todo detect infinite loops (is this a halting problem?)</span></div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="comment">// this happens when the events don&#39;t settle:</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// at least one processed event adds another event so</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// the queue never stops adding changes</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// simple &quot;solution&quot;: abort after over 9000 attempts.</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">int</span> cnt = 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">int</span> attempts = 0;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">do</span> {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: Attempt &quot;</span> &lt;&lt; attempts &lt;&lt; <span class="stringliteral">&quot; to reach t=&quot;</span> &lt;&lt; max_time);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#a3cb0ae638435b575fe689c550b27a823">update_changes</a>(state);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        cnt = this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa73104f71472a83e1afff4f11e0c619f">execute_events</a>(max_time, state);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: to reach t=&quot;</span> &lt;&lt; max_time</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot;, n=&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="stringliteral">&quot; events were executed&quot;</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">if</span> (attempts &gt; 9000) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a271d8f7f52be750e5c744a394ec71344">WARN</a> &lt;&lt; <span class="stringliteral">&quot;Loop: reached event settling threshold, giving up.&quot;</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        attempts += 1;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    } <span class="keywordflow">while</span> (cnt != 0);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="comment">// Swap in the end of the execution, else we might skip changes that happen</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// in the main loop for one frame - which is bad btw.</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a11ac5f64f4344db4281924887f8bda1d">swap_changesets</a>();</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: t=&quot;</span> &lt;&lt; max_time &lt;&lt; <span class="stringliteral">&quot; was reached! ========&quot;</span>);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div><div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa73104f71472a83e1afff4f11e0c619f"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa73104f71472a83e1afff4f11e0c619f">openage::event::Loop::execute_events</a></div><div class="ttdeci">int execute_events(const curve::time_t &amp;max_time, const std::shared_ptr&lt; State &gt; &amp;state)</div><div class="ttdoc">Execute the events.</div><div class="ttdef"><b>Definition:</b> <a href="loop_8cpp_source.xhtml#l00090">loop.cpp:90</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a11ac5f64f4344db4281924887f8bda1d"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a11ac5f64f4344db4281924887f8bda1d">openage::event::EventQueue::swap_changesets</a></div><div class="ttdeci">void swap_changesets()</div><div class="ttdoc">Swap the changes and future_changes.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00189">eventqueue.cpp:189</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_a3cb0ae638435b575fe689c550b27a823"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#a3cb0ae638435b575fe689c550b27a823">openage::event::Loop::update_changes</a></div><div class="ttdeci">void update_changes(const std::shared_ptr&lt; State &gt; &amp;state)</div><div class="ttdoc">Call all the time change functions.</div><div class="ttdef"><b>Definition:</b> <a href="loop_8cpp_source.xhtml#l00158">loop.cpp:158</a></div></div>
<div class="ttc" id="message_8h_xhtml_a271d8f7f52be750e5c744a394ec71344"><div class="ttname"><a href="message_8h.xhtml#a271d8f7f52be750e5c744a394ec71344">WARN</a></div><div class="ttdeci">#define WARN</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00178">message.h:178</a></div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="message_8h_source.xhtml#l00176">DBG</a>, <a class="el" href="loop_8cpp_source.xhtml#l00090">execute_events()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00189">openage::event::EventQueue::swap_changesets()</a>, <a class="el" href="loop_8cpp_source.xhtml#l00158">update_changes()</a>, and <a class="el" href="message_8h_source.xhtml#l00178">WARN</a>.</p>
<div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_aeba9e515057a87d7fbfddb8585095de6_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a172ef3ff0f7d0586a06a6b356a7515f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a172ef3ff0f7d0586a06a6b356a7515f1">&#9670;&nbsp;</a></span>register_object()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::register_object </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3cb0ae638435b575fe689c550b27a823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cb0ae638435b575fe689c550b27a823">&#9670;&nbsp;</a></span>update_changes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::update_changes </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call all the time change functions. </p>
<p>This is constant on the state! </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                                                           {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: &quot;</span> &lt;&lt; this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a501fe0a6571ddf1a97bf6d7a6328d924">get_changes</a>().size()</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;             &lt;&lt; <span class="stringliteral">&quot; target changes have to be processed&quot;</span>);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordtype">size_t</span> i = 0;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="comment">// reevaluate depending events beecause of the change</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;change : this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a501fe0a6571ddf1a97bf6d7a6328d924">get_changes</a>()) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">auto</span> evnt = change.evnt.lock();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> (evnt) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;  change &quot;</span> &lt;&lt; i++ &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; evnt-&gt;get_eventclass()-&gt;id());</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">switch</span>(evnt-&gt;get_eventclass()-&gt;type) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">EventClass::trigger_type::ONCE</a>:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">EventClass::trigger_type::DEPENDENCY</a>: {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keyword">auto</span> target = evnt-&gt;get_target().lock();</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="comment">// \todo what happens when the target is degraded?</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                <span class="keywordflow">if</span> (target) {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> new_time = evnt-&gt;get_eventclass()</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                                 -&gt;predict_invoke_time(target, state, change.time);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    <span class="keywordflow">if</span> (new_time != <a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::numeric_limits&lt;curve::time_t&gt;::min</a>()) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: due to a change, rescheduling event of &#39;&quot;</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                                 &lt;&lt; evnt-&gt;get_eventclass()-&gt;id()</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                                 &lt;&lt; <span class="stringliteral">&quot;&#39; on target &#39;&quot;</span> &lt;&lt; target-&gt;id()</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                                 &lt;&lt; <span class="stringliteral">&quot;&#39; at time t=&quot;</span> &lt;&lt; change.time</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                                 &lt;&lt; <span class="stringliteral">&quot; to NEW TIME t=&quot;</span> &lt;&lt; new_time);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                        evnt-&gt;set_time(new_time);</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a8f45163ce661267cf80d811a776c8733">enqueue_change</a>(evnt);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Loop: due to a change, canceled execution of &#39;&quot;</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                                 &lt;&lt; evnt-&gt;get_eventclass()-&gt;id()</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                                 &lt;&lt; <span class="stringliteral">&quot;&#39; on target &#39;&quot;</span> &lt;&lt; target-&gt;id()</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                 &lt;&lt; <span class="stringliteral">&quot;&#39; at time t=&quot;</span> &lt;&lt; change.time);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                        this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a42433f50adffb7e0a20c43889292e54c">remove</a>(evnt);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            } <span class="keywordflow">break</span>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">EventClass::trigger_type::TRIGGER</a>:</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">EventClass::trigger_type::DEPENDENCY_IMMEDIATELY</a>:</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                evnt-&gt;set_time(change.time);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a8f45163ce661267cf80d811a776c8733">enqueue_change</a>(evnt);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">EventClass::trigger_type::REPEAT</a>:</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    this-&gt;<a class="code" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a>.<a class="code" href="classopenage_1_1event_1_1_event_queue.xhtml#a2f04cadaa84a8629b94020cb26b999ad">clear_changes</a>();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a8f45163ce661267cf80d811a776c8733"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a8f45163ce661267cf80d811a776c8733">openage::event::EventQueue::enqueue_change</a></div><div class="ttdeci">void enqueue_change(const std::shared_ptr&lt; Event &gt; &amp;event)</div><div class="ttdoc">An update to existing events has to be applied.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00138">eventqueue.cpp:138</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a34591a1d8ee5da3f16f56554590d5e16"><div class="ttname"><a href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; min(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00475">fixed_point.h:475</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml_aa3e92d18681ac0167d1b67e7ab147328"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">openage::event::Loop::queue</a></div><div class="ttdeci">EventQueue queue</div><div class="ttdoc">All events are enqueued here.</div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00124">loop.h:124</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a2f04cadaa84a8629b94020cb26b999ad"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a2f04cadaa84a8629b94020cb26b999ad">openage::event::EventQueue::clear_changes</a></div><div class="ttdeci">void clear_changes()</div><div class="ttdoc">All changes (fetched with get_changes) have been processed, so we can clear the change_set.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00184">eventqueue.cpp:184</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a501fe0a6571ddf1a97bf6d7a6328d924"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a501fe0a6571ddf1a97bf6d7a6328d924">openage::event::EventQueue::get_changes</a></div><div class="ttdeci">const change_set &amp; get_changes() const</div><div class="ttdoc">Get the change_set to process changes.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00179">eventqueue.cpp:179</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_xhtml_af909cf1de79df6389fd9431b7424b48a"><div class="ttname"><a href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">openage::curve::time_t</a></div><div class="ttdeci">util::FixedPoint&lt; int64_t, 16 &gt; time_t</div><div class="ttdoc">Defines the type that is used as time index.</div><div class="ttdef"><b>Definition:</b> <a href="curve_8h_source.xhtml#l00016">curve.h:16</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">openage::event::EventClass::trigger_type::DEPENDENCY_IMMEDIATELY</a></div><div class="ttdoc">Like DEPENDENCY, but does not use a recalculated time, instead uses the change-time only.</div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_queue_xhtml_a42433f50adffb7e0a20c43889292e54c"><div class="ttname"><a href="classopenage_1_1event_1_1_event_queue.xhtml#a42433f50adffb7e0a20c43889292e54c">openage::event::EventQueue::remove</a></div><div class="ttdeci">void remove(const std::shared_ptr&lt; Event &gt; &amp;evnt)</div><div class="ttdoc">Remove the given event from the queue.</div><div class="ttdef"><b>Definition:</b> <a href="eventqueue_8cpp_source.xhtml#l00129">eventqueue.cpp:129</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">openage::event::EventClass::trigger_type::DEPENDENCY</a></div><div class="ttdoc">Such events are emitted when a modification is done on a target.</div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">openage::event::EventClass::trigger_type::TRIGGER</a></div><div class="ttdoc">Will be executed when the target trigger() function is called.</div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">openage::event::EventClass::trigger_type::ONCE</a></div><div class="ttdoc">Will be triggered only once, but until it is triggered the time, when this should happen can be recal...</div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">openage::event::EventClass::trigger_type::REPEAT</a></div><div class="ttdoc">Will be triggered unconditionally at the set time, &quot;at&quot; is the time that was set as return of predict...</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="eventqueue_8cpp_source.xhtml#l00184">openage::event::EventQueue::clear_changes()</a>, <a class="el" href="message_8h_source.xhtml#l00176">DBG</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">openage::event::EventClass::DEPENDENCY</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">openage::event::EventClass::DEPENDENCY_IMMEDIATELY</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00138">openage::event::EventQueue::enqueue_change()</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00179">openage::event::EventQueue::get_changes()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00475">std::min()</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">openage::event::EventClass::ONCE</a>, <a class="el" href="event_2loop_8h_source.xhtml#l00124">queue</a>, <a class="el" href="eventqueue_8cpp_source.xhtml#l00129">openage::event::EventQueue::remove()</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">openage::event::EventClass::REPEAT</a>, and <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">openage::event::EventClass::TRIGGER</a>.</p>

<p class="reference">Referenced by <a class="el" href="loop_8cpp_source.xhtml#l00056">reach_time()</a>.</p>
<div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_a3cb0ae638435b575fe689c550b27a823_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop_a3cb0ae638435b575fe689c550b27a823_icgraph.svg" width="350" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a5951d4eb106c31663bdf480e12d382fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5951d4eb106c31663bdf480e12d382fb">&#9670;&nbsp;</a></span>demo::curvepong</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceopenage_1_1event_1_1demo.xhtml#a941b2bcbd6e44b20cc352eb1c2b64068">demo::curvepong</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a9f9201d7ad7a6dccf71e3a6502982963"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f9201d7ad7a6dccf71e3a6502982963">&#9670;&nbsp;</a></span>active_event</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a>&gt; openage::event::Loop::active_event</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The currently processed event. </p>
<p>This is useful for event cancelations (so one can't cancel itself). </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00130">130</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="loop_8cpp_source.xhtml#l00090">execute_events()</a>.</p>

</div>
</div>
<a id="ac56f6ba1b5422a37dd76082d1f12d588"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac56f6ba1b5422a37dd76082d1f12d588">&#9670;&nbsp;</a></span>classstore</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt;std::string, std::shared_ptr&lt;<a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>&gt; &gt; openage::event::Loop::classstore</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Here we do the bookkeeping of registered event classes. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00113">113</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="loop_8cpp_source.xhtml#l00016">add_event_class()</a>, and <a class="el" href="loop_8cpp_source.xhtml#l00021">create_event()</a>.</p>

</div>
</div>
<a id="a0c611cd54ec98d5f8e2b8486e6aa5d9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c611cd54ec98d5f8e2b8486e6aa5d9e">&#9670;&nbsp;</a></span>curveindex</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt;uint64_t, std::weak_ptr&lt;<a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a>&gt; &gt; openage::event::Loop::curveindex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00132">132</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="a2aa3c5ecf7ac25ee07ae50e0e206cf95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2aa3c5ecf7ac25ee07ae50e0e206cf95">&#9670;&nbsp;</a></span>filters</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt;<a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a>&gt; openage::event::Loop::filters</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Here we store all running filters that shall be applied whenever a new obejct is added to our objectstore. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00119">119</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="aa3e92d18681ac0167d1b67e7ab147328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3e92d18681ac0167d1b67e7ab147328">&#9670;&nbsp;</a></span>queue</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a> openage::event::Loop::queue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>All events are enqueued here. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00124">124</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="fifo_8py_source.xhtml#l00067">openage.util.filelike.fifo.FIFO::__len__()</a>, <a class="el" href="event_2loop_8h_source.xhtml#l00137">create_change()</a>, <a class="el" href="loop_8cpp_source.xhtml#l00021">create_event()</a>, <a class="el" href="loop_8cpp_source.xhtml#l00090">execute_events()</a>, <a class="el" href="event_2loop_8h_source.xhtml#l00092">get_queue()</a>, <a class="el" href="fifo_8py_source.xhtml#l00112">openage.util.filelike.fifo.FIFO::get_size()</a>, <a class="el" href="loop_8cpp_source.xhtml#l00056">reach_time()</a>, <a class="el" href="fifo_8py_source.xhtml#l00099">openage.util.filelike.fifo.FIFO::read()</a>, <a class="el" href="fifo_8py_source.xhtml#l00050">openage.util.filelike.fifo.FIFO::tellw()</a>, <a class="el" href="loop_8cpp_source.xhtml#l00158">update_changes()</a>, and <a class="el" href="fifo_8py_source.xhtml#l00082">openage.util.filelike.fifo.FIFO::write()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/event/<a class="el" href="event_2loop_8h_source.xhtml">loop.h</a></li>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/event/<a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1event.xhtml">event</a></li><li class="navelem"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml">Loop</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
