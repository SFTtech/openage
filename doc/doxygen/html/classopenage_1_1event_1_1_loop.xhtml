<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: openage::event::Loop Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1event_1_1_loop.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classopenage_1_1event_1_1_loop-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::event::Loop Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for openage::event::Loop:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1event_1_1_loop__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1904c3c6896c276199d5fd604663c3a2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a1904c3c6896c276199d5fd604663c3a2">add_event_class</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;cls)</td></tr>
<tr class="separator:a1904c3c6896c276199d5fd604663c3a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a345332e87684e73eeef16da46255882f"><td class="memItemLeft" align="right" valign="top">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a345332e87684e73eeef16da46255882f">create_event</a> (const std::string &amp;name, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;target, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state, const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;reference_time, const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;params=<a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({}))</td></tr>
<tr class="separator:a345332e87684e73eeef16da46255882f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea3bb40d2dfbca8a48c8389af357ebb0"><td class="memItemLeft" align="right" valign="top">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aea3bb40d2dfbca8a48c8389af357ebb0">create_event</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;eventclass, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;target, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state, const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;reference_time, const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;params=<a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({}))</td></tr>
<tr class="separator:aea3bb40d2dfbca8a48c8389af357ebb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea43d31d3b22e6ae29087df21aa014a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aea43d31d3b22e6ae29087df21aa014a7">onfilter</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;eventclass, const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;)</td></tr>
<tr class="separator:aea43d31d3b22e6ae29087df21aa014a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada595233343c378554941df3ff039c4b"><td class="memTemplParams" colspan="2">template&lt;class evntclass_t &gt; </td></tr>
<tr class="memitem:ada595233343c378554941df3ff039c4b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#ada595233343c378554941df3ff039c4b">onfilter</a> (const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;filter)</td></tr>
<tr class="separator:ada595233343c378554941df3ff039c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a172ef3ff0f7d0586a06a6b356a7515f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a172ef3ff0f7d0586a06a6b356a7515f1">register_object</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;)</td></tr>
<tr class="separator:a172ef3ff0f7d0586a06a6b356a7515f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeba9e515057a87d7fbfddb8585095de6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aeba9e515057a87d7fbfddb8585095de6">reach_time</a> (const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;max_time, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state)</td></tr>
<tr class="separator:aeba9e515057a87d7fbfddb8585095de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adde017808ad3b24a4a95c6cad4fcd2db"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:adde017808ad3b24a4a95c6cad4fcd2db"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#adde017808ad3b24a4a95c6cad4fcd2db">create_change</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; &amp;event, const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;changes_at, const T &amp;new_value)</td></tr>
<tr class="separator:adde017808ad3b24a4a95c6cad4fcd2db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bd405975ded3f10fbf48eabd2a6cb49"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a2bd405975ded3f10fbf48eabd2a6cb49">get_queue</a> () const</td></tr>
<tr class="separator:a2bd405975ded3f10fbf48eabd2a6cb49"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:aa73104f71472a83e1afff4f11e0c619f"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aa73104f71472a83e1afff4f11e0c619f">execute_events</a> (const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;max_time, const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state)</td></tr>
<tr class="separator:aa73104f71472a83e1afff4f11e0c619f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cb0ae638435b575fe689c550b27a823"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a3cb0ae638435b575fe689c550b27a823">update_changes</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;state)</td></tr>
<tr class="separator:a3cb0ae638435b575fe689c550b27a823"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:ac56f6ba1b5422a37dd76082d1f12d588"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; std::string, std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#ac56f6ba1b5422a37dd76082d1f12d588">classstore</a></td></tr>
<tr class="separator:ac56f6ba1b5422a37dd76082d1f12d588"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2aa3c5ecf7ac25ee07ae50e0e206cf95"><td class="memItemLeft" align="right" valign="top">std::list&lt; <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a2aa3c5ecf7ac25ee07ae50e0e206cf95">filters</a></td></tr>
<tr class="separator:a2aa3c5ecf7ac25ee07ae50e0e206cf95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e92d18681ac0167d1b67e7ab147328"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#aa3e92d18681ac0167d1b67e7ab147328">queue</a></td></tr>
<tr class="separator:aa3e92d18681ac0167d1b67e7ab147328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f9201d7ad7a6dccf71e3a6502982963"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a9f9201d7ad7a6dccf71e3a6502982963">active_event</a></td></tr>
<tr class="separator:a9f9201d7ad7a6dccf71e3a6502982963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c611cd54ec98d5f8e2b8486e6aa5d9e"><td class="memItemLeft" align="right" valign="top">std::unordered_map&lt; uint64_t, std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a0c611cd54ec98d5f8e2b8486e6aa5d9e">curveindex</a></td></tr>
<tr class="separator:a0c611cd54ec98d5f8e2b8486e6aa5d9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a5951d4eb106c31663bdf480e12d382fb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml#a5951d4eb106c31663bdf480e12d382fb">demo::curvepong</a> ()</td></tr>
<tr class="separator:a5951d4eb106c31663bdf480e12d382fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The core class to manage event class and targets. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00032">32</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a1904c3c6896c276199d5fd604663c3a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1904c3c6896c276199d5fd604663c3a2">&#9670;&nbsp;</a></span>add_event_class()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::add_event_class </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>cls</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>register a new event class </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>

</div>
</div>
<a id="adde017808ad3b24a4a95c6cad4fcd2db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adde017808ad3b24a4a95c6cad4fcd2db">&#9670;&nbsp;</a></span>create_change()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::create_change </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>event</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>changes_at</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>new_value</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Register that a given event must be reevaluated at a time, this usually happens because this event depended on an eventtarget that got changed at this time. This inserts the event into the changes queue so it will be evaluated in the next loop iteration. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00137">137</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="a345332e87684e73eeef16da46255882f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a345332e87684e73eeef16da46255882f">&#9670;&nbsp;</a></span>create_event() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; openage::event::Loop::create_event </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>reference_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({})</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add a new <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> to the queue. The event is from the given class (name) and is invoked for a target in a state.</p>
<p>The <code>reference_time</code> is used to calculate the actual event time. </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>

</div>
</div>
<a id="aea3bb40d2dfbca8a48c8389af357ebb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea3bb40d2dfbca8a48c8389af357ebb0">&#9670;&nbsp;</a></span>create_event() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::weak_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a> &gt; openage::event::Loop::create_event </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>eventclass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>target</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>reference_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a>({})</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This will generate a new randomly named eventclass for this specific element</p>
<p>The <code>reference_time</code> is used to determine the actual event trigger time. </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00036">36</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>

</div>
</div>
<a id="aa73104f71472a83e1afff4f11e0c619f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa73104f71472a83e1afff4f11e0c619f">&#9670;&nbsp;</a></span>execute_events()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int openage::event::Loop::execute_events </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>max_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Execute the events</p>
<dl class="section return"><dt>Returns</dt><dd>number of events processed </dd></dl>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>

</div>
</div>
<a id="a2bd405975ded3f10fbf48eabd2a6cb49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bd405975ded3f10fbf48eabd2a6cb49">&#9670;&nbsp;</a></span>get_queue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a>&amp; openage::event::Loop::get_queue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00092">92</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="aea43d31d3b22e6ae29087df21aa014a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea43d31d3b22e6ae29087df21aa014a7">&#9670;&nbsp;</a></span>onfilter() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::onfilter </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>eventclass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ada595233343c378554941df3ff039c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada595233343c378554941df3ff039c4b">&#9670;&nbsp;</a></span>onfilter() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class evntclass_t &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::onfilter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a> &amp;&#160;</td>
          <td class="paramname"><em>filter</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00068">68</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="aeba9e515057a87d7fbfddb8585095de6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeba9e515057a87d7fbfddb8585095de6">&#9670;&nbsp;</a></span>reach_time()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::reach_time </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;&#160;</td>
          <td class="paramname"><em>max_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Execute all events that are registered until a certain point in time. </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00056">56</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>

</div>
</div>
<a id="a172ef3ff0f7d0586a06a6b356a7515f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a172ef3ff0f7d0586a06a6b356a7515f1">&#9670;&nbsp;</a></span>register_object()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::register_object </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3cb0ae638435b575fe689c550b27a823"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3cb0ae638435b575fe689c550b27a823">&#9670;&nbsp;</a></span>update_changes()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::Loop::update_changes </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1event_1_1_state.xhtml">State</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>state</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Call all the time change functions. This is constant on the state! </p>

<p class="definition">Definition at line <a class="el" href="loop_8cpp_source.xhtml#l00158">158</a> of file <a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="a5951d4eb106c31663bdf480e12d382fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5951d4eb106c31663bdf480e12d382fb">&#9670;&nbsp;</a></span>demo::curvepong</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceopenage_1_1event_1_1demo.xhtml#a941b2bcbd6e44b20cc352eb1c2b64068">demo::curvepong</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a9f9201d7ad7a6dccf71e3a6502982963"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f9201d7ad7a6dccf71e3a6502982963">&#9670;&nbsp;</a></span>active_event</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1event_1_1_event.xhtml">Event</a>&gt; openage::event::Loop::active_event</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>The currently processed event. This is useful for event cancelations (so one can't cancel itself). </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00130">130</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="ac56f6ba1b5422a37dd76082d1f12d588"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac56f6ba1b5422a37dd76082d1f12d588">&#9670;&nbsp;</a></span>classstore</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt;std::string, std::shared_ptr&lt;<a class="el" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>&gt; &gt; openage::event::Loop::classstore</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Here we do the bookkeeping of registered event classes. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00113">113</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="a0c611cd54ec98d5f8e2b8486e6aa5d9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c611cd54ec98d5f8e2b8486e6aa5d9e">&#9670;&nbsp;</a></span>curveindex</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::unordered_map&lt;uint64_t, std::weak_ptr&lt;<a class="el" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a>&gt; &gt; openage::event::Loop::curveindex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00132">132</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="a2aa3c5ecf7ac25ee07ae50e0e206cf95"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2aa3c5ecf7ac25ee07ae50e0e206cf95">&#9670;&nbsp;</a></span>filters</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::list&lt;<a class="el" href="classopenage_1_1event_1_1_event_filter.xhtml">EventFilter</a>&gt; openage::event::Loop::filters</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Here we store all running filters that shall be applied whenever a new obejct is added to our objectstore </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00119">119</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<a id="aa3e92d18681ac0167d1b67e7ab147328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3e92d18681ac0167d1b67e7ab147328">&#9670;&nbsp;</a></span>queue</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml">EventQueue</a> openage::event::Loop::queue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>All events are enqueued here. </p>

<p class="definition">Definition at line <a class="el" href="event_2loop_8h_source.xhtml#l00124">124</a> of file <a class="el" href="event_2loop_8h_source.xhtml">loop.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>libopenage/event/<a class="el" href="event_2loop_8h_source.xhtml">loop.h</a></li>
<li>libopenage/event/<a class="el" href="loop_8cpp_source.xhtml">loop.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1event.xhtml">event</a></li><li class="navelem"><a class="el" href="classopenage_1_1event_1_1_loop.xhtml">Loop</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
