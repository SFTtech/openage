<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::renderer::Renderer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1renderer_1_1_renderer.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classopenage_1_1renderer_1_1_renderer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::renderer::Renderer Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="renderer_8h_source.xhtml">renderer.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for openage::renderer::Renderer:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1renderer_1_1_renderer__inherit__graph.svg" width="176" height="522"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for openage::renderer::Renderer:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1renderer_1_1_renderer__coll__graph.svg" width="176" height="235"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a861d171e80f126375b4c20287dd85436"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#a861d171e80f126375b4c20287dd85436">~Renderer</a> ()=default</td></tr>
<tr class="separator:a861d171e80f126375b4c20287dd85436"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07fe03ec7257b6dfa803988be4607740"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classopenage_1_1renderer_1_1_texture2d.xhtml">Texture2d</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#a07fe03ec7257b6dfa803988be4607740">add_texture</a> (<a class="el" href="classopenage_1_1renderer_1_1resources_1_1_texture2d_data.xhtml">resources::Texture2dData</a> const &amp;)=0</td></tr>
<tr class="separator:a07fe03ec7257b6dfa803988be4607740"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae35bdd48e24b2942a4ef5b55271f46c7"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classopenage_1_1renderer_1_1_texture2d.xhtml">Texture2d</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#ae35bdd48e24b2942a4ef5b55271f46c7">add_texture</a> (<a class="el" href="classopenage_1_1renderer_1_1resources_1_1_texture2d_info.xhtml">resources::Texture2dInfo</a> const &amp;)=0</td></tr>
<tr class="memdesc:ae35bdd48e24b2942a4ef5b55271f46c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new empty texture with the given parameters on the graphics hardware.  <a href="#ae35bdd48e24b2942a4ef5b55271f46c7">More...</a><br /></td></tr>
<tr class="separator:ae35bdd48e24b2942a4ef5b55271f46c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9371f6d9b258db3b287e5fcab73a4996"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classopenage_1_1renderer_1_1_shader_program.xhtml">ShaderProgram</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#a9371f6d9b258db3b287e5fcab73a4996">add_shader</a> (std::vector&lt; <a class="el" href="classopenage_1_1renderer_1_1resources_1_1_shader_source.xhtml">resources::ShaderSource</a> &gt; const &amp;)=0</td></tr>
<tr class="separator:a9371f6d9b258db3b287e5fcab73a4996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7faabd63826f110062b7fbf5202c7c9"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classopenage_1_1renderer_1_1_geometry.xhtml">Geometry</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#ac7faabd63826f110062b7fbf5202c7c9">add_mesh_geometry</a> (<a class="el" href="classopenage_1_1renderer_1_1resources_1_1_mesh_data.xhtml">resources::MeshData</a> const &amp;)=0</td></tr>
<tr class="separator:ac7faabd63826f110062b7fbf5202c7c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67a77e7702c68b2fa880f9c26f877eed"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classopenage_1_1renderer_1_1_geometry.xhtml">Geometry</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#a67a77e7702c68b2fa880f9c26f877eed">add_bufferless_quad</a> ()=0</td></tr>
<tr class="separator:a67a77e7702c68b2fa880f9c26f877eed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf1729acc8160a03eca5b91cf6e7dc3a"><td class="memItemLeft" align="right" valign="top">virtual std::unique_ptr&lt; <a class="el" href="classopenage_1_1renderer_1_1_render_target.xhtml">RenderTarget</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#aaf1729acc8160a03eca5b91cf6e7dc3a">create_texture_target</a> (std::vector&lt; <a class="el" href="classopenage_1_1renderer_1_1_texture2d.xhtml">Texture2d</a> * &gt;)=0</td></tr>
<tr class="separator:aaf1729acc8160a03eca5b91cf6e7dc3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a55ee0bda543175600d17b62d24dbf1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopenage_1_1renderer_1_1_render_target.xhtml">RenderTarget</a> const  *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#a2a55ee0bda543175600d17b62d24dbf1">get_display_target</a> ()=0</td></tr>
<tr class="separator:a2a55ee0bda543175600d17b62d24dbf1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e2749c186084a43f41a77fb8c999647"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classopenage_1_1renderer_1_1resources_1_1_texture2d_data.xhtml">resources::Texture2dData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#a9e2749c186084a43f41a77fb8c999647">display_into_data</a> ()=0</td></tr>
<tr class="memdesc:a9e2749c186084a43f41a77fb8c999647"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the display framebuffer into a CPU-accessible data object. Essentially, this takes a screenshot.  <a href="#a9e2749c186084a43f41a77fb8c999647">More...</a><br /></td></tr>
<tr class="separator:a9e2749c186084a43f41a77fb8c999647"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6810194c364c0708a7af3407a8c3447"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml#aa6810194c364c0708a7af3407a8c3447">render</a> (<a class="el" href="structopenage_1_1renderer_1_1_render_pass.xhtml">RenderPass</a> const &amp;)=0</td></tr>
<tr class="memdesc:aa6810194c364c0708a7af3407a8c3447"><td class="mdescLeft">&#160;</td><td class="mdescRight">Executes a render pass.  <a href="#aa6810194c364c0708a7af3407a8c3447">More...</a><br /></td></tr>
<tr class="separator:aa6810194c364c0708a7af3407a8c3447"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The renderer. This class is used for performing all graphics operations. It is abstract and has implementations for various low-level graphics APIs like OpenGL. </p>

<p class="definition">Definition at line <a class="el" href="renderer_8h_source.xhtml#l00072">72</a> of file <a class="el" href="renderer_8h_source.xhtml">renderer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a861d171e80f126375b4c20287dd85436"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a861d171e80f126375b4c20287dd85436">&#9670;&nbsp;</a></span>~Renderer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual openage::renderer::Renderer::~Renderer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a67a77e7702c68b2fa880f9c26f877eed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67a77e7702c68b2fa880f9c26f877eed">&#9670;&nbsp;</a></span>add_bufferless_quad()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classopenage_1_1renderer_1_1_geometry.xhtml">Geometry</a>&gt; openage::renderer::Renderer::add_bufferless_quad </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Adds a <a class="el" href="classopenage_1_1renderer_1_1_geometry.xhtml" title="A class representing geometry to be passed to a draw call.">Geometry</a> object that passes a simple 4-vertex drawing command with no vertex attributes to the shader. Useful for generating positions in the vertex shader. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#a9bfa7ca074b1a40804f2e20bcdaa833e">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="ac7faabd63826f110062b7fbf5202c7c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7faabd63826f110062b7fbf5202c7c9">&#9670;&nbsp;</a></span>add_mesh_geometry()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classopenage_1_1renderer_1_1_geometry.xhtml">Geometry</a>&gt; openage::renderer::Renderer::add_mesh_geometry </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopenage_1_1renderer_1_1resources_1_1_mesh_data.xhtml">resources::MeshData</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates a <a class="el" href="classopenage_1_1renderer_1_1_geometry.xhtml" title="A class representing geometry to be passed to a draw call.">Geometry</a> object from the given mesh data, uploading it to the GPU by creating appropriate buffer. The vertex attributes will be passed to the shader as described in the mesh data. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#aa20ca113dfbb6d0087451ba6a2bca1e9">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="a9371f6d9b258db3b287e5fcab73a4996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9371f6d9b258db3b287e5fcab73a4996">&#9670;&nbsp;</a></span>add_shader()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classopenage_1_1renderer_1_1_shader_program.xhtml">ShaderProgram</a>&gt; openage::renderer::Renderer::add_shader </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classopenage_1_1renderer_1_1resources_1_1_shader_source.xhtml">resources::ShaderSource</a> &gt; const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Compiles the given shader source code into a shader program. A shader program is the main tool used for graphics rendering. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#a5b9cd6e0294a1f4ea8e309badff46167">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="a07fe03ec7257b6dfa803988be4607740"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07fe03ec7257b6dfa803988be4607740">&#9670;&nbsp;</a></span>add_texture() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classopenage_1_1renderer_1_1_texture2d.xhtml">Texture2d</a>&gt; openage::renderer::Renderer::add_texture </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopenage_1_1renderer_1_1resources_1_1_texture2d_data.xhtml">resources::Texture2dData</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Uploads the given texture data (usually loaded from disk) to graphics hardware and makes it available as a <a class="el" href="classopenage_1_1_texture.xhtml">Texture</a> object that can be used for various operations. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#adb92e5d60d03ef91964ee7dc3871872b">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="ae35bdd48e24b2942a4ef5b55271f46c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae35bdd48e24b2942a4ef5b55271f46c7">&#9670;&nbsp;</a></span>add_texture() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classopenage_1_1renderer_1_1_texture2d.xhtml">Texture2d</a>&gt; openage::renderer::Renderer::add_texture </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classopenage_1_1renderer_1_1resources_1_1_texture2d_info.xhtml">resources::Texture2dInfo</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new empty texture with the given parameters on the graphics hardware. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#ad1f48c54d3dd40436e868607fb7283f7">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="aaf1729acc8160a03eca5b91cf6e7dc3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf1729acc8160a03eca5b91cf6e7dc3a">&#9670;&nbsp;</a></span>create_texture_target()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::unique_ptr&lt;<a class="el" href="classopenage_1_1renderer_1_1_render_target.xhtml">RenderTarget</a>&gt; openage::renderer::Renderer::create_texture_target </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classopenage_1_1renderer_1_1_texture2d.xhtml">Texture2d</a> * &gt;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Constructs a render target from the given textures. All subsequent drawing operations pointed at this target will write to these textures. Textures are attached to the target in the order in which they appear within the vector. Depth textures are attached as depth components. Textures of every other type are attached as color components. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#ae3af3b346279a744ca6330701543f71d">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="a9e2749c186084a43f41a77fb8c999647"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e2749c186084a43f41a77fb8c999647">&#9670;&nbsp;</a></span>display_into_data()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopenage_1_1renderer_1_1resources_1_1_texture2d_data.xhtml">resources::Texture2dData</a> openage::renderer::Renderer::display_into_data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stores the display framebuffer into a CPU-accessible data object. Essentially, this takes a screenshot. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#ad5d4ec5b1523d89a23170beea4bf6525">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="a2a55ee0bda543175600d17b62d24dbf1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a55ee0bda543175600d17b62d24dbf1">&#9670;&nbsp;</a></span>get_display_target()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classopenage_1_1renderer_1_1_render_target.xhtml">RenderTarget</a> const* openage::renderer::Renderer::get_display_target </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the built-in display target that represents the window. Passes pointed at this target will have their output visible on the screen. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#af731ce3a5d618782d7fcd6ffffd5a659">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<a id="aa6810194c364c0708a7af3407a8c3447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6810194c364c0708a7af3407a8c3447">&#9670;&nbsp;</a></span>render()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void openage::renderer::Renderer::render </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structopenage_1_1renderer_1_1_render_pass.xhtml">RenderPass</a> const &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Executes a render pass. </p>

<p>Implemented in <a class="el" href="classopenage_1_1renderer_1_1opengl_1_1_gl_renderer.xhtml#a40532b403c401c2626362e147095cfe5">openage::renderer::opengl::GlRenderer</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/renderer/<a class="el" href="renderer_8h_source.xhtml">renderer.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1renderer.xhtml">renderer</a></li><li class="navelem"><a class="el" href="classopenage_1_1renderer_1_1_renderer.xhtml">Renderer</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
