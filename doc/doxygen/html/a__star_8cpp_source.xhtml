<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/pathfinding/a_star.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('a__star_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">a_star.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a__star_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2014-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="a__star_8h.xhtml">a_star.h</a>&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;../datastructure/pairing_heap.h&quot;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;../log/log.h&quot;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;../terrain/terrain.h&quot;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;../terrain/terrain_object.h&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;../util/strings.h&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="pathfinding_2path_8h.xhtml">path.h</a>&quot;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="heuristics_8h.xhtml">heuristics.h</a>&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1path.xhtml">   27</a></span>&#160;<span class="keyword">namespace </span>path {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1path.xhtml#a4699fb2dbfd8178b2234b9fbb935179f">   30</a></span>&#160;<a class="code" href="classopenage_1_1path_1_1_path.xhtml">Path</a> <a class="code" href="namespaceopenage_1_1path.xhtml#a4699fb2dbfd8178b2234b9fbb935179f">to_point</a>(<a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start,</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;              <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> end,</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;              std::function&lt;<span class="keywordtype">bool</span>(<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; passable) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">auto</span> valid_end = [&amp;](<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;point) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#a64affc7c4a103a4ffabfd72c454962cf">euclidean_squared_cost</a>(point, end) &lt; <a class="code" href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">path_grid_size</a>.<a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">to_float</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    };</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">auto</span> heuristic = [&amp;](<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;point) -&gt; <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#a18aa96b43da6809c7796eaa4214a3420">euclidean_cost</a>(point, end);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(start, valid_end, heuristic, passable);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1path.xhtml#a047e97b9a81a866f064ad6d6f8dddfd6">   44</a></span>&#160;<a class="code" href="classopenage_1_1path_1_1_path.xhtml">Path</a> <a class="code" href="namespaceopenage_1_1path.xhtml#a047e97b9a81a866f064ad6d6f8dddfd6">to_object</a>(<a class="code" href="classopenage_1_1_terrain_object.xhtml">openage::TerrainObject</a> *to_move,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;               <a class="code" href="classopenage_1_1_terrain_object.xhtml">openage::TerrainObject</a> *end,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;               <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">coord::phys_t</a> rad) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start = to_move-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#adf9b18542dda79a323947f5d8707346b">pos</a>.<a class="code" href="structopenage_1_1tile__range.xhtml#a66f28f55fc7cb96a713d76b15d855a0e">draw</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">auto</span> valid_end = [&amp;](<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;pos) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> end-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">from_edge</a>(pos) &lt; rad;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    };</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">auto</span> heuristic = [&amp;](<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;pos) -&gt; <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> (end-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">from_edge</a>(pos) - to_move-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#a6b82e5577be0620a320954e13d0f5f08">min_axis</a>() / 2L).to_float();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(start, valid_end, heuristic, to_move-&gt;<a class="code" href="classopenage_1_1_terrain_object.xhtml#af86e4e2bf2ac48fc1b37cc436a50c5a1">passable</a>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1path.xhtml#a4382f59f9523f9dd89a6689336cc353a">   58</a></span>&#160;<a class="code" href="classopenage_1_1path_1_1_path.xhtml">Path</a> <a class="code" href="namespaceopenage_1_1path.xhtml#a4382f59f9523f9dd89a6689336cc353a">find_nearest</a>(<a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start,</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                  std::function&lt;<span class="keywordtype">bool</span>(<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; valid_end,</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                  std::function&lt;<span class="keywordtype">bool</span>(<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; passable) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// Use Dijkstra (hueristic = 0)</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">auto</span> zero = [](<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;) -&gt; <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> { <span class="keywordflow">return</span> .0f; };</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(start, valid_end, zero, passable);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">   66</a></span>&#160;<a class="code" href="classopenage_1_1path_1_1_path.xhtml">Path</a> <a class="code" href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">a_star</a>(<a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> start,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            std::function&lt;<span class="keywordtype">bool</span>(<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; valid_end,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            std::function&lt;<a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a>(<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; heuristic,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            std::function&lt;<span class="keywordtype">bool</span>(<span class="keyword">const</span> <a class="code" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a> &amp;)&gt; passable) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="comment">// path node storage, always provides cheapest next node.</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">heap_t</a> node_candidates;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// list of known tiles and corresponding node.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#a2889597504b5f2d6987d132f1e5682f6">nodemap_t</a> visited_tiles;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// add starting node</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> start_node = std::make_shared&lt;Node&gt;(start, <span class="keyword">nullptr</span>, .0f, heuristic(start));</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    visited_tiles[start_node-&gt;position] = start_node;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    node_candidates.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(start_node);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    start_node-&gt;heap_node = node_candidates.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(start_node);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// track the closest we can get to the end position</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="comment">// used when no path is found</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> closest_node = start_node;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="comment">// while there are candidates to visit</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">while</span> (not node_candidates.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">empty</a>()) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> best_candidate = node_candidates.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">pop</a>();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        best_candidate-&gt;was_best = <span class="keyword">true</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">// node to terminate the search was found</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">if</span> (valid_end(best_candidate-&gt;position)) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>) &lt;&lt;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                <span class="stringliteral">&quot;path cost is &quot;</span> &lt;&lt;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <a class="code" href="structopenage_1_1util_1_1_float_fixed.xhtml">util::FloatFixed&lt;3, 8&gt;</a>{closest_node-&gt;future_cost});</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="keywordflow">return</span> best_candidate-&gt;generate_backtrace();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        }</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="comment">// closest node for cases when target cannot be reached</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">if</span> (best_candidate-&gt;heuristic_cost &lt; closest_node-&gt;heuristic_cost) {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            closest_node = best_candidate;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// evaluate all neighbors of the current candidate for further progress</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> (<a class="code" href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">node_pt</a> neighbor : best_candidate-&gt;get_neighbors(visited_tiles)) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">if</span> (neighbor-&gt;was_best) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">if</span> (not <a class="code" href="namespaceopenage_1_1path.xhtml#a4fb2450790038eed534dfe29ad57d350">passable_line</a>(best_candidate, neighbor, passable)) {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordtype">bool</span> not_visited = (visited_tiles.count(neighbor-&gt;position) == 0);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <a class="code" href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">cost_t</a> new_past_cost = best_candidate-&gt;past_cost + best_candidate-&gt;cost_to(*neighbor);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">// if new cost is better than the previous path</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">if</span> (not_visited or new_past_cost &lt; neighbor-&gt;past_cost) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">if</span> (not_visited) {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="comment">// calculate heuristic only once per node</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                    neighbor-&gt;heuristic_cost = heuristic(neighbor-&gt;position);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordflow">if</span> (neighbor-&gt;heuristic_cost &gt; closest_node-&gt;heuristic_cost * 3) {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">continue</span>; <span class="comment">// dont search forever...</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="comment">// update new cost knowledge</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                neighbor-&gt;past_cost        = new_past_cost;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                neighbor-&gt;future_cost      = neighbor-&gt;past_cost + neighbor-&gt;heuristic_cost;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                neighbor-&gt;path_predecessor = best_candidate;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">if</span> (not_visited) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    neighbor-&gt;heap_node = node_candidates.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(neighbor);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    visited_tiles[neighbor-&gt;position] = neighbor;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    node_candidates.<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ab94d37206816a45bcfe49f8631cc82a9">decrease</a>(neighbor-&gt;heap_node);</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">dbg</a>) &lt;&lt;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="stringliteral">&quot;incomplete path cost is &quot;</span> &lt;&lt;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <a class="code" href="structopenage_1_1util_1_1_float_fixed.xhtml">util::FloatFixed&lt;3, 8&gt;</a>{closest_node-&gt;future_cost});</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> closest_node-&gt;generate_backtrace();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}} <span class="comment">// namespace openage::path</span></div><div class="ttc" id="classopenage_1_1_terrain_object_xhtml_a6ef3514689565c74e503570d0ba7adbb"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#a6ef3514689565c74e503570d0ba7adbb">openage::TerrainObject::from_edge</a></div><div class="ttdeci">virtual coord::phys_t from_edge(const coord::phys3 &amp;point) const =0</div><div class="ttdoc">how far is a point from the edge of this object</div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a4699fb2dbfd8178b2234b9fbb935179f"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a4699fb2dbfd8178b2234b9fbb935179f">openage::path::to_point</a></div><div class="ttdeci">Path to_point(coord::phys3 start, coord::phys3 end, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable)</div><div class="ttdoc">path between two static points</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00030">a_star.cpp:30</a></div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml_adf9b18542dda79a323947f5d8707346b"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#adf9b18542dda79a323947f5d8707346b">openage::TerrainObject::pos</a></div><div class="ttdeci">tile_range pos</div><div class="ttdoc">the range of tiles which are covered by this object</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00085">terrain_object.h:85</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml">openage::TerrainObject</a></div><div class="ttdoc">Base class for map location types which include square tile aligned positions and radial positions Th...</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00075">terrain_object.h:75</a></div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml_af86e4e2bf2ac48fc1b37cc436a50c5a1"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#af86e4e2bf2ac48fc1b37cc436a50c5a1">openage::TerrainObject::passable</a></div><div class="ttdeci">std::function&lt; bool(const coord::phys3 &amp;)&gt; passable</div><div class="ttdoc">decide which terrains this object can be on this function should be true if given a valid position fo...</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00119">terrain_object.h:119</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a7e49ca629b6fed008584d7752dc98e9a"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a7e49ca629b6fed008584d7752dc98e9a">openage::path::path_grid_size</a></div><div class="ttdeci">constexpr coord::phys_t path_grid_size</div><div class="ttdoc">Size of phys-coord grid for path nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00060">path.h:60</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_aad3d76b2466dbc4f81552935f2d84faa"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#aad3d76b2466dbc4f81552935f2d84faa">openage::log.dbg</a></div><div class="ttdeci">def dbg(msg, *args, **kwargs)</div><div class="ttdoc">debug message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00109">__init__.py:109</a></div></div>
<div class="ttc" id="classopenage_1_1_terrain_object_xhtml_a6b82e5577be0620a320954e13d0f5f08"><div class="ttname"><a href="classopenage_1_1_terrain_object.xhtml#a6b82e5577be0620a320954e13d0f5f08">openage::TerrainObject::min_axis</a></div><div class="ttdeci">virtual coord::phys_t min_axis() const =0</div><div class="ttdoc">the shortest line that can be placed across the objects center</div></div>
<div class="ttc" id="structopenage_1_1util_1_1_float_fixed_xhtml"><div class="ttname"><a href="structopenage_1_1util_1_1_float_fixed.xhtml">openage::util::FloatFixed</a></div><div class="ttdoc">Quick-formatter for floats when working with string streams.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8h_source.xhtml#l00028">strings.h:28</a></div></div>
<div class="ttc" id="heuristics_8h_xhtml"><div class="ttname"><a href="heuristics_8h.xhtml">heuristics.h</a></div></div>
<div class="ttc" id="pathfinding_2path_8h_xhtml"><div class="ttname"><a href="pathfinding_2path_8h.xhtml">path.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a047e97b9a81a866f064ad6d6f8dddfd6"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a047e97b9a81a866f064ad6d6f8dddfd6">openage::path::to_object</a></div><div class="ttdeci">Path to_object(openage::TerrainObject *to_move, openage::TerrainObject *end, coord::phys_t rad)</div><div class="ttdoc">path between 2 objects, with how close to come to end point</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00044">a_star.cpp:44</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a></div><div class="ttdoc">(Quite) efficient heap implementation.</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00037">pairing_heap.h:37</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a7a529d5ee64fa5002f6487d3821df5f6"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">openage::datastructure::PairingHeap::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00429">pairing_heap.h:429</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_ac6bcfcb890dd8d546b1b4c466cf09009"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">openage::datastructure::PairingHeap::pop</a></div><div class="ttdeci">T pop()</div><div class="ttdoc">returns and removes the smallest item on the heap.</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00236">pairing_heap.h:236</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a18aa96b43da6809c7796eaa4214a3420"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a18aa96b43da6809c7796eaa4214a3420">openage::path::euclidean_cost</a></div><div class="ttdeci">cost_t euclidean_cost(const coord::phys3 &amp;start, const coord::phys3 &amp;end)</div><div class="ttdoc">Euclidean distance cost estimation.</div><div class="ttdef"><b>Definition:</b> <a href="heuristics_8cpp_source.xhtml#l00024">heuristics.cpp:24</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_aeb0eaee59cf635000d9a737312cd4215"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#aeb0eaee59cf635000d9a737312cd4215">openage::path::cost_t</a></div><div class="ttdeci">float cost_t</div><div class="ttdoc">The data type for movement cost.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00030">path.h:30</a></div></div>
<div class="ttc" id="classopenage_1_1path_1_1_path_xhtml"><div class="ttname"><a href="classopenage_1_1path_1_1_path.xhtml">openage::path::Path</a></div><div class="ttdoc">Represents a planned trajectory.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00180">path.h:180</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a75e9e7602b59aeee47a2fd84a10c8f74"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">openage::datastructure::PairingHeap::push</a></div><div class="ttdeci">element_t push(const T &amp;item)</div><div class="ttdoc">adds the given item to the heap.</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00217">pairing_heap.h:217</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_adf2b15337cb3eec1712f18c17c75c325"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#adf2b15337cb3eec1712f18c17c75c325">openage::path::node_pt</a></div><div class="ttdeci">std::shared_ptr&lt; Node &gt; node_pt</div><div class="ttdoc">Type for storing navigation nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00035">path.h:35</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_acafe3c2e0b6cef7750a14663eab6c883"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#acafe3c2e0b6cef7750a14663eab6c883">openage::path::a_star</a></div><div class="ttdeci">Path a_star(coord::phys3 start, std::function&lt; bool(const coord::phys3 &amp;)&gt; valid_end, std::function&lt; cost_t(const coord::phys3 &amp;)&gt; heuristic, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable)</div><div class="ttdoc">finds a path between two endpoints</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00066">a_star.cpp:66</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a4382f59f9523f9dd89a6689336cc353a"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a4382f59f9523f9dd89a6689336cc353a">openage::path::find_nearest</a></div><div class="ttdeci">Path find_nearest(coord::phys3 start, std::function&lt; bool(const coord::phys3 &amp;)&gt; valid_end, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable)</div><div class="ttdoc">path to nearest object with lambda</div><div class="ttdef"><b>Definition:</b> <a href="a__star_8cpp_source.xhtml#l00058">a_star.cpp:58</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a4fb2450790038eed534dfe29ad57d350"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a4fb2450790038eed534dfe29ad57d350">openage::path::passable_line</a></div><div class="ttdeci">bool passable_line(node_pt start, node_pt end, std::function&lt; bool(const coord::phys3 &amp;)&gt; passable, float samples)</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8cpp_source.xhtml#l00100">path.cpp:100</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdoc">This file contains forward declarations for all the coordinate types, as well as their scalar types.</div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_ab94d37206816a45bcfe49f8631cc82a9"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ab94d37206816a45bcfe49f8631cc82a9">openage::datastructure::PairingHeap::decrease</a></div><div class="ttdeci">void decrease(const element_t &amp;node)</div><div class="ttdoc">You must call this after the node data decreased.</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00380">pairing_heap.h:380</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a64affc7c4a103a4ffabfd72c454962cf"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a64affc7c4a103a4ffabfd72c454962cf">openage::path::euclidean_squared_cost</a></div><div class="ttdeci">cost_t euclidean_squared_cost(const coord::phys3 &amp;start, const coord::phys3 &amp;end)</div><div class="ttdoc">Squared euclidean distance cost estimation.</div><div class="ttdef"><b>Definition:</b> <a href="heuristics_8cpp_source.xhtml#l00028">heuristics.cpp:28</a></div></div>
<div class="ttc" id="namespaceopenage_1_1path_xhtml_a2889597504b5f2d6987d132f1e5682f6"><div class="ttname"><a href="namespaceopenage_1_1path.xhtml#a2889597504b5f2d6987d132f1e5682f6">openage::path::nodemap_t</a></div><div class="ttdeci">std::unordered_map&lt; coord::phys3, node_pt &gt; nodemap_t</div><div class="ttdoc">Type for mapping tiles to nodes.</div><div class="ttdef"><b>Definition:</b> <a href="pathfinding_2path_8h_source.xhtml#l00040">path.h:40</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt; int64_t, phys_t_radix_pos &gt;</a></div></div>
<div class="ttc" id="a__star_8h_xhtml"><div class="ttname"><a href="a__star_8h.xhtml">a_star.h</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a07a0fa1c13f5aff3f184a2d82574e7e7"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a07a0fa1c13f5aff3f184a2d82574e7e7">openage::util::FixedPoint::to_float</a></div><div class="ttdeci">constexpr float to_float() const</div><div class="ttdoc">Converter to retrieve the number as float.</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00252">fixed_point.h:252</a></div></div>
<div class="ttc" id="structopenage_1_1tile__range_xhtml_a66f28f55fc7cb96a713d76b15d855a0e"><div class="ttname"><a href="structopenage_1_1tile__range.xhtml#a66f28f55fc7cb96a713d76b15d855a0e">openage::tile_range::draw</a></div><div class="ttdeci">coord::phys3 draw</div><div class="ttdef"><b>Definition:</b> <a href="terrain__object_8h_source.xhtml#l00038">terrain_object.h:38</a></div></div>
<div class="ttc" id="structopenage_1_1coord_1_1phys3_xhtml"><div class="ttname"><a href="structopenage_1_1coord_1_1phys3.xhtml">openage::coord::phys3</a></div><div class="ttdef"><b>Definition:</b> <a href="phys_8h_source.xhtml#l00056">phys.h:56</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_53fc77cdc2c4a643e9780698bc16c36c.xhtml">pathfinding</a></li><li class="navelem"><a class="el" href="a__star_8cpp.xhtml">a_star.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
