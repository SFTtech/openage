<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/event/demo/gui.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('event_2demo_2gui_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">gui.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event_2demo_2gui_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2016-2019 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_2demo_2gui_8h.xhtml">gui.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">// the gui requires ncurses.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#if WITH_NCURSES</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#ifdef __MINGW32__</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;ncurses/ncurses.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;ncurses.h&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#endif // __MINGW32__</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1event_1_1demo.xhtml">openage::event::demo</a> {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">const</span> std::vector&lt;PongEvent&gt; &amp;Gui::get_inputs(<span class="keyword">const</span> std::shared_ptr&lt;PongPlayer&gt; &amp;player) {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    this-&gt;input_cache.clear();</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    PongEvent evnt;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    evnt.player = player-&gt;id();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    evnt.state = <a class="code" href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa28b496791c9c4dec421dec318d576c68">PongEvent::IDLE</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    timeout(0);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    std::vector&lt;int&gt; inputs;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordtype">int</span> c;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">while</span> ((c = getch()) != <a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a>) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> (std::find(inputs.begin(), inputs.end(), c) == inputs.end()) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            inputs.push_back(c);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> input : inputs) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">switch</span> (input) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">case</span> KEY_DOWN:</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            evnt.state = <a class="code" href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa4d80ef707f224cf7055ac1c7fc5ea403">PongEvent::DOWN</a>;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            mvprintw(1, 40, <span class="stringliteral">&quot;DOWN&quot;</span>);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">case</span> KEY_UP:</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            evnt.state = <a class="code" href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaab9eff9ad1c50ede6bf15f9dc46da201a">PongEvent::UP</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            mvprintw(1, 40, <span class="stringliteral">&quot;UP&quot;</span>);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">case</span> 27:  <span class="comment">// esc or alt</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            erase();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            refresh();</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            endwin();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            exit(0);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39;r&#39;</span>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            evnt.state = <a class="code" href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa8b5086a6d55ac55b34228876b42a7a26">PongEvent::START</a>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            evnt.state = <a class="code" href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa28b496791c9c4dec421dec318d576c68">PongEvent::IDLE</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        this-&gt;input_cache.push_back(evnt);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">if</span> (this-&gt;input_cache.empty()) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// store &#39;idle&#39; input to cancel movement</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        this-&gt;input_cache.push_back(evnt);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> this-&gt;input_cache;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;}</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">enum</span> {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    COLOR_PLAYER1 = 1,</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    COLOR_PLAYER2 = 2,</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    COLOR_BALL    = 3,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    COLOR_DEBUG   = 4,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    COLOR_0 = 5,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    COLOR_1 = 6,</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    COLOR_2 = 7,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    COLOR_3 = 8,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    COLOR_4 = 9,</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;};</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;constexpr <span class="keyword">const</span> <span class="keywordtype">int</span> max_log_msgs = 10;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;Gui::Gui() {}</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#ab1596e1f3cfa6d6c8554e6a539731687">Gui::init</a>() {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    initscr();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    start_color();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    init_pair(COLOR_PLAYER1, COLOR_BLUE, COLOR_BLUE);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    init_pair(COLOR_PLAYER2, COLOR_RED, COLOR_RED);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    init_pair(COLOR_BALL, COLOR_BLUE, COLOR_WHITE);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    init_pair(COLOR_DEBUG, COLOR_WHITE, COLOR_BLACK);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    init_pair(COLOR_0, COLOR_RED, COLOR_BLACK);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    init_pair(COLOR_1, COLOR_GREEN, COLOR_BLACK);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    keypad(stdscr, <span class="keyword">true</span>);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    noecho();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    cbreak();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    curs_set(0);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    wnoutrefresh(curscr);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">int</span> x, y;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    getmaxyx(stdscr, y, x);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    attron(COLOR_PAIR(COLOR_DEBUG));</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::vector&lt;const char*&gt; buffer{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="stringliteral">&quot;oooooooooo                                   &quot;</span>,</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="stringliteral">&quot; 888    888  ooooooo    ooooooo    oooooooo8 &quot;</span>,</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="stringliteral">&quot; 888oooo88 888     888 888   888  888    88o &quot;</span>,</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="stringliteral">&quot; 888       888     888 888   888   888oo888o &quot;</span>,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="stringliteral">&quot;o888o        88ooo88  o888o o888o     88 888 &quot;</span>,</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="stringliteral">&quot;                                    888ooo888&quot;</span>,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    };</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">size_t</span> colwidth = 0;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;c : buffer) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        colwidth = <a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a>(colwidth, <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(c));</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordtype">int</span> row = (y - buffer.size()) / 2;;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">int</span> col = (x - colwidth) / 2;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;c : buffer) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        mvprintw(row++, col, c);</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    attroff(COLOR_PAIR(COLOR_DEBUG));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    refresh();</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="comment">// wait for a keypress to begin game</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    getch();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;}</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keywordtype">void</span> Gui::clear() {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    erase();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keywordtype">void</span> Gui::get_display_size(<span class="keyword">const</span> std::shared_ptr&lt;PongState&gt; &amp;state,</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                           <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;<span class="comment">/*now*/</span>) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="comment">// record the screen dimensions in the game state</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="comment">// \todo make the display_boundary a curve as well.</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    getmaxyx(stdscr, state-&gt;display_boundary[1], state-&gt;display_boundary[0]);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    state-&gt;display_boundary[1] -= 1;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordtype">void</span> Gui::draw(<span class="keyword">const</span> std::shared_ptr&lt;PongState&gt; &amp;state, <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;now) {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    attron(COLOR_PAIR(COLOR_DEBUG));</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="comment">// print the score</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    attron(COLOR_PAIR(COLOR_DEBUG));</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    mvprintw(2,</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;             state-&gt;display_boundary[0] / 2 - 5,</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;             <span class="stringliteral">&quot;P1 %i | P2 %i&quot;</span>,</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;             state-&gt;p1-&gt;lives-&gt;get(now),</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;             state-&gt;p2-&gt;lives-&gt;get(now));</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// draw the middle line</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    mvvline(0, state-&gt;display_boundary[0] / 2, ACS_VLINE, state-&gt;display_boundary[1]);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">// debug information</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    mvprintw(0, 1, <span class="stringliteral">&quot;NOW:  %f&quot;</span>, now.to_double());</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    mvprintw(1, 1, <span class="stringliteral">&quot;SCR:  %f | %f&quot;</span>, state-&gt;display_boundary[0], state-&gt;display_boundary[1]);</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    mvprintw(2, 1,</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;             <span class="stringliteral">&quot;P1:   %f, %f, %i&quot;</span>,</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;             state-&gt;p1-&gt;position-&gt;get(now),</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;             state-&gt;p1-&gt;paddle_x,</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;             state-&gt;p1-&gt;state-&gt;get(now).state);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    mvprintw(3, 1,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;             <span class="stringliteral">&quot;P2:   %f, %f, %i&quot;</span>,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;             state-&gt;p2-&gt;position-&gt;get(now),</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;             state-&gt;p2-&gt;paddle_x,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;             state-&gt;p2-&gt;state-&gt;get(now).state);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="comment">// ball position predictions, 10s into the future</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 10; i++) {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keyword">auto</span> i_as_ctt = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a703b41f0cb3fb93f1b5dcd20e6c968b4">curve::time_t::from_int</a>(i);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        mvprintw((5 + i), 1,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                 <span class="stringliteral">&quot;BALL in %03f: %f | %f; SPEED: %f | %f | PLpos: %f, PRpos: %f&quot;</span>,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                 i_as_ctt.to_double(),</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                 state-&gt;ball-&gt;position-&gt;get(now + i_as_ctt)[0],</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                 state-&gt;ball-&gt;position-&gt;get(now + i_as_ctt)[1],</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                 state-&gt;ball-&gt;speed-&gt;get(now + i_as_ctt)[0],</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                 state-&gt;ball-&gt;speed-&gt;get(now + i_as_ctt)[1],</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                 state-&gt;p1-&gt;position-&gt;get(now + i_as_ctt),</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                 state-&gt;p2-&gt;position-&gt;get(now + i_as_ctt)</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        );</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="comment">// show log</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">int</span> msg_i = 0;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp; msg : this-&gt;log_msgs) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        mvprintw((6 + msg_i), state-&gt;display_boundary[0]/2 + 10, msg.c_str());</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        msg_i += 1;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// exit hint message</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    mvprintw(state-&gt;display_boundary[1] - 1, 1, <span class="stringliteral">&quot;Press ESC to exit&quot;</span>);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    attroff(COLOR_PAIR(COLOR_DEBUG));</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">// draw player 1 paddle</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    attron(COLOR_PAIR(COLOR_PLAYER1));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = -state-&gt;p1-&gt;size-&gt;get(now) / 2; i &lt; state-&gt;p1-&gt;size-&gt;get(now) / 2; i++) {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        mvprintw(state-&gt;p1-&gt;position-&gt;get(now) + i, state-&gt;p1-&gt;paddle_x, <span class="stringliteral">&quot;|&quot;</span>);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    attroff(COLOR_PAIR(COLOR_PLAYER1));</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// draw player 2 paddle</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    attron(COLOR_PAIR(COLOR_PLAYER2));</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = -state-&gt;p2-&gt;size-&gt;get(now) / 2; i &lt; state-&gt;p2-&gt;size-&gt;get(now) / 2; i++) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        mvprintw(state-&gt;p2-&gt;position-&gt;get(now) + i, state-&gt;p2-&gt;paddle_x, <span class="stringliteral">&quot;|&quot;</span>);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    attroff(COLOR_PAIR(COLOR_PLAYER2));</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="comment">// ball position prediction 10s into the future</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    attron(COLOR_PAIR(COLOR_1));</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt; 100; ++i) {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keyword">auto</span> i_as_ctt = <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">curve::time_t::from_double</a>(i/10.0);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        draw_ball(state-&gt;ball-&gt;position-&gt;get(now + i_as_ctt), <span class="stringliteral">&quot;x&quot;</span>);</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="comment">// draw the ball</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    attron(COLOR_PAIR(COLOR_BALL));</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    this-&gt;draw_ball(state-&gt;ball-&gt;position-&gt;get(now), <span class="stringliteral">&quot;M&quot;</span>); <span class="comment">// \todo use &quot;⚽&quot;</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    attroff(COLOR_PAIR(COLOR_BALL));</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;}</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="keywordtype">void</span> Gui::update_screen() {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="comment">// actually show screen output</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    refresh();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;}</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keywordtype">void</span> Gui::draw_ball(<a class="code" href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">util::Vector2d</a> pos, <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>) {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    mvprintw((<span class="keywordtype">int</span>)(pos[1]), (<span class="keywordtype">int</span>)(pos[0]), <span class="stringliteral">&quot;%s&quot;</span>, <a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    standend();</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">Gui::log</a>(<span class="keyword">const</span> std::string &amp;msg) {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">if</span> (this-&gt;log_msgs.size() &gt;= max_log_msgs) {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        this-&gt;log_msgs.pop_back();</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    this-&gt;log_msgs.push_front(msg);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;} <span class="comment">// openage::event::demo</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a703b41f0cb3fb93f1b5dcd20e6c968b4"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a703b41f0cb3fb93f1b5dcd20e6c968b4">openage::util::FixedPoint&lt; int64_t, 16 &gt;::from_int</a></div><div class="ttdeci">static constexpr FixedPoint from_int(int64_t n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00178">fixed_point.h:178</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a483c36345c5b597c1626162bc96dc52c"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">openage::util::FixedPoint&lt; int64_t, 16 &gt;::from_double</a></div><div class="ttdeci">static constexpr FixedPoint from_double(double n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00192">fixed_point.h:192</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a5759baf587738b4365920f5b944b0088"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5759baf587738b4365920f5b944b0088">openage::util::Vector2d</a></div><div class="ttdeci">Vector&lt; 2, double &gt; Vector2d</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00225">vector.h:225</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_xhtml_af909cf1de79df6389fd9431b7424b48a"><div class="ttname"><a href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">openage::curve::time_t</a></div><div class="ttdeci">util::FixedPoint&lt; int64_t, 16 &gt; time_t</div><div class="ttdef"><b>Definition:</b> <a href="curve_8h_source.xhtml#l00016">curve.h:16</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1demo_1_1_pong_event_xhtml_a9da408d681295db9e3f6632c4b673dcaa4d80ef707f224cf7055ac1c7fc5ea403"><div class="ttname"><a href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa4d80ef707f224cf7055ac1c7fc5ea403">openage::event::demo::PongEvent::DOWN</a></div><div class="ttdef"><b>Definition:</b> <a href="gamestate_8h_source.xhtml#l00026">gamestate.h:26</a></div></div>
<div class="ttc" id="event_2demo_2gui_8h_xhtml"><div class="ttname"><a href="event_2demo_2gui_8h.xhtml">gui.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1tests_xhtml_ab1596e1f3cfa6d6c8554e6a539731687"><div class="ttname"><a href="namespaceopenage_1_1util_1_1tests.xhtml#ab1596e1f3cfa6d6c8554e6a539731687">openage::util::tests::init</a></div><div class="ttdeci">void init()</div><div class="ttdef"><b>Definition:</b> <a href="init_8cpp_source.xhtml#l00020">init.cpp:20</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1demo_1_1_pong_event_xhtml_a9da408d681295db9e3f6632c4b673dcaab9eff9ad1c50ede6bf15f9dc46da201a"><div class="ttname"><a href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaab9eff9ad1c50ede6bf15f9dc46da201a">openage::event::demo::PongEvent::UP</a></div><div class="ttdef"><b>Definition:</b> <a href="gamestate_8h_source.xhtml#l00026">gamestate.h:26</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1demo_1_1_pong_event_xhtml_a9da408d681295db9e3f6632c4b673dcaa28b496791c9c4dec421dec318d576c68"><div class="ttname"><a href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa28b496791c9c4dec421dec318d576c68">openage::event::demo::PongEvent::IDLE</a></div><div class="ttdef"><b>Definition:</b> <a href="gamestate_8h_source.xhtml#l00026">gamestate.h:26</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a4d2bbe46a5d10404c658b54f3b199551"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">openage::py::str</a></div><div class="ttdeci">Obj str(const std::string &amp;value)</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00331">pyobject.cpp:331</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a1c0bc145caf5f0b2af8d16d29d952180"><div class="ttname"><a href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; max(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00483">fixed_point.h:483</a></div></div>
<div class="ttc" id="namespaceopenage_1_1event_1_1demo_xhtml"><div class="ttname"><a href="namespaceopenage_1_1event_1_1demo.xhtml">openage::event::demo</a></div><div class="ttdef"><b>Definition:</b> <a href="aicontroller_8cpp_source.xhtml#l00005">aicontroller.cpp:5</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1demo_1_1_pong_event_xhtml_a9da408d681295db9e3f6632c4b673dcaa8b5086a6d55ac55b34228876b42a7a26"><div class="ttname"><a href="classopenage_1_1event_1_1demo_1_1_pong_event.xhtml#a9da408d681295db9e3f6632c4b673dcaa8b5086a6d55ac55b34228876b42a7a26">openage::event::demo::PongEvent::START</a></div><div class="ttdef"><b>Definition:</b> <a href="gamestate_8h_source.xhtml#l00026">gamestate.h:26</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_906fd80251564c07ab43a732fc1e9e78.xhtml">event</a></li><li class="navelem"><a class="el" href="dir_6197a954b4bd6d8383a8df145c55be91.xhtml">demo</a></li><li class="navelem"><a class="el" href="event_2demo_2gui_8cpp.xhtml">gui.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
