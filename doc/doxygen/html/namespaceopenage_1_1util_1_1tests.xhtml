<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::util::tests Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1util_1_1tests.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">openage::util::tests Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1tests_1_1testenum.xhtml">testenum</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">pxd:  <a href="structopenage_1_1util_1_1tests_1_1testenum.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structopenage_1_1util_1_1tests_1_1testenum__value.xhtml">testenum_value</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">pxd:  <a href="structopenage_1_1util_1_1tests_1_1testenum__value.xhtml#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a3359212608be8fda4cff896436a66165"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a3359212608be8fda4cff896436a66165">constinit_vector</a> ()</td></tr>
<tr class="separator:a3359212608be8fda4cff896436a66165"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8204af61a6e9e5a470475054b1536357"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a8204af61a6e9e5a470475054b1536357">enum_</a> ()</td></tr>
<tr class="separator:a8204af61a6e9e5a470475054b1536357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66cf54ea365e3f8f1357577ddaa1adfb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a66cf54ea365e3f8f1357577ddaa1adfb">fixed_point</a> ()</td></tr>
<tr class="separator:a66cf54ea365e3f8f1357577ddaa1adfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec3c7190e428e8fd67bce6f0dd4d582f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a> ()</td></tr>
<tr class="separator:aec3c7190e428e8fd67bce6f0dd4d582f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1596e1f3cfa6d6c8554e6a539731687"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#ab1596e1f3cfa6d6c8554e6a539731687">init</a> ()</td></tr>
<tr class="separator:ab1596e1f3cfa6d6c8554e6a539731687"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50e35d7087beb2351f2d2f591ba8c4b9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a50e35d7087beb2351f2d2f591ba8c4b9">matrix</a> ()</td></tr>
<tr class="separator:a50e35d7087beb2351f2d2f591ba8c4b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48fcf768166ffb9362daf1fdf19acf45"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a48fcf768166ffb9362daf1fdf19acf45">array_conversion</a> ()</td></tr>
<tr class="separator:a48fcf768166ffb9362daf1fdf19acf45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3f1d081c603b383598beeee8e4429df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#ab3f1d081c603b383598beeee8e4429df">quaternion</a> ()</td></tr>
<tr class="separator:ab3f1d081c603b383598beeee8e4429df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7deb96e08e8e82e52d83fb34f6db25da"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a7deb96e08e8e82e52d83fb34f6db25da">vector</a> ()</td></tr>
<tr class="separator:a7deb96e08e8e82e52d83fb34f6db25da"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a6f54051ead3baf22b21d6142f78cbbc3"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="structopenage_1_1util_1_1tests_1_1testenum__value.xhtml">testenum_value</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#a6f54051ead3baf22b21d6142f78cbbc3">undefined</a> {{&quot;UNDEFINED&quot;, 0}, &quot;undefined test string&quot;}</td></tr>
<tr class="separator:a6f54051ead3baf22b21d6142f78cbbc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8dbdc64850f25163145820ba7b5844f"><td class="memItemLeft" align="right" valign="top">static const std::array&lt; uint8_t, 16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml#aa8dbdc64850f25163145820ba7b5844f">test_key</a></td></tr>
<tr class="separator:aa8dbdc64850f25163145820ba7b5844f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="a48fcf768166ffb9362daf1fdf19acf45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48fcf768166ffb9362daf1fdf19acf45">&#9670;&nbsp;</a></span>array_conversion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::array_conversion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="misc__test_8cpp_source.xhtml#l00013">13</a> of file <a class="el" href="misc__test_8cpp_source.xhtml">misc_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;                        {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint8_t&gt; test_array8_big{</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;            0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        };</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint8_t&gt; test_array8_little{</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;            0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        };</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> uint64_t test_uint64{0x0123456789abcdef};</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="comment">// Big-endian conversions</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(test_array8_big.data(), 8, <span class="keyword">true</span>) == test_uint64 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a>(test_uint64, <span class="keyword">true</span>) == test_array8_big or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="comment">// Little-endian conversions</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(test_array8_little.data(), 8, <span class="keyword">false</span>) == test_uint64 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a>(test_uint64, <span class="keyword">false</span>) == test_array8_little or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint8_t&gt; test_array8_big{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        };</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint8_t&gt; test_array8_little{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint64_t&gt; test_array64{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            0x0123456789abcdef, 0xf0f1f2f3f4f5f6f7</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        };</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="comment">// Big-endian conversions</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a>(test_array8_big.data(), 16, <span class="keyword">true</span>) == test_array64 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a>(test_array64.data(), 2, <span class="keyword">true</span>) == test_array8_big or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="comment">// Little-endian conversions</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a>(test_array8_little.data(), 16, <span class="keyword">false</span>) == test_array64 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a>(test_array64.data(), 2, <span class="keyword">false</span>) == test_array8_little or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="comment">// Now I&#39;m converting 14 instead of 16 bytes, when using array8_to_array64 the</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="comment">// remaining bytes should be filled with zeroes.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint8_t&gt; test_array8_big{</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0x00, 0x00</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        };</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint64_t&gt; test_array64_big{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            0x0123456789abcdef, 0xf0f1f2f3f4f50000</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        };</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint8_t&gt; test_array8_little{</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0x00, 0x00</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        };</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keyword">static</span> <span class="keyword">const</span> std::vector&lt;uint64_t&gt; test_array64_little{</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            0xefcdab8967452301, 0x0000f2f3f4f5f6f7</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        };</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="comment">// Big-endian conversions</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a>(test_array8_big.data(), 14, <span class="keyword">true</span>) == test_array64_big or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a>(test_array64_big.data(), 2, <span class="keyword">true</span>) == test_array8_big or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="comment">// Little-endian conversions</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">array8_to_array64</a>(test_array8_little.data(), 14, <span class="keyword">false</span>) == test_array64_little or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">array64_to_array8</a>(test_array64_little.data(), 2, <span class="keyword">false</span>) == test_array8_little or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdoc">Convenience macro, for usage in test functions:</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ae9d6c19aadc0f6a1d502f42852172de0"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">openage::util::uint64_to_array8</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; uint64_to_array8(const uint64_t value, bool big_endian=false)</div><div class="ttdoc">Convert a uint64_t to an array of uint8_t.</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00145">misc.h:145</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aa30219231e1ac7a89ef5d1fb44894e9e"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aa30219231e1ac7a89ef5d1fb44894e9e">openage::util::array8_to_array64</a></div><div class="ttdeci">std::vector&lt; uint64_t &gt; array8_to_array64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdoc">Convert a C-style array of uint8_t to a std::vector of uint64_t.</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00190">misc.h:190</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a69b6ecf2b5119f11c33d2b5b89cec86c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">openage::util::array8_to_uint64</a></div><div class="ttdeci">uint64_t array8_to_uint64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdoc">Convert a C-style array of uint8_t to a uint64_t.</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00111">misc.h:111</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_af9f52b617e7434a421cd5f9de448b600"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#af9f52b617e7434a421cd5f9de448b600">openage::util::array64_to_array8</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; array64_to_array8(const uint64_t *start, size_t count, bool big_endian=false)</div><div class="ttdoc">Convert a C-style array of uint64_t to a std::vector of uint8_t.</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00222">misc.h:222</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="misc_8h_source.xhtml#l00222">openage::util::array64_to_array8()</a>, <a class="el" href="misc_8h_source.xhtml#l00190">openage::util::array8_to_array64()</a>, <a class="el" href="misc_8h_source.xhtml#l00111">openage::util::array8_to_uint64()</a>, <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>, and <a class="el" href="misc_8h_source.xhtml#l00145">openage::util::uint64_to_array8()</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_a48fcf768166ffb9362daf1fdf19acf45_cgraph.svg" width="100%" height="565"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a3359212608be8fda4cff896436a66165"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3359212608be8fda4cff896436a66165">&#9670;&nbsp;</a></span>constinit_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::constinit_vector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="constinit__vector_8cpp_source.xhtml#l00055">55</a> of file <a class="el" href="constinit__vector_8cpp_source.xhtml">constinit_vector.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                        {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    ConstInitVector&lt;S&gt; sv;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1337; i++) {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        sv.push_back(S{i});</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    sv.size() == 1337 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    sv[235].val == 235 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">int</span> refctr = 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    { <span class="comment">// scope to test whether tv gets correctly de-inited.</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    ConstInitVector&lt;T&gt; tv;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 1337; i++) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        tv.push_back(T(&amp;refctr));</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    refctr == 1337 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    sv.size() == 1337 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    refctr == 0 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdoc">Convenience macro, for usage in test functions:</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="constinit__vector_8h_source.xhtml#l00050">openage::util::ConstInitVector&lt; T &gt;::push_back()</a>, <a class="el" href="constinit__vector_8h_source.xhtml#l00089">openage::util::ConstInitVector&lt; T &gt;::size()</a>, and <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>.</p>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_a3359212608be8fda4cff896436a66165_cgraph.svg" width="347" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a8204af61a6e9e5a470475054b1536357"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8204af61a6e9e5a470475054b1536357">&#9670;&nbsp;</a></span>enum_()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::enum_ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="enum__test_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="enum__test_8cpp_source.xhtml">enum_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;             {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    testenum tv0 = testenum::foo;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    tv0 == testenum::foo or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    tv0 != testenum::bar or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    testenum tv1 = testenum::bar;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    tv0 == tv1 and <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    tv1 = testenum::foo;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    tv0 == tv1 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    tv0 != tv1 and <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(tv0-&gt;get_stuff(), std::string(<span class="stringliteral">&quot;foooooooooooooooooo&quot;</span>));</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(tv0-&gt;stuff, std::string(<span class="stringliteral">&quot;foooooooooooooooooo&quot;</span>));</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="comment">// &quot;default value&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    testenum tv2;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(tv2-&gt;stuff, std::string(<span class="stringliteral">&quot;undefined test string&quot;</span>));</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    tv2 != tv0 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    tv2 != tv1 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    tv2 == tv2 or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    FString fstr;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    fstr &lt;&lt; tv0;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(fstr.buffer, <span class="stringliteral">&quot;openage::util::tests::testenum_value::foo&quot;</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    fstr.reset();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    fstr &lt;&lt; tv2;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(fstr.buffer, <span class="stringliteral">&quot;openage::util::tests::testenum_value::UNDEFINED&quot;</span>);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdoc">Convenience macro, for usage in test functions:</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="enum__test_8h_source.xhtml#l00048">openage::util::tests::testenum::bar</a>, <a class="el" href="stringformatter_8h_source.xhtml#l00318">openage::util::FString::buffer</a>, <a class="el" href="enum__test_8h_source.xhtml#l00047">openage::util::tests::testenum::foo</a>, <a class="el" href="stringformatter_8h_source.xhtml#l00312">openage::util::FString::reset()</a>, <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>, and <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_a8204af61a6e9e5a470475054b1536357_cgraph.svg" width="582" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a66cf54ea365e3f8f1357577ddaa1adfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66cf54ea365e3f8f1357577ddaa1adfb">&#9670;&nbsp;</a></span>fixed_point()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::fixed_point </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="fixed__point__test_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="fixed__point__test_8cpp_source.xhtml">fixed_point_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                   {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="comment">// test construction and assignments</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    FixedPoint&lt;int8_t, 4&gt; a(4.3);</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.to_int(), 4);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.to_float(), 4.25);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.to_double(), 4.25);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.get_raw_value(), 68);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.get_fractional_part().to_float(), 0.25);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    FixedPoint&lt;int8_t, 4&gt; b(a);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(b.get_raw_value(), 68);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">auto</span> c = FixedPoint&lt;uint16_t, 8&gt;::from_fixedpoint&lt;int8_t, 4&gt;(a);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.get_raw_value(), 1088);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.to_int(), 4);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(c.to_double(), 4.25);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    a = FixedPoint&lt;int8_t, 4&gt;::from_int(1);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.get_raw_value(), 16);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    a = FixedPoint&lt;int8_t, 4&gt;::from_float(1.3);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.get_raw_value(), 20);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    a = FixedPoint&lt;int8_t, 4&gt;::from_double(1.4);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(a.get_raw_value(), 22);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keyword">auto</span> d = FixedPoint&lt;uint64_t, 48&gt;::from_double(2016);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="comment">// this raw value was calculated in python: 2016 * 2**48</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(d.get_raw_value(), 567453553048682496UL);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// test arithmetics</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">using</span> TestType = FixedPoint&lt;int64_t, 32&gt;;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    TestType e(120.7);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    TestType f(-12.4);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    e += f;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(e.to_double(), 108.3, 1e-7);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((-e).to_double(), -108.3, 1e-7);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((+e).to_double(), 108.3, 1e-7);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((e - f).to_double(), 120.7, 1e-7);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((e + f).to_double(), 95.9, 1e-7);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((e * 1.02).to_double(), 108.3 * 1.02, 1e-7);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((e * 10).to_double(), 108.3 * 10, 1e-7);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>((e / 10).to_double(), 108.3 / 10, 1e-7);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(<a class="code" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a>(e), <a class="code" href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">sqrt</a>(108.3), 1e-7);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(<a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>(-e).to_double(), 108.3, 1e-7);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(<a class="code" href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">std::hypot</a>(e, f), <a class="code" href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">hypot</a>(108.3, -12.4), 1e-7);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(<a class="code" href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a>(e, f), -12.4, 1e-7);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(<a class="code" href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a>(e, f), 108.3, 1e-7);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(TestType::min_value().to_double(), -2147483648.0, 1e-7);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(TestType::max_value().to_double(), 2147483648.0, 1e-7);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    e -= f;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(e.to_double(), 120.7, 1e-7);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e == f, <span class="keyword">false</span>);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e != f, <span class="keyword">true</span>);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e == e, <span class="keyword">true</span>);</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &lt;= e, <span class="keyword">true</span>);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &gt;= e, <span class="keyword">true</span>);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &gt;= f, <span class="keyword">true</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &lt;= f, <span class="keyword">false</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &lt; e, <span class="keyword">false</span>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &gt; e, <span class="keyword">false</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &lt; f, <span class="keyword">false</span>);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e &gt; f, <span class="keyword">true</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// test the string I/O functions</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    FString s;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    s &lt;&lt; a;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(std::string(s), <span class="stringliteral">&quot;1.38&quot;</span>);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    s.reset();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    s &lt;&lt; c;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(std::string(s), <span class="stringliteral">&quot;4.250&quot;</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    s.reset();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    s &lt;&lt; d;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(std::string(s), <span class="stringliteral">&quot;2016.000000000000000&quot;</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    std::stringstream sstr(<span class="stringliteral">&quot;1234.5678&quot;</span>);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    sstr &gt;&gt; e;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(e.to_double(), 1234.5678, 1e-7);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div><div class="ttc" id="namespacestd_xhtml_a34591a1d8ee5da3f16f56554590d5e16"><div class="ttname"><a href="namespacestd.xhtml#a34591a1d8ee5da3f16f56554590d5e16">std::min</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; min(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00475">fixed_point.h:475</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a6af851cc1249a970adde4dc422ff824a"><div class="ttname"><a href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; abs(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00491">fixed_point.h:491</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a8058d6b15a78f7a977945ee4d62de903"><div class="ttname"><a href="namespacestd.xhtml#a8058d6b15a78f7a977945ee4d62de903">std::hypot</a></div><div class="ttdeci">constexpr double hypot(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00498">fixed_point.h:498</a></div></div>
<div class="ttc" id="testing_8h_xhtml_ae531a534fa7f4028ddf113ae72caa6aa"><div class="ttname"><a href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a></div><div class="ttdeci">#define TESTEQUALS_FLOAT(left, right, epsilon)</div><div class="ttdoc">Asserts that the left expression equals the right expression, within a margin of error epsilon,...</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00068">testing.h:68</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a1c0bc145caf5f0b2af8d16d29d952180"><div class="ttname"><a href="namespacestd.xhtml#a1c0bc145caf5f0b2af8d16d29d952180">std::max</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; max(openage::util::FixedPoint&lt; I, F &gt; x, openage::util::FixedPoint&lt; I, F &gt; y)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00483">fixed_point.h:483</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a0fc492a11cf74e80f976b24bea2a2eb2"><div class="ttname"><a href="namespacestd.xhtml#a0fc492a11cf74e80f976b24bea2a2eb2">std::sqrt</a></div><div class="ttdeci">constexpr double sqrt(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00470">fixed_point.h:470</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="fixed__point_8h_source.xhtml#l00491">std::abs()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00192">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_double()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00185">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_float()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00178">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::from_int()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00286">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::get_fractional_part()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00234">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::get_raw_value()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00498">std::hypot()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00483">std::max()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00475">std::min()</a>, <a class="el" href="stringformatter_8h_source.xhtml#l00312">openage::util::FString::reset()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00470">std::sqrt()</a>, <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>, <a class="el" href="testing_8h_source.xhtml#l00068">TESTEQUALS_FLOAT</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00263">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::to_double()</a>, <a class="el" href="fixed__point_8h_source.xhtml#l00252">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::to_float()</a>, and <a class="el" href="fixed__point_8h_source.xhtml#l00241">openage::util::FixedPoint&lt; int_type, fractional_bits &gt;::to_int()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_a66cf54ea365e3f8f1357577ddaa1adfb_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="ab1596e1f3cfa6d6c8554e6a539731687"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1596e1f3cfa6d6c8554e6a539731687">&#9670;&nbsp;</a></span>init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::init </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="init_8cpp_source.xhtml#l00020">20</a> of file <a class="el" href="init_8cpp_source.xhtml">init.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;            {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(testval, 5);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordtype">int</span> i = 6;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(i, 6);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        OnInit init_i([&amp;]() {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            i = 7;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        });</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        OnDeInit deinit_i([&amp;]() {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            i = 8;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        });</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(i, 7);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(i, 8);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="event_2demo_2main_8cpp_source.xhtml#l00042">openage::event::demo::curvepong()</a>, and <a class="el" href="options_8h_source.xhtml#l00269">openage::options::Var&lt; bool &gt;::Var()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_ab1596e1f3cfa6d6c8554e6a539731687_icgraph.svg" width="342" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a50e35d7087beb2351f2d2f591ba8c4b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50e35d7087beb2351f2d2f591ba8c4b9">&#9670;&nbsp;</a></span>matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::matrix </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="matrix__test_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="matrix__test_8cpp_source.xhtml">matrix_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;              {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    { <span class="comment">// matrix multiplication</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        <span class="keyword">const</span> Matrix&lt;5, 3, float&gt; a(0.0, 0.5, 1.0,</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                                    1.5, 2.0, 2.5,</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                                    3.0, 3.5, 4.0,</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;                                    4.5, 5.0, 5.5,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                    6.0, 6.5, 7.0);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keyword">const</span> Matrix&lt;3, 4, float&gt; b(1, 0, 0, 0,</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;                                    0, 1, 0, 0,</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;                                    0, 0, 1, 0);</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        Matrix&lt;5, 4, float&gt; c = a * b;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][0], 0, 1e-7);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][1], 0.5, 1e-7);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][2], 1, 1e-7);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][3], 0, 1e-7);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][0], 1.5, 1e-7);</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][1], 2, 1e-7);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][2], 2.5, 1e-7);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][3], 0, 1e-7);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[2][0], 3, 1e-7);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[2][1], 3.5, 1e-7);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[2][2], 4, 1e-7);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[2][3], 0, 1e-7);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[3][0], 4.5, 1e-7);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[3][1], 5, 1e-7);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[3][2], 5.5, 1e-7);</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[3][3], 0, 1e-7);</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[4][0], 6, 1e-7);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[4][1], 6.5, 1e-7);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[4][2], 7, 1e-7);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[4][3], 0, 1e-7);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    { <span class="comment">// addition and subtraction</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> a(1, 2, 3, 4);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> b(5, 6, 7, 8);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> c = a + b;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][0], 6, 1e-7);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][1], 8, 1e-7);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][0], 10, 1e-7);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][1], 12, 1e-7);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        c = b - a;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][0], 4, 1e-7);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[0][1], 4, 1e-7);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][0], 4, 1e-7);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c[1][1], 4, 1e-7);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    { <span class="comment">// scalar multiplication and division</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> a(0, 1, 2, 3);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> b = a * 2;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][0], 0, 1e-7);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][1], 2, 1e-7);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][0], 4, 1e-7);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][1], 6, 1e-7);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        b = 2 * a;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][0], 0, 1e-7);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][1], 2, 1e-7);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][0], 4, 1e-7);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][1], 6, 1e-7);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        b = a / 0.5;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][0], 0, 1e-7);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][1], 2, 1e-7);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][0], 4, 1e-7);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][1], 6, 1e-7);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    { <span class="comment">// transposition</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> a(1, 2, 3, 4);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">Matrix2f</a> b = a.transpose();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][0], 1, 1e-7);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[0][1], 3, 1e-7);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][0], 2, 1e-7);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(b[1][1], 4, 1e-7);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    { <span class="comment">// vector interaction</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">Matrix3f</a> a(2, 0, 0,</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                         0, 2, 0,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                         0, 0, 2);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a> v(1, 2, 3);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keyword">auto</span> u = (a * v).to_vector();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(u[0], 2, 1e-7);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(u[1], 4, 1e-7);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(u[2], 6, 1e-7);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_aaa417153128f83c6b7ee0b42efc418aa"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">openage::util::Matrix3f</a></div><div class="ttdeci">Matrix&lt; 3, 3, float &gt; Matrix3f</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00288">matrix.h:288</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a00694c43ac6582c643b2591d420ce472"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">openage::util::Matrix2f</a></div><div class="ttdeci">Matrix&lt; 2, 2, float &gt; Matrix2f</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00287">matrix.h:287</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ab7bb49fe673b7a4d72fb6fb91aba44c8"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">openage::util::Vector3f</a></div><div class="ttdeci">Vector&lt; 3, float &gt; Vector3f</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00222">vector.h:222</a></div></div>
<div class="ttc" id="testing_8h_xhtml_ae531a534fa7f4028ddf113ae72caa6aa"><div class="ttname"><a href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a></div><div class="ttdeci">#define TESTEQUALS_FLOAT(left, right, epsilon)</div><div class="ttdoc">Asserts that the left expression equals the right expression, within a margin of error epsilon,...</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00068">testing.h:68</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="testing_8h_source.xhtml#l00068">TESTEQUALS_FLOAT</a>, and <a class="el" href="matrix_8h_source.xhtml#l00193">openage::util::Matrix&lt; M, N, T &gt;::transpose()</a>.</p>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_a50e35d7087beb2351f2d2f591ba8c4b9_cgraph.svg" width="332" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab3f1d081c603b383598beeee8e4429df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3f1d081c603b383598beeee8e4429df">&#9670;&nbsp;</a></span>quaternion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::quaternion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="quaternion__test_8cpp_source.xhtml#l00016">16</a> of file <a class="el" href="quaternion__test_8cpp_source.xhtml">quaternion_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;                  {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;        <span class="comment">// Quaternion construction tests</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> <span class="keywordtype">id</span>{};</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> id_explicit{1.0, 0.0, 0.0, 0.0};</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordtype">id</span>.equals(id_explicit) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="keywordtype">id</span>.equals_deg(id_explicit, 1e-5f) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> wrong{0.0, 0.0, 1.0, 0.0};</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        not <span class="keywordtype">id</span>.equals(wrong) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">Matrix3f</a> id_mat3 = Matrix3f::identity();</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q_id_mat3{id_mat3};</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordtype">id</span>.equals(q_id_mat3) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">Matrix4f</a> id_mat4 = Matrix4f::identity();</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q_id_mat4{id_mat4};</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordtype">id</span>.equals(q_id_mat4) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">Matrix4f</a> neg_mat4{</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            -1, 0, 0, 0,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            0, 1, 0, 0,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            0, 0, -1, 0,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            0, 0, 0, 1,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        };</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q_neg{neg_mat4};</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q_nex_exp{0, 0, 1, 0};</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        q_neg.equals(q_nex_exp) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    }</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// member functions</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q0{1, 2, 3, 4};</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q1{5, 6, 7, 8};</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(q0.dot(q1), 5 + 12 + 21 + 32, 1e-5f);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(q0.norm(), 5.4772255 <span class="comment">/*= sqrt(30) */</span>, 1e-4f);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q2{2, 8, 4, 16};</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q2_normd = q2.normalized();</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        q2_normd.equals(q2) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q2conj_exp{2, -8, -4, -16};</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        q2conj_exp.equals(q2.conjugated()) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q2inv_exp{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            0.0058823529411764705f,</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            -0.023529411764705882f,</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            -0.011764705882352941f,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            -0.047058823529411764f</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        };</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q2inv = q2.inversed();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        q2inv.normalized().equals(q2inv_exp.normalized()) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        q2.normalize();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q2norm_exp{</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            0.10846522f, 0.433860915f, 0.216930457f, 0.8677218312f</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        };</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        q2norm_exp.equals(q2) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// Operator tests.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> <span class="keywordtype">id</span>{};</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla0{13, 37, 42, 235};</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        bla0.equals(<span class="keywordtype">id</span> * bla0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla1{8, 16, 24, 32};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla0_1_exp{21, 45, 50, 243};</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        bla0_1_exp.equals(bla0 + bla1) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla1_2_exp{2, 8, 12, 16};</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        bla1_2_exp.equals(bla1 / 4) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla1_3_exp{16, 64, 96, 128};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        bla1_3_exp.equals(bla1 * 8) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla1_4_exp{21, 53, 66, 267};</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        bla1_4_exp.equals(bla0 + bla1) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla1_5_exp{5, 21, 18, 203};</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        bla1_5_exp.equals(bla0 - bla1) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla2_exp{</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            13 * 21 - 37 * 45 - 42 * 50 - 235 * 243,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            13 * 45 + 37 * 21 + 42 * 243 - 235 * 50,</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            13 * 50 - 37 * 243 + 42 * 21 + 235 * 45,</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            13 * 243 + 37 * 50 - 42 * 45 + 235 * 21</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        };</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        bla2_exp.equals(bla0 * bla0_1_exp) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        (bla2_exp == bla2_exp) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        (bla2_exp != bla0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> bla0_neg_exp{-13, -37, -42, -235};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        bla0_neg_exp.equals(-bla0) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keyword">enum class</span> axis {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            x, y, z</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        };</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="comment">// Rotation tests</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">auto</span> rot_mat = [&amp;](axis a, <span class="keywordtype">float</span> am, <span class="keywordtype">bool</span> deg=<span class="keyword">true</span>) -&gt; <a class="code" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">Matrix3f</a> {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">if</span> (deg) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                am = (am * <a class="code" href="namespaceopenage_1_1math.xhtml#a2fa23a3c6b5e149587e859cb261ef4cd">math::PI</a>) / 180.0;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">switch</span> (a) {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">case</span> axis::x:</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">return</span> {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    1, 0, 0,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    0, std::cos(am), -std::sin(am),</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                    0, std::sin(am), std::cos(am)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                };</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">case</span> axis::y:</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">return</span> {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    std::cos(am), 0, std::sin(am),</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    0, 1, 0,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    -std::sin(am), 0, std::cos(am)</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                };</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">case</span> axis::z:</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="keywordflow">return</span> {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                    std::cos(am), -std::sin(am), 0,</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                    std::sin(am), std::cos(am), 0,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    0, 0, 1,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                };</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;wtf unreachable code reached&quot;</span>};</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        };</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// zero rotation = identity.</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">Matrix3f</a> rot = rot_mat(axis::x, 0, <span class="keyword">false</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        rot.equals(Matrix3f::identity()) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q_rot{rot};</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a> q_rot_deg = Quaternionf::from_rad(0, {1, 0, 0});</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="comment">// 10 rad rotation</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        rot = rot_mat(axis::x, 10, <span class="keyword">false</span>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        q_rot_deg = Quaternionf::from_rad(10, {1, 0, 0});</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        q_rot.equals_rad(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment">// wrong 90-rad-rotation:</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        q_rot_deg = Quaternionf::from_rad(90, {1, 0, 0});</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        not q_rot.equals_rad(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">// 10 deg rotation</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        rot = rot_mat(axis::x, 10);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        q_rot_deg = Quaternionf::from_deg(10, {1, 0, 0});</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment">// 90 deg rotation</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        rot = rot_mat(axis::x, 90);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        q_rot_deg = Quaternionf::from_deg(90, {1, 0, 0});</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        rot = rot_mat(axis::y, 90);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        q_rot_deg = Quaternionf::from_deg(90, {0, 1, 0});</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        rot = rot_mat(axis::z, 90);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        q_rot_deg = Quaternionf::from_deg(90, {0, 0, 1});</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">// -90 deg rotation</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        rot = rot_mat(axis::y, -90);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        q_rot_deg = Quaternionf::from_deg(-90, {0, 1, 0});</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="comment">// 45 deg rotation</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        rot = rot_mat(axis::z, 45);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        q_rot_deg = Quaternionf::from_deg(45, {0, 0, 1});</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="comment">// rotation combination</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        rot = rot_mat(axis::z, 45) * rot_mat(axis::y, 60);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        q_rot_deg = (Quaternionf::from_deg(45, {0, 0, 1}) *</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                     Quaternionf::from_deg(60, {0, 1, 0}));</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        rot = rot_mat(axis::z, 45) *</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;              rot_mat(axis::y, 60) *</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;              rot_mat(axis::x, -200);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        q_rot = <a class="code" href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">Quaternionf</a>{rot};</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        q_rot_deg = (Quaternionf::from_deg(45, {0, 0, 1}) *</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                     Quaternionf::from_deg(60, {0, 1, 0}) *</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                     Quaternionf::from_deg(-200, {1, 0, 0}));</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        q_rot.equals_deg(q_rot_deg) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="comment">// to_matrix tests</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        rot = rot_mat(axis::x, 235);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        q_rot = Quaternionf::from_deg(235, {1, 0, 0});</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        rot.equals(q_rot.to_matrix()) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        rot = rot_mat(axis::y, -55);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        q_rot = Quaternionf::from_deg(-55, {0, 1, 0});</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        rot.equals(q_rot.to_matrix()) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        rot = rot_mat(axis::z, 64);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        q_rot = Quaternionf::from_deg(64, {0, 0, 1});</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        rot.equals(q_rot.to_matrix()) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a> vec{5, 0, 0};</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a> turned = Quaternionf::from_deg(180, {0, 0, 1}) * vec;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a> turned_exp{-5, 0, 0};</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        turned.equals(turned_exp) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="comment">// intentional fail:</span></div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        turned_exp = <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a>{-42, -42, -42};</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        not turned.equals(turned_exp) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">// another turn</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        vec = <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a>{1337, 42, 235};</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        turned = Quaternionf::from_deg(90, {1, 0, 0}) * vec;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        turned_exp = <a class="code" href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">Vector3f</a>{1337, -235, 42};</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        turned.equals(turned_exp) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdoc">Convenience macro, for usage in test functions:</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aaa417153128f83c6b7ee0b42efc418aa"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">openage::util::Matrix3f</a></div><div class="ttdeci">Matrix&lt; 3, 3, float &gt; Matrix3f</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00288">matrix.h:288</a></div></div>
<div class="ttc" id="namespaceopenage_1_1math_xhtml_a2fa23a3c6b5e149587e859cb261ef4cd"><div class="ttname"><a href="namespaceopenage_1_1math.xhtml#a2fa23a3c6b5e149587e859cb261ef4cd">openage::math::PI</a></div><div class="ttdeci">constexpr double PI</div><div class="ttdoc">pi</div><div class="ttdef"><b>Definition:</b> <a href="math__constants_8h_source.xhtml#l00015">math_constants.h:15</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ac0edd3e6d8ddf01c639814c3f2cb83fc"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ac0edd3e6d8ddf01c639814c3f2cb83fc">openage::util::Quaternionf</a></div><div class="ttdeci">Quaternion&lt; float &gt; Quaternionf</div><div class="ttdef"><b>Definition:</b> <a href="quaternion_8h_source.xhtml#l00435">quaternion.h:435</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_afd42b418dc20fcb64677b2f75ecd97b8"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">openage::util::Matrix4f</a></div><div class="ttdeci">Matrix&lt; 4, 4, float &gt; Matrix4f</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00289">matrix.h:289</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ab7bb49fe673b7a4d72fb6fb91aba44c8"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ab7bb49fe673b7a4d72fb6fb91aba44c8">openage::util::Vector3f</a></div><div class="ttdeci">Vector&lt; 3, float &gt; Vector3f</div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00222">vector.h:222</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
<div class="ttc" id="testing_8h_xhtml_ae531a534fa7f4028ddf113ae72caa6aa"><div class="ttname"><a href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a></div><div class="ttdeci">#define TESTEQUALS_FLOAT(left, right, epsilon)</div><div class="ttdoc">Asserts that the left expression equals the right expression, within a margin of error epsilon,...</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00068">testing.h:68</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="vector_8h_source.xhtml#l00060">openage::util::Vector&lt; N, T &gt;::equals()</a>, <a class="el" href="matrix_8h_source.xhtml#l00089">openage::util::Matrix&lt; M, N, T &gt;::equals()</a>, <a class="el" href="quaternion_8h_source.xhtml#l00243">openage::util::Quaternion&lt; T &gt;::equals()</a>, <a class="el" href="quaternion_8h_source.xhtml#l00275">openage::util::Quaternion&lt; T &gt;::equals_deg()</a>, <a class="el" href="quaternion_8h_source.xhtml#l00264">openage::util::Quaternion&lt; T &gt;::equals_rad()</a>, <a class="el" href="message_8h_source.xhtml#l00179">ERR</a>, <a class="el" href="quaternion_8h_source.xhtml#l00159">openage::util::Quaternion&lt; T &gt;::from_deg()</a>, <a class="el" href="quaternion_8h_source.xhtml#l00145">openage::util::Quaternion&lt; T &gt;::from_rad()</a>, <a class="el" href="matrix_8h_source.xhtml#l00076">openage::util::Matrix&lt; M, N, T &gt;::identity()</a>, <a class="el" href="quaternion_8h_source.xhtml#l00215">openage::util::Quaternion&lt; T &gt;::inversed()</a>, <a class="el" href="quaternion_8h_source.xhtml#l00189">openage::util::Quaternion&lt; T &gt;::normalized()</a>, <a class="el" href="math__constants_8h_source.xhtml#l00015">openage::math::PI</a>, <a class="el" href="testing_8h_source.xhtml#l00068">TESTEQUALS_FLOAT</a>, and <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>.</p>
<div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_ab3f1d081c603b383598beeee8e4429df_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aec3c7190e428e8fd67bce6f0dd4d582f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec3c7190e428e8fd67bce6f0dd4d582f">&#9670;&nbsp;</a></span>siphash()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::siphash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="hash__test_8cpp_source.xhtml#l00021">21</a> of file <a class="el" href="hash__test_8cpp_source.xhtml">hash_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;               {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">     * Hash results for some Siphash inputs</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">     *</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">     * The test key is 0x000102...0d0e0f</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">     * The inputs are:</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">     *    - nothing (zero length)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">     *    - 0x00</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">     *    - 0x0001</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">     *    - 0x000102</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">     *    - 0x00010203</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">     *    - ...</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> std::array&lt;uint64_t, 64&gt; expected_hashes {{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        0x726fdb47dd0e0e31,0x74f839c593dc67fd,0x0d6c8009d9a94f5a,0x85676696d7fb7e2d,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        0xcf2794e0277187b7,0x18765564cd99a68d,0xcbc9466e58fee3ce,0xab0200f58b01d137,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        0x93f5f5799a932462,0x9e0082df0ba9e4b0,0x7a5dbbc594ddb9f3,0xf4b32f46226bada7,</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        0x751e8fbc860ee5fb,0x14ea5627c0843d90,0xf723ca908e7af2ee,0xa129ca6149be45e5,</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        0x3f2acc7f57c29bdb,0x699ae9f52cbe4794,0x4bc1b3f0968dd39c,0xbb6dc91da77961bd,</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        0xbed65cf21aa2ee98,0xd0f2cbb02e3b67c7,0x93536795e3a33e88,0xa80c038ccd5ccec8,</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        0xb8ad50c6f649af94,0xbce192de8a85b8ea,0x17d835b85bbb15f3,0x2f2e6163076bcfad,</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        0xde4daaaca71dc9a5,0xa6a2506687956571,0xad87a3535c49ef28,0x32d892fad841c342,</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        0x7127512f72f27cce,0xa7f32346f95978e3,0x12e0b01abb051238,0x15e034d40fa197ae,</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        0x314dffbe0815a3b4,0x027990f029623981,0xcadcd4e59ef40c4d,0x9abfd8766a33735c,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        0x0e3ea96b5304a7d0,0xad0c42d6fc585992,0x187306c89bc215a9,0xd4a60abcf3792b95,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        0xf935451de4f21df2,0xa9538f0419755787,0xdb9acddff56ca510,0xd06c98cd5c0975eb,</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        0xe612a3cb9ecba951,0xc766e62cfcadaf96,0xee64435a9752fe72,0xa192d576b245165a,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        0x0a8787bf8ecb74b2,0x81b3e73d20b49b6f,0x7fa8220ba3b2ecea,0x245731c13ca42499,</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        0xb78dbfaf3a8d83bd,0xea1ad565322a1a0b,0x60e61c23a3795013,0x6606d7e446282b93,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        0x6ca4ecb15c5f91e1,0x9f626da15c9625f3,0xe51b38608ef25f57,0x958a324ceb064572</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    }};</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::array&lt;uint8_t, 64&gt; data;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_siphash.xhtml">openage::util::Siphash</a> <a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>(<a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aa8dbdc64850f25163145820ba7b5844f">test_key</a>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 64; i++) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(<a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>.digest(data.data(), i), expected_hashes[i]);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        data.at(i) = i;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// Now test the 64bit input digest</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> uint8_t data8[8] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef};</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> uint64_t data64 = 0x0123456789abcdef;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(<a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>.digest(data8, 8), <a class="code" href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">siphash</a>.digest(data64));</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1tests_xhtml_aec3c7190e428e8fd67bce6f0dd4d582f"><div class="ttname"><a href="namespaceopenage_1_1util_1_1tests.xhtml#aec3c7190e428e8fd67bce6f0dd4d582f">openage::util::tests::siphash</a></div><div class="ttdeci">void siphash()</div><div class="ttdef"><b>Definition:</b> <a href="hash__test_8cpp_source.xhtml#l00021">hash_test.cpp:21</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1tests_xhtml_aa8dbdc64850f25163145820ba7b5844f"><div class="ttname"><a href="namespaceopenage_1_1util_1_1tests.xhtml#aa8dbdc64850f25163145820ba7b5844f">openage::util::tests::test_key</a></div><div class="ttdeci">static const std::array&lt; uint8_t, 16 &gt; test_key</div><div class="ttdef"><b>Definition:</b> <a href="hash__test_8cpp_source.xhtml#l00015">hash_test.cpp:15</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml">openage::util::Siphash</a></div><div class="ttdoc">Contains a Siphash implementration.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8h_source.xhtml#l00023">hash.h:23</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="hash__test_8cpp_source.xhtml#l00015">test_key</a>, and <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>.</p>

<p class="reference">Referenced by <a class="el" href="rng_8cpp_source.xhtml#l00058">openage::rng::RNG::seed()</a>.</p>
<div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_aec3c7190e428e8fd67bce6f0dd4d582f_icgraph.svg" width="362" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a7deb96e08e8e82e52d83fb34f6db25da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7deb96e08e8e82e52d83fb34f6db25da">&#9670;&nbsp;</a></span>vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::util::tests::vector </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="vector__test_8cpp_source.xhtml#l00011">11</a> of file <a class="el" href="vector__test_8cpp_source.xhtml">vector_test.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;              {</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;    {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;        <span class="comment">// zero-initialization test.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        Vectorf&lt;5&gt; zero_explicit{0, 0, 0, 0, 0};</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        Vectorf&lt;5&gt; zero;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        zero.equals(zero_explicit) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    }</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    {</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        <span class="comment">// tests in 2 dimensions.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="comment">// we want to be able to reuse the variable names later.</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keyword">const</span> Vectorf&lt;2&gt; a(1.0, 2.0);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        <span class="keyword">const</span> Vectorf&lt;2&gt; b(3.0, 4.0);</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        Vectorf&lt;2&gt; c;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="comment">// test basic operators.</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        c = a + b;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        c.equals({4.0, 6.0}) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        c = a - b;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        c.equals({-2.0, -2.0}) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        c = 5 * a;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        c.equals({5.0, 10.0}) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        c = a / 8;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        c.equals({0.125, 0.25}) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        c.equals({13, 37}) and <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="comment">// test dot product, norm and normalization.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(a.dot(b), 11, 1e-7);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        c = b;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c.norm(), 5, 1e-7);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        c.normalize();</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a>(c.norm(), 1, 1e-7);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="comment">// test for the cross_product</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">const</span> Vectorf&lt;3&gt; a(1.0, 2.0, 3.0);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keyword">const</span> Vectorf&lt;3&gt; b(4.0, 5.0, 6.0);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        Vectorf&lt;3&gt; c = a.cross_product(b);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        c.equals({-3.0, 6.0, -3.0}) or <a class="code" href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a32253726c81e858197f39fbf0b56d17c"><div class="ttname"><a href="testing_8h.xhtml#a32253726c81e858197f39fbf0b56d17c">TESTFAIL</a></div><div class="ttdeci">#define TESTFAIL</div><div class="ttdoc">Convenience macro, for usage in test functions:</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00034">testing.h:34</a></div></div>
<div class="ttc" id="testing_8h_xhtml_ae531a534fa7f4028ddf113ae72caa6aa"><div class="ttname"><a href="testing_8h.xhtml#ae531a534fa7f4028ddf113ae72caa6aa">TESTEQUALS_FLOAT</a></div><div class="ttdeci">#define TESTEQUALS_FLOAT(left, right, epsilon)</div><div class="ttdoc">Asserts that the left expression equals the right expression, within a margin of error epsilon,...</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00068">testing.h:68</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="vector_8h_source.xhtml#l00177">openage::util::Vector&lt; N, T &gt;::cross_product()</a>, <a class="el" href="vector_8h_source.xhtml#l00149">openage::util::Vector&lt; N, T &gt;::dot()</a>, <a class="el" href="vector_8h_source.xhtml#l00060">openage::util::Vector&lt; N, T &gt;::equals()</a>, <a class="el" href="testing_8h_source.xhtml#l00068">TESTEQUALS_FLOAT</a>, and <a class="el" href="testing_8h_source.xhtml#l00034">TESTFAIL</a>.</p>
<div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1util_1_1tests_a7deb96e08e8e82e52d83fb34f6db25da_cgraph.svg" width="100%" height="451"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="aa8dbdc64850f25163145820ba7b5844f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8dbdc64850f25163145820ba7b5844f">&#9670;&nbsp;</a></span>test_key</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::array&lt;uint8_t, 16&gt; openage::util::tests::test_key</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{{</div><div class="line">    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,</div><div class="line">    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f</div><div class="line">}}</div></div><!-- fragment -->
<p class="definition">Definition at line <a class="el" href="hash__test_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="hash__test_8cpp_source.xhtml">hash_test.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="hash__test_8cpp_source.xhtml#l00021">siphash()</a>.</p>

</div>
</div>
<a id="a6f54051ead3baf22b21d6142f78cbbc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f54051ead3baf22b21d6142f78cbbc3">&#9670;&nbsp;</a></span>undefined</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="structopenage_1_1util_1_1tests_1_1testenum__value.xhtml">testenum_value</a> openage::util::tests::undefined {{&quot;UNDEFINED&quot;, 0}, &quot;undefined test string&quot;}</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="enum__test_8cpp_source.xhtml#l00012">12</a> of file <a class="el" href="enum__test_8cpp_source.xhtml">enum_test.cpp</a>.</p>

<p class="reference">Referenced by <a class="el" href="enum__test_8cpp_source.xhtml#l00013">openage::util::tests::testenum::testenum()</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1util.xhtml">util</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1util_1_1tests.xhtml">tests</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
