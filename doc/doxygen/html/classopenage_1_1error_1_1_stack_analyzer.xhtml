<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::error::StackAnalyzer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1error_1_1_stack_analyzer.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classopenage_1_1error_1_1_stack_analyzer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::error::StackAnalyzer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="stackanalyzer_8h_source.xhtml">stackanalyzer.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for openage::error::StackAnalyzer:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1error_1_1_stack_analyzer__inherit__graph.svg" width="210" height="316"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for openage::error::StackAnalyzer:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1error_1_1_stack_analyzer__coll__graph.svg" width="210" height="316"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a82f244c47e648d1b7e1eefa577fc3622"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a82f244c47e648d1b7e1eefa577fc3622">StackAnalyzer</a> ()=default</td></tr>
<tr class="separator:a82f244c47e648d1b7e1eefa577fc3622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd0f91c95c892dbb81e037a3bca05daf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#acd0f91c95c892dbb81e037a3bca05daf">analyze</a> ()</td></tr>
<tr class="separator:acd0f91c95c892dbb81e037a3bca05daf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab807f0825ce961e84c901c715cc79976"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#ab807f0825ce961e84c901c715cc79976">get_symbols</a> (std::function&lt; void(const <a class="el" href="structopenage_1_1error_1_1backtrace__symbol.xhtml">backtrace_symbol</a> *)&gt; cb, bool reversed) const override</td></tr>
<tr class="separator:ab807f0825ce961e84c901c715cc79976"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5630036766dda80a645cdfbcfc010348"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a5630036766dda80a645cdfbcfc010348">trim_to_current_stack_frame</a> () override</td></tr>
<tr class="separator:a5630036766dda80a645cdfbcfc010348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classopenage_1_1error_1_1_backtrace"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classopenage_1_1error_1_1_backtrace')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">openage::error::Backtrace</a></td></tr>
<tr class="memitem:abb0eb435370a245c3d5b73f083852d93 inherit pub_methods_classopenage_1_1error_1_1_backtrace"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml#abb0eb435370a245c3d5b73f083852d93">~Backtrace</a> ()=default</td></tr>
<tr class="separator:abb0eb435370a245c3d5b73f083852d93 inherit pub_methods_classopenage_1_1error_1_1_backtrace"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a6ff702e8c60bc0f7aa6ab908e85cde07"><td class="memItemLeft" align="right" valign="top">std::vector&lt; void * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a></td></tr>
<tr class="separator:a6ff702e8c60bc0f7aa6ab908e85cde07"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Implementation of the <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">Backtrace</a> interface that analyzes the current C++ stack.</p>
<p>The Usage is:</p>
<p><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml">StackAnalyzer</a> sa; sa.analyze();</p>
<p>Integrating <a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#acd0f91c95c892dbb81e037a3bca05daf">analyze()</a> into the constructor would be a bad idea because then, all sorts of allocators and other gory constructor internals might be visible in the <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml">Backtrace</a>.</p>
<p>The implementation of <a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#acd0f91c95c892dbb81e037a3bca05daf">analyze()</a> and <a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#ab807f0825ce961e84c901c715cc79976">get_symbols()</a> may use all sorts of analyzers, depending on what's available on the platform. The quality of the resolved symbol names may vary accordingly. </p>

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8h_source.xhtml#l00027">27</a> of file <a class="el" href="stackanalyzer_8h_source.xhtml">stackanalyzer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a82f244c47e648d1b7e1eefa577fc3622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82f244c47e648d1b7e1eefa577fc3622">&#9670;&nbsp;</a></span>StackAnalyzer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">openage::error::StackAnalyzer::StackAnalyzer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Creates an empty <a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml">StackAnalyzer</a> object. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="acd0f91c95c892dbb81e037a3bca05daf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd0f91c95c892dbb81e037a3bca05daf">&#9670;&nbsp;</a></span>analyze()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::StackAnalyzer::analyze </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00222">222</a> of file <a class="el" href="stackanalyzer_8cpp_source.xhtml">stackanalyzer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="comment">// unfortunately, backtrace won&#39;t tell us how big our buffer</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="comment">// needs to be, so we have no choice but to try until it</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="comment">// reports success.</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    std::vector&lt;void *&gt; buffer{64};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordtype">int</span> elements = backtrace(buffer.data(), buffer.size());</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="comment">// the buffer was large enough, so stop resizing.</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">if</span> (elements &lt; (ssize_t) buffer.size()) {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            buffer.resize(elements);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            buffer.resize(buffer.size() * 2);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="comment">// now store the result, cut off at the front and back.</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">size_t</span> idx = 0;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">void</span> *element : buffer) {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="comment">// start storing after skipping skip the first few frames</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="comment">// so that e.g. this function does not show up in the trace.</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="comment">// (most-recent-call)</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">if</span> (idx &gt;= <a class="code" href="namespaceopenage_1_1error.xhtml#af4d473d062c43372ff4db76ff90d212b">base_skip_frames</a>) {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>.push_back(element);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        idx += 1;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="comment">// remove some libc-garbage-frames (least-recent-call)</span></div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">for</span> (uint64_t i = 0; i &lt; <a class="code" href="namespaceopenage_1_1error.xhtml#ae3d9c89190667cb25a58f4946755cd7c">skip_entry_frames</a>; i++) {</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>.pop_back();</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}</div><div class="ttc" id="classopenage_1_1error_1_1_stack_analyzer_xhtml_a6ff702e8c60bc0f7aa6ab908e85cde07"><div class="ttname"><a href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">openage::error::StackAnalyzer::stack_addrs</a></div><div class="ttdeci">std::vector&lt; void * &gt; stack_addrs</div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8h_source.xhtml#l00043">stackanalyzer.h:43</a></div></div>
<div class="ttc" id="namespaceopenage_1_1error_xhtml_af4d473d062c43372ff4db76ff90d212b"><div class="ttname"><a href="namespaceopenage_1_1error.xhtml#af4d473d062c43372ff4db76ff90d212b">openage::error::base_skip_frames</a></div><div class="ttdeci">constexpr uint64_t base_skip_frames</div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8cpp_source.xhtml#l00025">stackanalyzer.cpp:25</a></div></div>
<div class="ttc" id="namespaceopenage_1_1error_xhtml_ae3d9c89190667cb25a58f4946755cd7c"><div class="ttname"><a href="namespaceopenage_1_1error.xhtml#ae3d9c89190667cb25a58f4946755cd7c">openage::error::skip_entry_frames</a></div><div class="ttdeci">constexpr uint64_t skip_entry_frames</div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8cpp_source.xhtml#l00019">stackanalyzer.cpp:19</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00025">openage::error::base_skip_frames</a>, and <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00019">openage::error::skip_entry_frames</a>.</p>

<p class="reference">Referenced by <a class="el" href="error_2handlers_8cpp_source.xhtml#l00069">openage::error::terminate_handler()</a>, and <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00305">trim_to_current_stack_frame()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1error_1_1_stack_analyzer_acd0f91c95c892dbb81e037a3bca05daf_icgraph.svg" width="456" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab807f0825ce961e84c901c715cc79976"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab807f0825ce961e84c901c715cc79976">&#9670;&nbsp;</a></span>get_symbols()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::StackAnalyzer::get_symbols </td>
          <td>(</td>
          <td class="paramtype">std::function&lt; void(const <a class="el" href="structopenage_1_1error_1_1backtrace__symbol.xhtml">backtrace_symbol</a> *)&gt;&#160;</td>
          <td class="paramname"><em>cb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>reversed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns (via the callback) symbolic names for all stack frames, to its best knowledge.</p>
<p>The most recent call is returned last (alike Python).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cb</td><td>is called for every symbol in the backtrace, starting with the top-most frame. </td></tr>
    <tr><td class="paramname">reversed</td><td>if true, the most recent call is given last. </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml#ad4e4e82a65ad250f048f66667d810440">openage::error::Backtrace</a>.</p>

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00268">268</a> of file <a class="el" href="stackanalyzer_8cpp_source.xhtml">stackanalyzer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                     {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    backtrace_symbol symbol;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    symbol.filename = <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    symbol.lineno = 0;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">if</span> (reversed) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="comment">// `for (auto pc : this-&gt;stack_addrs | &lt;ranges-ns&gt;::view::reverse)` after Ranges-TS</span></div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> idx = this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>.size(); idx-- &gt; 0;) {</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordtype">void</span> *pc = this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>[idx];</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            symbol.functionname = <a class="code" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">util::symbol_name</a>(pc, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            symbol.pc = pc;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            cb(&amp;symbol);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        }</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">void</span> *pc : this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>) {</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            symbol.functionname = <a class="code" href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">util::symbol_name</a>(pc, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            symbol.pc = pc;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            cb(&amp;symbol);</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        }</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;}</div><div class="ttc" id="classopenage_1_1error_1_1_stack_analyzer_xhtml_a6ff702e8c60bc0f7aa6ab908e85cde07"><div class="ttname"><a href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">openage::error::StackAnalyzer::stack_addrs</a></div><div class="ttdeci">std::vector&lt; void * &gt; stack_addrs</div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8h_source.xhtml#l00043">stackanalyzer.h:43</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_ac6219374623d05b075782ea1adb09c0c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ac6219374623d05b075782ea1adb09c0c">openage::util::symbol_name</a></div><div class="ttdeci">std::string symbol_name(const void *addr, bool require_exact_addr, bool no_pure_addrs)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8cpp_source.xhtml#l00098">compiler.cpp:98</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="backtrace_8h_source.xhtml#l00035">openage::error::backtrace_symbol::filename</a>, <a class="el" href="backtrace_8h_source.xhtml#l00037">openage::error::backtrace_symbol::functionname</a>, <a class="el" href="backtrace_8h_source.xhtml#l00036">openage::error::backtrace_symbol::lineno</a>, <a class="el" href="backtrace_8h_source.xhtml#l00038">openage::error::backtrace_symbol::pc</a>, and <a class="el" href="compiler_8cpp_source.xhtml#l00098">openage::util::symbol_name()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classopenage_1_1error_1_1_stack_analyzer_ab807f0825ce961e84c901c715cc79976_cgraph.svg" width="100%" height="416"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a5630036766dda80a645cdfbcfc010348"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5630036766dda80a645cdfbcfc010348">&#9670;&nbsp;</a></span>trim_to_current_stack_frame()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void openage::error::StackAnalyzer::trim_to_current_stack_frame </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Removes all the lower frames that are also present in the current stack.</p>
<p>Designed to be used in catch clauses, to simulate stack trace collection from throw to catch, instead of from throw to the process entry point.</p>
<p>Defaults to no-op. </p>

<p>Reimplemented from <a class="el" href="classopenage_1_1error_1_1_backtrace.xhtml#a08fdb69045e972de1323464a09daad42">openage::error::Backtrace</a>.</p>

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00305">305</a> of file <a class="el" href="stackanalyzer_8cpp_source.xhtml">stackanalyzer.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                                {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a82f244c47e648d1b7e1eefa577fc3622">StackAnalyzer</a> current;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    current.analyze();</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <span class="keywordflow">while</span> (not current.stack_addrs.empty() and not this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>.empty()) {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>.back() != current.stack_addrs.back()) {</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        }</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">stack_addrs</a>.pop_back();</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        current.stack_addrs.pop_back();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    }</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;}</div><div class="ttc" id="classopenage_1_1error_1_1_stack_analyzer_xhtml_a6ff702e8c60bc0f7aa6ab908e85cde07"><div class="ttname"><a href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a6ff702e8c60bc0f7aa6ab908e85cde07">openage::error::StackAnalyzer::stack_addrs</a></div><div class="ttdeci">std::vector&lt; void * &gt; stack_addrs</div><div class="ttdef"><b>Definition:</b> <a href="stackanalyzer_8h_source.xhtml#l00043">stackanalyzer.h:43</a></div></div>
<div class="ttc" id="classopenage_1_1error_1_1_stack_analyzer_xhtml_a82f244c47e648d1b7e1eefa577fc3622"><div class="ttname"><a href="classopenage_1_1error_1_1_stack_analyzer.xhtml#a82f244c47e648d1b7e1eefa577fc3622">openage::error::StackAnalyzer::StackAnalyzer</a></div><div class="ttdeci">StackAnalyzer()=default</div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00222">analyze()</a>, and <a class="el" href="stackanalyzer_8h_source.xhtml#l00043">stack_addrs</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1error_1_1_stack_analyzer_a5630036766dda80a645cdfbcfc010348_cgraph.svg" width="456" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a6ff702e8c60bc0f7aa6ab908e85cde07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ff702e8c60bc0f7aa6ab908e85cde07">&#9670;&nbsp;</a></span>stack_addrs</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;void *&gt; openage::error::StackAnalyzer::stack_addrs</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>All program counters of this backtrace. </p>

<p class="definition">Definition at line <a class="el" href="stackanalyzer_8h_source.xhtml#l00043">43</a> of file <a class="el" href="stackanalyzer_8h_source.xhtml">stackanalyzer.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="stackanalyzer_8cpp_source.xhtml#l00305">trim_to_current_stack_frame()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/error/<a class="el" href="stackanalyzer_8h_source.xhtml">stackanalyzer.h</a></li>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/error/<a class="el" href="stackanalyzer_8cpp_source.xhtml">stackanalyzer.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1error.xhtml">error</a></li><li class="navelem"><a class="el" href="classopenage_1_1error_1_1_stack_analyzer.xhtml">StackAnalyzer</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
