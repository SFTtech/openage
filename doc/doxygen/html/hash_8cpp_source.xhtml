<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/hash.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('hash_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">hash.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="hash_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2017 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;limits.h&gt;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="hash_8h.xhtml">hash.h</a>&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="misc_8h.xhtml">misc.h</a>&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">namespace </span>util {</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a5cfc0e84830b5945b5731d2148eea3b4">   12</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a5cfc0e84830b5945b5731d2148eea3b4">hash_combine</a>(<span class="keywordtype">size_t</span> hash1, <span class="keywordtype">size_t</span> hash2) {</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="comment">// Taken from http://www.boost.org/doc/libs/1_55_0/doc/html/hash/reference.html#boost.hash_combine</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <span class="keywordflow">return</span> hash1 ^ (hash2 + 0x9e3779b9 + ((hash1 &lt;&lt; 6) + (hash1 &gt;&gt; 2)));</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_siphash.xhtml#a0d9e67468bcba15f9f14f6affc3b9711">   18</a></span>&#160;<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a0d9e67468bcba15f9f14f6affc3b9711">Siphash::Siphash</a>(std::array&lt;uint8_t, 16&gt; key) {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#af7425175b423437032001ccf3901a54b">set_key</a>(<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a35cc6948b9a2b8bed1cb3d100b85c5d9">key</a>);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_siphash.xhtml#af7425175b423437032001ccf3901a54b">   23</a></span>&#160;<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml">Siphash</a>&amp; <a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#af7425175b423437032001ccf3901a54b">Siphash::set_key</a>(std::array&lt;uint8_t, 16&gt; key) {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    this-&gt;key[0] = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a35cc6948b9a2b8bed1cb3d100b85c5d9">key</a>.data(), 8, <span class="keyword">false</span>);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    this-&gt;key[1] = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a35cc6948b9a2b8bed1cb3d100b85c5d9">key</a>.data() + 8, 8, <span class="keyword">false</span>);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">   36</a></span>&#160;uint64_t <a class="code" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">hash</a>(<span class="keyword">const</span> uint64_t key[2], <span class="keyword">const</span> uint8_t *data, <span class="keywordtype">size_t</span> len_data) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">static</span> <span class="keyword">auto</span> sipround = [](uint64_t *v) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        v[0] += v[1];</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        v[1] = rol&lt;uint64_t, 13&gt;(v[1]);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        v[1] ^= v[0];</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        v[0] = rol&lt;uint64_t, 32&gt;(v[0]);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        v[2] += v[3];</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        v[3] = rol&lt;uint64_t, 16&gt;(v[3]);</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        v[3] ^= v[2];</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        v[0] += v[3];</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        v[3] = rol&lt;uint64_t, 21&gt;(v[3]);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        v[3] ^= v[0];</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        v[2] += v[1];</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        v[1] = rol&lt;uint64_t, 17&gt;(v[1]);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        v[1] ^= v[2];</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        v[2] = rol&lt;uint64_t, 32&gt;(v[2]);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    };</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="comment">// (len_data mod 256) ending to append later at the end of the data</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    uint64_t ending = static_cast&lt;uint64_t&gt;(len_data &amp; 0xff) &lt;&lt; 56;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// Initialization</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    uint64_t v[4];</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// These values were taken from the paper: https://131002.net/siphash/siphash.pdf</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    v[0] = key[0] ^ 0x736f6d6570736575ull;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    v[1] = key[1] ^ 0x646f72616e646f6dull;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    v[2] = key[0] ^ 0x6c7967656e657261ull;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    v[3] = key[1] ^ 0x7465646279746573ull;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// Compression</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordtype">size_t</span> rem_bytes{len_data};</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keyword">const</span> uint8_t *idx{data}; <span class="comment">// Points to the start of the current block being copied</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        uint64_t block;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordtype">bool</span> finished{<span class="keyword">false</span>};</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">do</span> {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">if</span> (rem_bytes &lt; 8) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                block = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(idx, rem_bytes, <span class="keyword">false</span>);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                block |= ending;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                finished = <span class="keyword">true</span>;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">else</span> {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                block = <a class="code" href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">array8_to_uint64</a>(idx, 8, <span class="keyword">false</span>);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            v[3] ^= block;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            sipround(v);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            sipround(v);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            v[0] ^= block;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            rem_bytes -= 8;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            idx += 8;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        } <span class="keywordflow">while</span> (!finished);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// Finalization</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    v[2] ^= 0xff;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    sipround(v);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    sipround(v);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    sipround(v);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    sipround(v);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> v[0] ^ v[1] ^ v[2] ^ v[3];</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_siphash.xhtml#a59bdccc7e794fe057e4777031a177650">  107</a></span>&#160;uint64_t <a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a59bdccc7e794fe057e4777031a177650">Siphash::digest</a>(<span class="keyword">const</span> uint8_t *data, <span class="keywordtype">size_t</span> count) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">hash</a>(<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a35cc6948b9a2b8bed1cb3d100b85c5d9">key</a>, data, count);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;}</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_siphash.xhtml#a0cb5db9ffca1f96885bc53e2f5c0c65d">  112</a></span>&#160;uint64_t <a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a59bdccc7e794fe057e4777031a177650">Siphash::digest</a>(uint64_t value) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    std::vector&lt;uint8_t&gt; data = <a class="code" href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">uint64_to_array8</a>(value, <span class="keyword">true</span>);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">hash</a>(<a class="code" href="classopenage_1_1util_1_1_siphash.xhtml#a35cc6948b9a2b8bed1cb3d100b85c5d9">key</a>, data.data(), 8);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}} <span class="comment">// openage::util</span></div><div class="ttc" id="namespaceopenage_1_1util_xhtml_ae9d6c19aadc0f6a1d502f42852172de0"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#ae9d6c19aadc0f6a1d502f42852172de0">openage::util::uint64_to_array8</a></div><div class="ttdeci">std::vector&lt; uint8_t &gt; uint64_to_array8(const uint64_t value, bool big_endian=false)</div><div class="ttdoc">Convert a uint64_t to an array of uint8_t.</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00145">misc.h:145</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml_af7425175b423437032001ccf3901a54b"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml#af7425175b423437032001ccf3901a54b">openage::util::Siphash::set_key</a></div><div class="ttdeci">Siphash &amp; set_key(std::array&lt; uint8_t, 16 &gt; key)</div><div class="ttdoc">Set the key for subsequent hashes.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8cpp_source.xhtml#l00023">hash.cpp:23</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml_a59bdccc7e794fe057e4777031a177650"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml#a59bdccc7e794fe057e4777031a177650">openage::util::Siphash::digest</a></div><div class="ttdeci">uint64_t digest(const uint8_t *data, size_t len_data)</div><div class="ttdoc">Hashes the input data as uint8_t array and returns the result.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8cpp_source.xhtml#l00107">hash.cpp:107</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a69b6ecf2b5119f11c33d2b5b89cec86c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a69b6ecf2b5119f11c33d2b5b89cec86c">openage::util::array8_to_uint64</a></div><div class="ttdeci">uint64_t array8_to_uint64(const uint8_t *start, size_t count, bool big_endian=false)</div><div class="ttdoc">Convert a C-style array of uint8_t to a uint64_t.</div><div class="ttdef"><b>Definition:</b> <a href="misc_8h_source.xhtml#l00111">misc.h:111</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a5cfc0e84830b5945b5731d2148eea3b4"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a5cfc0e84830b5945b5731d2148eea3b4">openage::util::hash_combine</a></div><div class="ttdeci">size_t hash_combine(size_t hash1, size_t hash2)</div><div class="ttdoc">Creates a hash value as a combination of two other hashes.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8cpp_source.xhtml#l00012">hash.cpp:12</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml_a0d9e67468bcba15f9f14f6affc3b9711"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml#a0d9e67468bcba15f9f14f6affc3b9711">openage::util::Siphash::Siphash</a></div><div class="ttdeci">Siphash(std::array&lt; uint8_t, 16 &gt; key)</div><div class="ttdoc">Creates a hash generator.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8cpp_source.xhtml#l00018">hash.cpp:18</a></div></div>
<div class="ttc" id="hash_8h_xhtml"><div class="ttname"><a href="hash_8h.xhtml">hash.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a3cb605abe74b26763ac7340c3785656a"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a3cb605abe74b26763ac7340c3785656a">openage::util::hash</a></div><div class="ttdeci">uint64_t hash(const uint64_t key[2], const uint8_t *data, size_t len_data)</div><div class="ttdoc">Siphash implementation.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8cpp_source.xhtml#l00036">hash.cpp:36</a></div></div>
<div class="ttc" id="misc_8h_xhtml"><div class="ttname"><a href="misc_8h.xhtml">misc.h</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdoc">This file contains forward declarations for all the coordinate types, as well as their scalar types.</div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml_a35cc6948b9a2b8bed1cb3d100b85c5d9"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml#a35cc6948b9a2b8bed1cb3d100b85c5d9">openage::util::Siphash::key</a></div><div class="ttdeci">uint64_t key[2]</div><div class="ttdoc">The key to use for hashing.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8h_source.xhtml#l00065">hash.h:65</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_siphash_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_siphash.xhtml">openage::util::Siphash</a></div><div class="ttdoc">Contains a Siphash implementration.</div><div class="ttdef"><b>Definition:</b> <a href="hash_8h_source.xhtml#l00023">hash.h:23</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="hash_8cpp.xhtml">hash.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
