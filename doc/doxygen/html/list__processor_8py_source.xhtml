<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Openage: openage/testing/list_processor.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="banner.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('list__processor_8py_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">list_processor.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="list__processor_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1testing_1_1list__processor.xhtml">    1</a></span>&#160;<span class="comment"># Copyright 2015-2017 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot; Processes the raw test lists from the testlist module. &quot;&quot;&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">from</span> importlib <span class="keyword">import</span> import_module</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">from</span> ..util.strings <span class="keyword">import</span> lstrip_once</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a96f8756c2413d5f3fe509b1532a91967">list_targets</a>(test_lister, demo_lister, benchmark_lister):</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="stringliteral">    Yields tuples of (testname, type, description, condition_function)</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="stringliteral">    for given test and demo listers.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="stringliteral">    A processing step between the raw lists in testlist, and get_all_tests().</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a96f8756c2413d5f3fe509b1532a91967">   20</a></span>&#160;    <span class="keyword">def </span>default_cond(_):</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; default condition test to enable a test &quot;&quot;&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordflow">for</span> test <span class="keywordflow">in</span> test_lister():</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(test, tuple):</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            test = (test,)</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> test:</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;empty test definition encountered&quot;</span>)</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">if</span> len(test) == 3:</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            condfun = test[2]</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            condfun = default_cond</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">if</span> len(test) &gt;= 2:</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            desc = test[1]</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            desc = <span class="stringliteral">&quot;&quot;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        name = test[0]</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">yield</span> name, <span class="stringliteral">&#39;test&#39;</span>, desc, condfun</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keywordflow">for</span> demo <span class="keywordflow">in</span> demo_lister():</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        name, desc = demo</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">yield</span> name, <span class="stringliteral">&#39;demo&#39;</span>, desc, default_cond</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span> benchmark <span class="keywordflow">in</span> benchmark_lister():</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        name, desc = benchmark</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">yield</span> name, <span class="stringliteral">&#39;benchmark&#39;</span>, desc, default_cond</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#aa7fa94692d5000c384c9820a0a4edddc">list_targets_py</a>():</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; Invokes list_targets() with the py-specific listers. &quot;&quot;&quot;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">from</span> .testlist <span class="keyword">import</span> tests_py, demos_py, benchmark_py</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#aa7fa94692d5000c384c9820a0a4edddc">   57</a></span>&#160;    <span class="keywordflow">for</span> val <span class="keywordflow">in</span> <a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a96f8756c2413d5f3fe509b1532a91967">list_targets</a>(tests_py, demos_py, benchmark_py):</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">yield</span> val</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a598be9bf16c59330d7350e0024b2f363">list_targets_cpp</a>():</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="stringliteral">&quot;&quot;&quot; Invokes list_targets() with the C++-specific listers. &quot;&quot;&quot;</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">from</span> .testlist <span class="keyword">import</span> tests_cpp, demos_cpp, benchmark_cpp</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a598be9bf16c59330d7350e0024b2f363">   64</a></span>&#160;    <span class="keywordflow">for</span> val <span class="keywordflow">in</span> <a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a96f8756c2413d5f3fe509b1532a91967">list_targets</a>(tests_cpp, demos_cpp, benchmark_cpp):</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">yield</span> val</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a9702d9a71efd1d06569d1488b7c05666">get_all_targets</a>():</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral">    Reads the Python and C++ testspec.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">    returns an OrderedDict of</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="stringliteral">    {(testname, type): conditionfun, lang, description, testfun}.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">    type is in {&#39;demo&#39;, &#39;test&#39;},</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">    lang is in {&#39;cpp&#39;, &#39;py&#39;},</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral">    conditionfun is a callable which determines if the test is</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral">        to be run in the given environment</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral">    description is a str, and</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral">    testfun is callable and takes 0 args for tests / list(str) for demos.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">from</span> .cpp_testing <span class="keyword">import</span> run_cpp_method</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a9702d9a71efd1d06569d1488b7c05666">   83</a></span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    result = OrderedDict()</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">for</span> name, type_, description, conditionfun <span class="keywordflow">in</span> <a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#aa7fa94692d5000c384c9820a0a4edddc">list_targets_py</a>():</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        modulename, objectname = name.rsplit(<span class="stringliteral">&#39;.&#39;</span>, maxsplit=1)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            module = import_module(modulename)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            func = getattr(module, objectname)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">except</span> Exception <span class="keyword">as</span> exc:</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;no such function: &quot;</span> + name) <span class="keyword">from</span> exc</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            name = <a class="code" href="namespaceopenage_1_1util_1_1strings.xhtml#a7ae648d1a835e5ee33b60c06d1f3f612">lstrip_once</a>(name, <span class="stringliteral">&#39;openage.&#39;</span>)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">except</span> ValueError <span class="keyword">as</span> exc:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;Unexpected Python test/demo name&quot;</span>) <span class="keyword">from</span> exc</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        result[name, type_] = conditionfun, <span class="stringliteral">&#39;py&#39;</span>, description, func</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span> name, type_, description, conditionfun <span class="keywordflow">in</span> <a class="code" href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a598be9bf16c59330d7350e0024b2f363">list_targets_cpp</a>():</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> type_ == <span class="stringliteral">&#39;demo&#39;</span>:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keyword">def </span>runner(args, name=name):</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="stringliteral">&quot;&quot;&quot; runs the demo func, and ensures that args is empty. &quot;&quot;&quot;</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="keywordflow">if</span> args:</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;C++ demos can&#39;t take arguments. &quot;</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                     <span class="stringliteral">&quot;You should write a Python demo that &quot;</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                     <span class="stringliteral">&quot;calls to C++ then, with arguments.&quot;</span>)</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                run_cpp_method(name)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">elif</span> type_ <span class="keywordflow">in</span> [<span class="stringliteral">&#39;test&#39;</span>, <span class="stringliteral">&#39;benchmark&#39;</span>]:</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keyword">def </span>runner(name=name):</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="stringliteral">&quot;&quot;&quot; simply runs the func. &quot;&quot;&quot;</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                run_cpp_method(name)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;Unknown type &quot;</span> + type_)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">try</span>:</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            name = <a class="code" href="namespaceopenage_1_1util_1_1strings.xhtml#a7ae648d1a835e5ee33b60c06d1f3f612">lstrip_once</a>(name, <span class="stringliteral">&#39;openage::&#39;</span>)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">except</span> ValueError <span class="keyword">as</span> exc:</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;Unexpected C++ test/demo name&quot;</span>) <span class="keyword">from</span> exc</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        result[name, type_] = conditionfun, <span class="stringliteral">&#39;cpp&#39;</span>, description, runner</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> result</div><div class="ttc" id="namespaceopenage_1_1testing_1_1list__processor_xhtml_a9702d9a71efd1d06569d1488b7c05666"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a9702d9a71efd1d06569d1488b7c05666">openage::testing.list_processor.get_all_targets</a></div><div class="ttdeci">def get_all_targets()</div><div class="ttdoc">Reads the Python and C++ testspec.</div><div class="ttdef"><b>Definition:</b> <a href="list__processor_8py_source.xhtml#l00083">list_processor.py:83</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1list__processor_xhtml_aa7fa94692d5000c384c9820a0a4edddc"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1list__processor.xhtml#aa7fa94692d5000c384c9820a0a4edddc">openage::testing.list_processor.list_targets_py</a></div><div class="ttdeci">def list_targets_py()</div><div class="ttdoc">Invokes list_targets() with the py-specific listers.</div><div class="ttdef"><b>Definition:</b> <a href="list__processor_8py_source.xhtml#l00057">list_processor.py:57</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1strings_xhtml_a7ae648d1a835e5ee33b60c06d1f3f612"><div class="ttname"><a href="namespaceopenage_1_1util_1_1strings.xhtml#a7ae648d1a835e5ee33b60c06d1f3f612">openage::util.strings.lstrip_once</a></div><div class="ttdeci">def lstrip_once(string, substr)</div><div class="ttdoc">Removes substr at the start of string, and raises ValueError on failure.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8py_source.xhtml#l00085">strings.py:85</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1list__processor_xhtml_a598be9bf16c59330d7350e0024b2f363"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a598be9bf16c59330d7350e0024b2f363">openage::testing.list_processor.list_targets_cpp</a></div><div class="ttdeci">def list_targets_cpp()</div><div class="ttdoc">Invokes list_targets() with the C++-specific listers.</div><div class="ttdef"><b>Definition:</b> <a href="list__processor_8py_source.xhtml#l00064">list_processor.py:64</a></div></div>
<div class="ttc" id="namespaceopenage_1_1testing_1_1list__processor_xhtml_a96f8756c2413d5f3fe509b1532a91967"><div class="ttname"><a href="namespaceopenage_1_1testing_1_1list__processor.xhtml#a96f8756c2413d5f3fe509b1532a91967">openage::testing.list_processor.list_targets</a></div><div class="ttdeci">def list_targets(test_lister, demo_lister, benchmark_lister)</div><div class="ttdef"><b>Definition:</b> <a href="list__processor_8py_source.xhtml#l00020">list_processor.py:20</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5432d0784b34fd012a3258f7fe2e6e8b.xhtml">openage</a></li><li class="navelem"><a class="el" href="dir_c2131c87632a366a6d52f07ca073ab90.xhtml">testing</a></li><li class="navelem"><a class="el" href="list__processor_8py.xhtml">list_processor.py</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
