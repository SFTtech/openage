<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::datastructure::PairingHeapNode&lt; T, compare &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pri-attribs">Private Attributes</a> &#124;
<a href="classopenage_1_1datastructure_1_1_pairing_heap_node-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">openage::datastructure::PairingHeapNode&lt; T, compare &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for openage::datastructure::PairingHeapNode&lt; T, compare &gt;:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_pairing_heap_node__inherit__graph.svg" width="206" height="492"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for openage::datastructure::PairingHeapNode&lt; T, compare &gt;:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_pairing_heap_node__coll__graph.svg" width="206" height="492"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad25d6fdfdc3e7bfc92d2c77395571e75"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> = <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a>&lt; T, compare &gt;</td></tr>
<tr class="separator:ad25d6fdfdc3e7bfc92d2c77395571e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af1b32b518657c3a03efa60240c5634d5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#af1b32b518657c3a03efa60240c5634d5">PairingHeapNode</a> (const T &amp;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>)</td></tr>
<tr class="separator:af1b32b518657c3a03efa60240c5634d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17ab80e5ef35e2d22599ebcfabbdf639"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a17ab80e5ef35e2d22599ebcfabbdf639">PairingHeapNode</a> (T &amp;&amp;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>)</td></tr>
<tr class="separator:a17ab80e5ef35e2d22599ebcfabbdf639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2d2dd30261c2108d7ff21a4df43098c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad2d2dd30261c2108d7ff21a4df43098c">~PairingHeapNode</a> ()=default</td></tr>
<tr class="separator:ad2d2dd30261c2108d7ff21a4df43098c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1e12c9a1871b3ba19edb4a73935ae4"><td class="memItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a4f1e12c9a1871b3ba19edb4a73935ae4">get_data</a> () const</td></tr>
<tr class="separator:a4f1e12c9a1871b3ba19edb4a73935ae4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b2c1f83d627f4f401d53787e9fa076f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a0b2c1f83d627f4f401d53787e9fa076f">become_child_of</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt; &amp;node)</td></tr>
<tr class="separator:a0b2c1f83d627f4f401d53787e9fa076f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f6b72619532af9b5a828dd541a225b1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3f6b72619532af9b5a828dd541a225b1">add_child</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt; &amp;new_child)</td></tr>
<tr class="separator:a3f6b72619532af9b5a828dd541a225b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9de129f708553f7a91cdfbacc9b48ea6"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">link_with</a> (const std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt; &amp;node)</td></tr>
<tr class="separator:a9de129f708553f7a91cdfbacc9b48ea6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6227d9be8c7b75e3456c25850e324327"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a6227d9be8c7b75e3456c25850e324327">link_backwards</a> ()</td></tr>
<tr class="separator:a6227d9be8c7b75e3456c25850e324327"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954463b2218a69cf977df80d4bd7d872"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a954463b2218a69cf977df80d4bd7d872">loosen</a> ()</td></tr>
<tr class="separator:a954463b2218a69cf977df80d4bd7d872"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a3aca0150a01a40ee16f3da49f38c3c31"><td class="memItemLeft" align="right" valign="top">friend&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3aca0150a01a40ee16f3da49f38c3c31">PairingHeap&lt; T, compare, this_type &gt;</a></td></tr>
<tr class="separator:a3aca0150a01a40ee16f3da49f38c3c31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dcccc1c86bffe3bf6d852687bd8a9c4"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a></td></tr>
<tr class="separator:a3dcccc1c86bffe3bf6d852687bd8a9c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa48e37e1eb9ea1cd87cf17b2f511b479"><td class="memItemLeft" align="right" valign="top">compare&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">cmp</a></td></tr>
<tr class="separator:aa48e37e1eb9ea1cd87cf17b2f511b479"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr class="memitem:a913846c9030bbcb2502d4cc96cd56afa"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a></td></tr>
<tr class="separator:a913846c9030bbcb2502d4cc96cd56afa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01fb1e27e0012a6f31147c7d11a4fc08"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a></td></tr>
<tr class="separator:a01fb1e27e0012a6f31147c7d11a4fc08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5275316630476a1db17714404feb3d34"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a></td></tr>
<tr class="separator:a5275316630476a1db17714404feb3d34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8766c62075853897ab56f7066315813"><td class="memItemLeft" align="right" valign="top">std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a></td></tr>
<tr class="separator:ae8766c62075853897ab56f7066315813"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T, typename compare = std::less&lt;T&gt;&gt;<br />
class openage::datastructure::PairingHeapNode&lt; T, compare &gt;</h3>


<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00042">42</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ad25d6fdfdc3e7bfc92d2c77395571e75"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad25d6fdfdc3e7bfc92d2c77395571e75">&#9670;&nbsp;</a></span>this_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> =  <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a>&lt;T, compare&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00044">44</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af1b32b518657c3a03efa60240c5634d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1b32b518657c3a03efa60240c5634d5">&#9670;&nbsp;</a></span>PairingHeapNode() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a> </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00052">52</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        :</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>{<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>} {}</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a3dcccc1c86bffe3bf6d852687bd8a9c4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">openage::datastructure::PairingHeapNode::data</a></div><div class="ttdeci">T data</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00048">pairing_heap.h:48</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00048">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::data</a>.</p>

</div>
</div>
<a id="a17ab80e5ef35e2d22599ebcfabbdf639"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17ab80e5ef35e2d22599ebcfabbdf639">&#9670;&nbsp;</a></span>PairingHeapNode() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a> </td>
          <td>(</td>
          <td class="paramtype">T &amp;&amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00056">56</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        :</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>{<a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>)} {}</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a3dcccc1c86bffe3bf6d852687bd8a9c4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">openage::datastructure::PairingHeapNode::data</a></div><div class="ttdeci">T data</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00048">pairing_heap.h:48</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml_a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e"><div class="ttname"><a href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">openage::ability_type::move</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00048">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::data</a>, and <a class="el" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">openage::move</a>.</p>

</div>
</div>
<a id="ad2d2dd30261c2108d7ff21a4df43098c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2d2dd30261c2108d7ff21a4df43098c">&#9670;&nbsp;</a></span>~PairingHeapNode()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::~<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3f6b72619532af9b5a828dd541a225b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f6b72619532af9b5a828dd541a225b1">&#9670;&nbsp;</a></span>add_child()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::add_child </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>new_child</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Add the given node as a child to this one. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00079">79</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                                                              {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// first child is the most recently attached one</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// it must not have siblings as they will get lost.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        new_child-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        new_child-&gt;next_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a> != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a>-&gt;prev_sibling = new_child;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a> = new_child;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        new_child-&gt;parent = this-&gt;shared_from_this();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a913846c9030bbcb2502d4cc96cd56afa"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">openage::datastructure::PairingHeapNode::first_child</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; first_child</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00182">pairing_heap.h:182</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00182">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::first_child</a>.</p>

</div>
</div>
<a id="a0b2c1f83d627f4f401d53787e9fa076f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b2c1f83d627f4f401d53787e9fa076f">&#9670;&nbsp;</a></span>become_child_of()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::become_child_of </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Let this node become a child of the given one. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00072">72</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                               {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        node-&gt;add_child(this-&gt;shared_from_this());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a id="a4f1e12c9a1871b3ba19edb4a73935ae4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f1e12c9a1871b3ba19edb4a73935ae4">&#9670;&nbsp;</a></span>get_data()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const T&amp; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::get_data </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get contained node data. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00065">65</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                              {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a3dcccc1c86bffe3bf6d852687bd8a9c4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">openage::datastructure::PairingHeapNode::data</a></div><div class="ttdeci">T data</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00048">pairing_heap.h:48</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00048">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::data</a>.</p>

</div>
</div>
<a id="a6227d9be8c7b75e3456c25850e324327"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6227d9be8c7b75e3456c25850e324327">&#9670;&nbsp;</a></span>link_backwards()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::link_backwards </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Link all siblings backwards from right to left. Recursive call, one stage for each all childs of the root node. This results in the computation of the new subtree root. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00134">134</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                                              {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// reached end, return this as current root,</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// the previous siblings will be linked to it.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> this-&gt;shared_from_this();</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// recurse to last sibling,</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        std::shared_ptr&lt;this_type&gt; node = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>-&gt;link_backwards();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// then link ourself to the new root.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        node-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        node-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">link_with</a>(node);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a9de129f708553f7a91cdfbacc9b48ea6"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">openage::datastructure::PairingHeapNode::link_with</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; link_with(const std::shared_ptr&lt; this_type &gt; &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00099">pairing_heap.h:99</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a5275316630476a1db17714404feb3d34"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">openage::datastructure::PairingHeapNode::next_sibling</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; next_sibling</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00184">pairing_heap.h:184</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a01fb1e27e0012a6f31147c7d11a4fc08"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">openage::datastructure::PairingHeapNode::prev_sibling</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; prev_sibling</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00183">pairing_heap.h:183</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00099">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::link_with()</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00184">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::next_sibling</a>, and <a class="el" href="pairing__heap_8h_source.xhtml#l00183">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::prev_sibling</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_pairing_heap_node_a6227d9be8c7b75e3456c25850e324327_cgraph.svg" width="406" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a9de129f708553f7a91cdfbacc9b48ea6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9de129f708553f7a91cdfbacc9b48ea6">&#9670;&nbsp;</a></span>link_with()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::link_with </td>
          <td>(</td>
          <td class="paramtype">const std::shared_ptr&lt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This method decides which node becomes the new root node by comparing <code>this</code> with <code>node</code>. The new root is returned, it has the other node as child. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00099">99</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                                                             {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        std::shared_ptr&lt;this_type&gt; new_root;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        std::shared_ptr&lt;this_type&gt; new_child;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">cmp</a>(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>, node-&gt;data)) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            new_root  = this-&gt;shared_from_this();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            new_child = node;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            new_root  = node;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            new_child = this-&gt;shared_from_this();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment">// children of new root become siblings of new new_child</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// -&gt; parent of new child = new root</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">// this whll be set by the add_child method</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        new_child-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        new_child-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// this is then set to the previous pair root:</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        new_root-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        new_root-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// set up the child</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        new_root-&gt;add_child(new_child);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> new_root;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a3dcccc1c86bffe3bf6d852687bd8a9c4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">openage::datastructure::PairingHeapNode::data</a></div><div class="ttdeci">T data</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00048">pairing_heap.h:48</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_aa48e37e1eb9ea1cd87cf17b2f511b479"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">openage::datastructure::PairingHeapNode::cmp</a></div><div class="ttdeci">compare cmp</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00049">pairing_heap.h:49</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00049">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::cmp</a>.</p>

<p class="reference">Referenced by <a class="el" href="pairing__heap_8h_source.xhtml#l00134">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::link_backwards()</a>.</p>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classopenage_1_1datastructure_1_1_pairing_heap_node_a9de129f708553f7a91cdfbacc9b48ea6_icgraph.svg" width="406" height="67"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a954463b2218a69cf977df80d4bd7d872"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a954463b2218a69cf977df80d4bd7d872">&#9670;&nbsp;</a></span>loosen()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::loosen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Cut this node from all parent and sibling connections, but keeps the child pointer. This effectively cuts out the subtree. </p>

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00157">157</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                  {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="comment">// release us from some other node</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a> and this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a>-&gt;first_child == this-&gt;shared_from_this()) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="comment">// we are the first child</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="comment">// make the next sibling the first child</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a>-&gt;first_child = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">// if we have a previous sibling</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a> != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="comment">// set its next sibling to skip us.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a>-&gt;next_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// if we have a next sibling</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="comment">// tell its previous sibling to skip us.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>-&gt;prev_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">// reset sibling and parent ptrs.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_ae8766c62075853897ab56f7066315813"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">openage::datastructure::PairingHeapNode::parent</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; parent</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00185">pairing_heap.h:185</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a5275316630476a1db17714404feb3d34"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">openage::datastructure::PairingHeapNode::next_sibling</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; next_sibling</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00184">pairing_heap.h:184</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a01fb1e27e0012a6f31147c7d11a4fc08"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">openage::datastructure::PairingHeapNode::prev_sibling</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; prev_sibling</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00183">pairing_heap.h:183</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="pairing__heap_8h_source.xhtml#l00184">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::next_sibling</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00185">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::parent</a>, and <a class="el" href="pairing__heap_8h_source.xhtml#l00183">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::prev_sibling</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="aa48e37e1eb9ea1cd87cf17b2f511b479"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa48e37e1eb9ea1cd87cf17b2f511b479">&#9670;&nbsp;</a></span>cmp</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">compare <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::cmp</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00049">49</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pairing__heap_8h_source.xhtml#l00099">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::link_with()</a>.</p>

</div>
</div>
<a id="a3dcccc1c86bffe3bf6d852687bd8a9c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dcccc1c86bffe3bf6d852687bd8a9c4">&#9670;&nbsp;</a></span>data</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::data</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00048">48</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="content__snippet_8py_source.xhtml#l00127">openage.convert.dataformat.content_snippet.ContentSnippet::__eq__()</a>, <a class="el" href="struct__snippet_8py_source.xhtml#l00095">openage.convert.dataformat.struct_snippet.StructSnippet::__hash__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00096">openage.convert.dataformat.content_snippet.ContentSnippet::__hash__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00140">openage.convert.dataformat.content_snippet.ContentSnippet::__repr__()</a>, <a class="el" href="data__definition_8py_source.xhtml#l00129">openage.convert.dataformat.data_definition.DataDefinition::__str__()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00151">openage.convert.dataformat.content_snippet.ContentSnippet::__str__()</a>, <a class="el" href="data__formatter_8py_source.xhtml#l00127">openage.convert.dataformat.data_formatter.DataFormatter::add_data()</a>, <a class="el" href="data__formatter_8py_source.xhtml#l00170">openage.convert.dataformat.data_formatter.DataFormatter::export()</a>, <a class="el" href="data__definition_8py_source.xhtml#l00037">openage.convert.dataformat.data_definition.DataDefinition::generate_csv()</a>, <a class="el" href="content__snippet_8py_source.xhtml#l00045">openage.convert.dataformat.content_snippet.ContentSnippet::get_data()</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00065">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::get_data()</a>, <a class="el" href="texture_8py_source.xhtml#l00078">openage.convert.texture.TextureImage::get_data()</a>, <a class="el" href="texture_8py_source.xhtml#l00075">openage.convert.texture.TextureImage::get_pil_image()</a>, <a class="el" href="pairing__heap_8h_source.xhtml#l00052">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::PairingHeapNode()</a>, and <a class="el" href="peresource_8py_source.xhtml#l00168">openage.convert.peresource.PEResources::read_directory()</a>.</p>

</div>
</div>
<a id="a913846c9030bbcb2502d4cc96cd56afa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a913846c9030bbcb2502d4cc96cd56afa">&#9670;&nbsp;</a></span>first_child</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::first_child</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00182">182</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pairing__heap_8h_source.xhtml#l00079">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::add_child()</a>.</p>

</div>
</div>
<a id="a5275316630476a1db17714404feb3d34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5275316630476a1db17714404feb3d34">&#9670;&nbsp;</a></span>next_sibling</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::next_sibling</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00184">184</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pairing__heap_8h_source.xhtml#l00134">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::link_backwards()</a>, and <a class="el" href="pairing__heap_8h_source.xhtml#l00157">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::loosen()</a>.</p>

</div>
</div>
<a id="a3aca0150a01a40ee16f3da49f38c3c31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3aca0150a01a40ee16f3da49f38c3c31">&#9670;&nbsp;</a></span>PairingHeap&lt; T, compare, this_type &gt;</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">friend <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a>&lt; T, compare, <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a> &gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00046">46</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

</div>
</div>
<a id="ae8766c62075853897ab56f7066315813"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8766c62075853897ab56f7066315813">&#9670;&nbsp;</a></span>parent</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::parent</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00185">185</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pairing__heap_8h_source.xhtml#l00157">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::loosen()</a>, <a class="el" href="path_8py_source.xhtml#l00322">openage.util.fslike.path.Path::with_name()</a>, and <a class="el" href="path_8py_source.xhtml#l00326">openage.util.fslike.path.Path::with_suffix()</a>.</p>

</div>
</div>
<a id="a01fb1e27e0012a6f31147c7d11a4fc08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01fb1e27e0012a6f31147c7d11a4fc08">&#9670;&nbsp;</a></span>prev_sibling</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename compare  = std::less&lt;T&gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::shared_ptr&lt;<a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">this_type</a>&gt; <a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a>&lt; T, compare &gt;::prev_sibling</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="pairing__heap_8h_source.xhtml#l00183">183</a> of file <a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="pairing__heap_8h_source.xhtml#l00134">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::link_backwards()</a>, and <a class="el" href="pairing__heap_8h_source.xhtml#l00157">openage::datastructure::PairingHeapNode&lt; T, compare &gt;::loosen()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>C:/Users/Jameson/Documents/git-projects/openage/libopenage/datastructure/<a class="el" href="pairing__heap_8h_source.xhtml">pairing_heap.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1datastructure.xhtml">datastructure</a></li><li class="navelem"><a class="el" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
