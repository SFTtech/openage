<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: Todo List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('todo.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">Todo List </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt>Namespace <a class="el" href="namespaceopenage.xhtml">openage</a>  </dt>
<dd><a class="anchor" id="_todo000049"></a>make general transformation from iterator algorithm to container algorithm. so much metaprogramming...  </dd>
<dt>Member <a class="el" href="classopenage_1_1_action_mode.xhtml#a6807ef371160b0d49b5d1154ec9c6701">openage::ActionMode::mousepos_phys3</a>  </dt>
<dd><a class="anchor" id="_todo000010"></a>these shouldn't be here. remove them ASAP. they are used to carry over mouse information into some of the game control lambda functions  </dd>
<dt>Class <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1attack_01_4.xhtml">openage::Attribute&lt; attr_type::attack &gt;</a>  </dt>
<dd><p class="startdd"><a class="anchor" id="_todo000035"></a>can a unit have multiple attacks such as villagers hunting map target classes onto attacks </p>
<p class="enddd">remove the first constructor and the default values after (keep for now for compatibility)  </p>
</dd>
<dt>Member <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1attack_01_4.xhtml#a3329c7fc3447ca0d6558742e01e9aa10">openage::Attribute&lt; attr_type::attack &gt;::area_of_effect</a>  </dt>
<dd><a class="anchor" id="_todo000041"></a>not used  </dd>
<dt>Member <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1attack_01_4.xhtml#a4290748a1363b5517643b3d1791e2631">openage::Attribute&lt; attr_type::attack &gt;::friendly_fire</a>  </dt>
<dd><a class="anchor" id="_todo000040"></a>not used  </dd>
<dt>Member <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1attack_01_4.xhtml#a75a9acf9af2825a2e24e178004e87066">openage::Attribute&lt; attr_type::attack &gt;::min_range</a>  </dt>
<dd><a class="anchor" id="_todo000039"></a>not used  </dd>
<dt>Class <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1building_01_4.xhtml">openage::Attribute&lt; attr_type::building &gt;</a>  </dt>
<dd><a class="anchor" id="_todo000037"></a>revisit after unit training is improved  </dd>
<dt>Class <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1damaged_01_4.xhtml">openage::Attribute&lt; attr_type::damaged &gt;</a>  </dt>
<dd><a class="anchor" id="_todo000034"></a>add last damage taken timestamp  </dd>
<dt>Class <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1formation_01_4.xhtml">openage::Attribute&lt; attr_type::formation &gt;</a>  </dt>
<dd><a class="anchor" id="_todo000036"></a>store patrol and follow command information  </dd>
<dt>Class <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1garrison_01_4.xhtml">openage::Attribute&lt; attr_type::garrison &gt;</a>  </dt>
<dd><a class="anchor" id="_todo000038"></a>add capacity per type of unit  </dd>
<dt>Class <a class="el" href="classopenage_1_1_attribute_3_01attr__type_1_1hitpoints_01_4.xhtml">openage::Attribute&lt; attr_type::hitpoints &gt;</a>  </dt>
<dd><a class="anchor" id="_todo000033"></a>change bar information stucture  </dd>
<dt>Member <a class="el" href="classopenage_1_1audio_1_1_dynamic_loader.xhtml#a3b691e2596c617e3ccbd0bc6595109db">openage::audio::DynamicLoader::load_chunk</a>  (int16_t *chunk_buffer, size_t offset, size_t chunk_size)=0</dt>
<dd><a class="anchor" id="_todo000001"></a>Returns zero if the end of resource is reached. </dd>
<dt>Member <a class="el" href="classopenage_1_1console_1_1_buf.xhtml#a7060ca85ba5a820b0c8e55870a9919c8">openage::console::Buf::resize</a>  (<a class="el" href="structopenage_1_1coord_1_1term.xhtml">coord::term</a> new_dims)</dt>
<dd><p class="startdd"><a class="anchor" id="_todo000002"></a>copy line by line, considering the value stored in old_linedata_pos-&gt;auto_wrapped. start with the first line of the scrollback buffer, and stop with the last line of the screen buffer. do not copy empty characters, unless they are followed by filled characters in the same line, or a continued wrapped line. store in term_t variables the locations in the new buffer of the first/last line of the old scrollback buffer the first/last line of the old screen buffer these variables need to take into account events where upmost lines of a buffer are overwritten by new lines. commented out for now </p>
<p class="enddd"><a class="anchor" id="_todo000003"></a> depending on the variables defined in the previous section, decide which line is the first line of the screen buffer int new_chrbuf, and which parts of new_chrbuf must be cleared.  </p>
</dd>
<dt>Member <a class="el" href="classopenage_1_1console_1_1_console.xhtml#a0e1f861a8f19ed84b00c580d50d9f49f">openage::console::Console::Console</a>  (<a class="el" href="classopenage_1_1_engine.xhtml">Engine</a> *engine)</dt>
<dd><a class="anchor" id="_todo000004"></a>multiple terminals on screen resizable terminals scrollbars console input log console, command console  </dd>
<dt>Member <a class="el" href="structopenage_1_1coord_1_1camgame.xhtml#a3fc238716b4f13031e53b8cb1d8c3a44">openage::coord::camgame::to_viewport</a>  (const <a class="el" href="classopenage_1_1coord_1_1_coord_manager.xhtml">CoordManager</a> &amp;mgr) const</dt>
<dd><a class="anchor" id="_todo000006"></a>Once we have terrain elevation, 'up' will not mean the absolute elevation, but instead the returned <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">phys3</a> coordinate will be the intersection between the camgame line and the 3d terrain + up altitude.  </dd>
<dt>Member <a class="el" href="structopenage_1_1coord_1_1phys2.xhtml#a2cbf9e4669fb9702e6b086de22ac5eac">openage::coord::phys2::to_phys3</a>  (const <a class="el" href="classopenage_1_1_terrain.xhtml">Terrain</a> &amp;terrain, phys_t altitude=0) const</dt>
<dd><a class="anchor" id="_todo000005"></a>once terrain elevations have been implemented, query the terrain elevation at {ne, se}.  </dd>
<dt>Member <a class="el" href="structopenage_1_1coord_1_1tile.xhtml#a3b1cc7af8687d57f014cf86e57476b2b">openage::coord::tile::to_tile3</a>  (const <a class="el" href="classopenage_1_1_terrain.xhtml">Terrain</a> &amp;terrain, tile_t altitude=0) const</dt>
<dd><a class="anchor" id="_todo000007"></a>once terrain elevations have been implemented, query the terrain elevation at {ne, se}.  </dd>
<dt>Member <a class="el" href="namespaceopenage.xhtml#abda3971a8397f9204b2ad873b645251c">openage::cost_type</a>  </dt>
<dd><a class="anchor" id="_todo000012"></a>use in TimeCost  </dd>
<dt>Member <a class="el" href="classopenage_1_1curve_1_1_keyframe_container.xhtml#a3ffa6f71c0489532547ba12a56fd97bc">openage::curve::KeyframeContainer&lt; T &gt;::insert</a>  (const <a class="el" href="classopenage_1_1curve_1_1_keyframe_container_1_1_keyframe.xhtml">Keyframe</a> &amp;value)</dt>
<dd><a class="anchor" id="_todo000008"></a>add something like <code>previous</code> that returns element with e-&gt;time &lt; time probably just calls <code>last</code> and walks back one element if that is not at <a class="el" href="classopenage_1_1curve_1_1_keyframe_container.xhtml#a4469b92a601c321c3353c663853d9851">begin()</a> already  </dd>
<dt>Member <a class="el" href="classopenage_1_1event_1_1_event_queue.xhtml#a42433f50adffb7e0a20c43889292e54c">openage::event::EventQueue::remove</a>  (const std::shared_ptr&lt; Event &gt; &amp;evnt)</dt>
<dd><a class="anchor" id="_todo000009"></a>remove the event from the other storages. this would require changes to dependent events and triggers. (to stop being a dependent event or allow being triggered)  </dd>
<dt>Class <a class="el" href="classopenage_1_1_game_main.xhtml">openage::GameMain</a>  </dt>
<dd><a class="anchor" id="_todo000013"></a>include a list of actions to be saved as the game replay file  </dd>
<dt>Class <a class="el" href="classopenage_1_1_game_spec.xhtml">openage::GameSpec</a>  </dt>
<dd><a class="anchor" id="_todo000015"></a>should the audio loading should be moved there?  </dd>
<dt>Member <a class="el" href="classopenage_1_1input_1_1_input_context.xhtml#ab79e2d06d4aab199d3fb9c5dc5b6ff3f">openage::input::InputContext::active_binds</a>  () const</dt>
<dd><a class="anchor" id="_todo000023"></a>move this method to the input manager. as InputManager::active_binds(const InputContext &amp;) const;  </dd>
<dt>Class <a class="el" href="classopenage_1_1_interval_timer.xhtml">openage::IntervalTimer</a>  </dt>
<dd><a class="anchor" id="_todo000031"></a>find a better name for triggers  </dd>
<dt>Member <a class="el" href="classopenage_1_1log_1_1_log_sink.xhtml#ac795e3966c4816c4c09fab3a68642cca">openage::log::LogSink::set_loglevel</a>  (level loglevel)</dt>
<dd><a class="anchor" id="_todo000024"></a>Add iptables-like chains that decide whether a message will be logged, depending on msg.info, logger id, thread id, etc. This member variable is only a make-shift solution with obvious limitations.  </dd>
<dt>Member <a class="el" href="classopenage_1_1_nyan_type.xhtml#a63ce8cdf7fd596318a61c0c20628b88b">openage::NyanType::NyanType</a>  (const <a class="el" href="classopenage_1_1_player.xhtml">Player</a> &amp;owner)</dt>
<dd><a class="anchor" id="_todo000048"></a>give the parsed nyan attributes to the constructor  </dd>
<dt>Member <a class="el" href="classopenage_1_1options_1_1_option_node.xhtml#a965533f59ae5fb52213d3ade08520cd2">openage::options::OptionNode::varmap</a>  </dt>
<dd><a class="anchor" id="_todo000025"></a>read only variables  </dd>
<dt>Member <a class="el" href="classopenage_1_1path_1_1_node.xhtml#ab2a7dc59c9efb7f5baef572bbbb00228">openage::path::Node::position</a>  </dt>
<dd><a class="anchor" id="_todo000026"></a>make const  </dd>
<dt>Class <a class="el" href="classopenage_1_1_patrol_ability.xhtml">openage::PatrolAbility</a>  </dt>
<dd><a class="anchor" id="_todo000030"></a>implement  </dd>
<dt>Member <a class="el" href="classopenage_1_1_player.xhtml#a3fd34994e4ac44efd89e567de46eb05f">openage::Player::available_ids</a>  </dt>
<dd><a class="anchor" id="_todo000017"></a>revisit, can be simplified?  </dd>
<dt>Member <a class="el" href="classopenage_1_1_player.xhtml#a377bd0846efc82274d555e1f1069215c">openage::Player::available_objects</a>  </dt>
<dd><a class="anchor" id="_todo000016"></a>revisit, can be simplified?  </dd>
<dt>Class <a class="el" href="classopenage_1_1_projectile_producer.xhtml">openage::ProjectileProducer</a>  </dt>
<dd><a class="anchor" id="_todo000042"></a>use <a class="el" href="classopenage_1_1_movable_producer.xhtml">MovableProducer</a> as base class  </dd>
<dt>Class <a class="el" href="classopenage_1_1_render_options.xhtml">openage::RenderOptions</a>  </dt>
<dd><a class="anchor" id="_todo000011"></a>include fog drawing etc  </dd>
<dt>Class <a class="el" href="classopenage_1_1_resource_bundle.xhtml">openage::ResourceBundle</a>  </dt>
<dd><a class="anchor" id="_todo000018"></a>change amounts from doubles to integers  </dd>
<dt>Member <a class="el" href="classopenage_1_1_score.xhtml#ad71b795068636d35bd174acde2e080fd">openage::Score::update_score</a>  ()</dt>
<dd><a class="anchor" id="_todo000019"></a>update gui here  </dd>
<dt>Class <a class="el" href="classopenage_1_1_sound.xhtml">openage::Sound</a>  </dt>
<dd><a class="anchor" id="_todo000014"></a>move to assetmanager  </dd>
<dt>Class <a class="el" href="classopenage_1_1_target_action.xhtml">openage::TargetAction</a>  </dt>
<dd><a class="anchor" id="_todo000032"></a>implement min range  </dd>
<dt>Member <a class="el" href="classopenage_1_1_team.xhtml#aa066bf2eeff40da381503faa00507657">openage::Team::get_players</a>  () const</dt>
<dd><a class="anchor" id="_todo000021"></a>find a better way to get all the players  </dd>
<dt>Member <a class="el" href="namespaceopenage.xhtml#a0078c87a2baae2c33889beb8379a8270">openage::terrain_t</a>  </dt>
<dd><a class="anchor" id="_todo000027"></a>get rid of the signedness.  </dd>
<dt>Member <a class="el" href="classopenage_1_1_terrain_object.xhtml#a601a0aaa58d28c66540b8463662fab85">openage::TerrainObject::get_children</a>  () const</dt>
<dd><p class="startdd"><a class="anchor" id="_todo000029"></a>this does not perform optimally and is likely to change </p>
<p class="enddd"><a class="anchor" id="_todo000028"></a>a better performing way of doing this for example accept a lambda to use for each element or maintain a duplicate class field for raw pointers  </p>
</dd>
<dt>Member <a class="el" href="classopenage_1_1_unit.xhtml#a12811894b98383b4c3cfe6769bc3ff80">openage::Unit::location</a>  </dt>
<dd><a class="anchor" id="_todo000044"></a>make private field  </dd>
<dt>Member <a class="el" href="classopenage_1_1_unit.xhtml#a00fd6387097ed12ae6f6b6ec2ab2939e">openage::Unit::selected</a>  </dt>
<dd><a class="anchor" id="_todo000043"></a>should be a pointer to selection to be updated when unit is removed, or null if not selected  </dd>
<dt>Member <a class="el" href="classopenage_1_1_unit_type.xhtml#a810c763e421cd95a9c64ab4c3e351140">openage::UnitType::initialise</a>  (<a class="el" href="classopenage_1_1_unit.xhtml">Unit</a> *, <a class="el" href="classopenage_1_1_player.xhtml">Player</a> &amp;)=0</dt>
<dd><a class="anchor" id="_todo000045"></a>make const  </dd>
<dt>Member <a class="el" href="classopenage_1_1_unit_type.xhtml#a51facc71929fe2d425bc6bec06e0dc48">openage::UnitType::place</a>  (<a class="el" href="classopenage_1_1_unit.xhtml">Unit</a> *, std::shared_ptr&lt; Terrain &gt;, <a class="el" href="structopenage_1_1coord_1_1phys3.xhtml">coord::phys3</a>) const =0</dt>
<dd><a class="anchor" id="_todo000047"></a>make const  </dd>
<dt>Member <a class="el" href="classopenage_1_1_unit_type.xhtml#a05d515d0c9b380bd9cb426b3bf3852f8">openage::UnitType::reinitialise</a>  (<a class="el" href="classopenage_1_1_unit.xhtml">Unit</a> *, <a class="el" href="classopenage_1_1_player.xhtml">Player</a> &amp;)</dt>
<dd><a class="anchor" id="_todo000046"></a>define if pure vitrual or not / should be in nyan?  </dd>
<dt>Member <a class="el" href="classopenage_1_1util_1_1_file.xhtml#a4712008e4434f121e00ba41a29789db9">openage::util::File::get_lines</a>  ()</dt>
<dd><a class="anchor" id="_todo000050"></a>relay the get_lines to the underlaying filelike which may do a better job in getting the lines. instead, we read everything and then split up into lines.  </dd>
<dt>Member <a class="el" href="classopenage_1_1util_1_1_path.xhtml#a3fc6528c66f6d83e122e753f73511a3d">openage::util::Path::get_parent</a>  () const</dt>
<dd><a class="anchor" id="_todo000051"></a>watching of path with inotify or similar this should get a Watcher*, which manages the multiple events otherwise, each file would require an inotify fd. =&gt; see the <a class="el" href="classopenage_1_1_asset_manager.xhtml">AssetManager</a> and move functionality from there.  </dd>
<dt>Member <a class="el" href="classqtsdl_1_1_gui_input_impl.xhtml#abd1c5fe1c24e2b0bdd09d5b63229be13">qtsdl::GuiInputImpl::relay_input_event</a>  (QEvent *ev, bool only_if_grabbed=false)</dt>
<dd><a class="anchor" id="_todo000022"></a>if/when the logic thread or input thread of the main game is made separate, give mutex or queue to the gui in order to replace this busy wait.  </dd>
<dt>Class <a class="el" href="structstd_1_1hash_3_01openage_1_1score__category_01_4.xhtml">std::hash&lt; openage::score_category &gt;</a>  </dt>
<dd><a class="anchor" id="_todo000020"></a>decide if needed, not used at the moment </dd>
</dl>
</div></div><!-- PageDoc -->
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
