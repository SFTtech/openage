<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::event::tests Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1event_1_1tests.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">openage::event::tests Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml">EventTypeTestClass</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml">TestEventClass</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml">TestEventClassTwo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml">TestState</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab950ba5156aefba0f5ecaab970fcc1aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1event_1_1tests.xhtml#ab950ba5156aefba0f5ecaab970fcc1aa">eventtrigger</a> ()</td></tr>
<tr class="separator:ab950ba5156aefba0f5ecaab970fcc1aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab950ba5156aefba0f5ecaab970fcc1aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab950ba5156aefba0f5ecaab970fcc1aa">&#9670;&nbsp;</a></span>eventtrigger()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void openage::event::tests::eventtrigger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="event_2tests_8cpp_source.xhtml#l00228">228</a> of file <a class="el" href="event_2tests_8cpp_source.xhtml">tests.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Basic Ping Pong ] ------------&quot;</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// test destruction</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::weak_ptr&lt;TestState&gt; destruction_test_state;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="comment">// Test with one event class</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClass&gt;(<span class="stringliteral">&quot;test_on_A&quot;</span>, 0));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClass&gt;(<span class="stringliteral">&quot;test_on_B&quot;</span>, 1));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">auto</span> gstate = std::static_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        destruction_test_state = state;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="comment">// One must not start the game at 0 - this leads to randomness in execution</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_B&quot;</span>, state-&gt;objectB, gstate, 1);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_A&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">// It is expected, that A and B hand over the &quot;changed&quot; events between each other</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        state-&gt;objectA-&gt;set_number(0, 0);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="comment">// run 10 iterations, for times 2, 4, ... 20</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 10; ++i) {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            loop-&gt;reach_time((i + 1) * 2, gstate);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        state-&gt;log_dbg();</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">if</span> (state-&gt;trace.size() &lt; 6) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;not enough items collected&quot;</span>);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> last_time = 0;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : state-&gt;trace) {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">if</span> (last_time &gt; e.time) {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;You broke the time continuum: one shall not execute randomly!&quot;</span>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            last_time = e.time;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">switch</span>(i) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">case</span> 0: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 3); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keywordflow">case</span> 1: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 6); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">case</span> 2: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 9); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">case</span> 3: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 12); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">case</span> 4: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 15); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">case</span> 5: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 18); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">default</span>: <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Too many elements in stack trace&quot;</span>); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            i += 1;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">if</span> (!destruction_test_state.expired()) {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Test Failed because TestState was not automatically destructed&quot;</span>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Two Event Ping Pong ] ------------&quot;</span>);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Test with two event classes to check interplay</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClass&gt;(<span class="stringliteral">&quot;test_on_A&quot;</span>, 0));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClassTwo&gt;(<span class="stringliteral">&quot;test_on_B&quot;</span>));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keyword">auto</span> gstate = std::static_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">// One must not start the game at 0 - this leads to randomness in execution</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_B&quot;</span>, state-&gt;objectB, gstate, 1);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_A&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="comment">// It is expected, that A and B hand over the &quot;changed&quot; events between each other</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        state-&gt;objectA-&gt;set_number(0, 1);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="comment">// run 10 iterations, for times 2, 4, ... 20</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 10; ++i) {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            loop-&gt;reach_time((i + 1) * 2, gstate);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        state-&gt;log_dbg();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">if</span> (state-&gt;trace.size() &lt; 7) {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;not enough items collected&quot;</span>);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> last_time = 0;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : state-&gt;trace) {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">if</span> (last_time &gt; e.time) {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;You broke the time continuum: one shall not execute randomly!&quot;</span>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            last_time = e.time;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">switch</span>(i) {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">case</span> 0: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 3); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">case</span> 1: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 6); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">case</span> 2: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 8); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">case</span> 3: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 11); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">case</span> 4: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 13); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">case</span> 5: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 16); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">case</span> 6: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 18); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">default</span>: <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Too many elements in stack trace&quot;</span>); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            i += 1;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Complex Event Types ] ------------&quot;</span>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Now set up a more complex test to test the different event types</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                     <span class="stringliteral">&quot;object_modify&quot;</span>,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                     EventClass::trigger_type::DEPENDENCY));</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                     <span class="stringliteral">&quot;object_modify_immediately&quot;</span>,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                     EventClass::trigger_type::DEPENDENCY_IMMEDIATELY));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                     <span class="stringliteral">&quot;object_trigger&quot;</span>,</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                     EventClass::trigger_type::TRIGGER));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                     <span class="stringliteral">&quot;repeat_exec&quot;</span>,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                     EventClass::trigger_type::REPEAT));</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                     <span class="stringliteral">&quot;once&quot;</span>,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                     EventClass::trigger_type::ONCE));</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">auto</span> gstate = std::static_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="comment">// One must not start the game at 0 - this leads to randomness in execution</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="comment">// -------------------------------------</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="comment">// Add some events to be invoked:</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="comment">// execs whenever objectA is changed + 1</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;object_modify&quot;</span>, state-&gt;objectA, gstate, 4);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="comment">// execs whenever objectA is changed + 1,</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="comment">// does not use a newly predicted time as object_modify_immediately</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;object_modify_immediately&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="comment">// execs at t=x when test_trigger(x) is invoked on objectA</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;object_trigger&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="comment">// execs periodically at t=n*5</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;repeat_exec&quot;</span>, state-&gt;objectA, gstate, 0);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="comment">// executes just once at t=10</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;once&quot;</span>, state-&gt;objectA, gstate, 10);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;##### SETUP DONE &quot;</span>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="comment">// Without anything happening and until time 0, nothing will happen</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="comment">// Expected: object_modify_immediately(t=1) [ we changed data at t=1 ]</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            loop-&gt;reach_time(0, gstate);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        state-&gt;objectA-&gt;set_number(0, 1);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="comment">// Evaluate the state until t=2</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="comment">// Expected: object_modify_immediately(t=(1+2)),</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="comment">// because we set the number at t=1,</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="comment">// which then creates a invoke time of t+1 == 2</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            loop-&gt;reach_time(2, gstate);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 1);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.front().name, <span class="stringliteral">&quot;object_modify_immediately&quot;</span>);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.front().time, 2);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="comment">// executing to t=2 again should yield nothing,</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="comment">// we reached t=2 in the step before already</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            loop-&gt;reach_time(2, gstate);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;##### INIT DONE &quot;</span>);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Triggering Keyframe at 1&quot;</span>);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        state-&gt;objectA-&gt;test_trigger(1);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        {</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="comment">// Expected: object_trigger(1)</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            loop-&gt;reach_time(2, gstate);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            state-&gt;log_dbg();</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 1);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">if</span> (state-&gt;trace.front().name != <span class="stringliteral">&quot;object_trigger&quot;</span>)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; state-&gt;trace.front().name</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;, expected object_trigger&quot;</span>);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.front().time, 1);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="comment">// Expected: object_modify(1+1+1=3) and repeat_exec(5)</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            loop-&gt;reach_time(5, gstate);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 2);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keyword">auto</span> it = state-&gt;trace.begin();</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;object_modify&quot;</span>)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected object_modify&quot;</span>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 3);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            it++;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;repeat_exec&quot;</span>)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected repeat_exec&quot;</span>);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 5);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="comment">// Expected: repeat_exec(10), once(10)</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            loop-&gt;reach_time(11, gstate);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 2);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keyword">auto</span> it = state-&gt;trace.begin();</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;repeat_exec&quot;</span>)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected repeat_exec&quot;</span>);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 10);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            it++;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;once&quot;</span>)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected once&quot;</span>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 10);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;changing the value at t=12&quot;</span>);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        state-&gt;objectA-&gt;set_number(1, 12);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="comment">// Expected: object_modify_immediately(12+1=13), object_modify(12+1+1=14)</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="comment">// object_modify_immediately is executed at the time of change (12+1)</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="comment">// whereas object_modify is executed with a newly predicted time (that is +1)</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            loop-&gt;reach_time(15, gstate);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 3);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keyword">auto</span> it = state-&gt;trace.begin();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;object_modify_immediately&quot;</span>)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected object_modify_immediately&quot;</span>);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 13);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            it++;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;object_modify&quot;</span>)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected object_modify&quot;</span>);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 14);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            it++;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;repeat_exec&quot;</span>)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected repeat_exec&quot;</span>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 15);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Event parameter Mapping ] ------------&quot;</span>);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keyword">class </span>EventParameterMapTestClass : <span class="keyword">public</span> EventClass {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            EventParameterMapTestClass()</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                :</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                EventClass(<span class="stringliteral">&quot;EventParameterMap&quot;</span>, EventClass::trigger_type::ONCE) {}</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keywordtype">void</span> setup_event(<span class="keyword">const</span> std::shared_ptr&lt;Event&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                             <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordtype">void</span> invoke(Loop &amp;<span class="comment">/*loop*/</span>,</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                        <span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                        <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                        <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;<span class="comment">/*time*/</span>,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                        <span class="keyword">const</span> EventClass::param_map &amp;param)<span class="keyword"> override </span>{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing unknown parameter&quot;</span>);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.contains(<span class="stringliteral">&quot;tomato&quot;</span>), <span class="keyword">false</span>);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.check_type&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;tomato&quot;</span>), <span class="keyword">false</span>);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;tomato&quot;</span>, 1), 1);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;tomato&quot;</span>), 0);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;std::string&gt;(<span class="stringliteral">&quot;tomato&quot;</span>, <span class="stringliteral">&quot;test&quot;</span>), <span class="stringliteral">&quot;test&quot;</span>);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;std::string&gt;(<span class="stringliteral">&quot;tomato&quot;</span>), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing Integer parameter&quot;</span>);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.contains(<span class="stringliteral">&quot;testInt&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.check_type&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;testInt&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;testInt&quot;</span>), 1);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// FIXME: This should hurt you!!!</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;std::string&gt;(<span class="stringliteral">&quot;testInt&quot;</span>, <span class="stringliteral">&quot;int&quot;</span>), <span class="stringliteral">&quot;int&quot;</span>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing char* parameter&quot;</span>);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.contains(<span class="stringliteral">&quot;testString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.check_type&lt;<span class="keyword">const</span> <span class="keywordtype">char</span>*&gt;(<span class="stringliteral">&quot;testString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(strcmp(param.get&lt;<span class="keyword">const</span> <span class="keywordtype">char</span>*&gt;(<span class="stringliteral">&quot;testString&quot;</span>), <span class="stringliteral">&quot;string&quot;</span>), 0);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing std::string parameter&quot;</span>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.contains(<span class="stringliteral">&quot;testStdString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.check_type&lt;std::string&gt;(<span class="stringliteral">&quot;testStdString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.get&lt;std::string&gt;(<span class="stringliteral">&quot;testStdString&quot;</span>), <span class="stringliteral">&quot;stdstring&quot;</span>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> predict_invoke_time(<span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                              <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">curve::time_t</a> &amp;at)<span class="keyword"> override </span>{</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                <span class="keywordflow">return</span> at;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            }</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        };</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keyword">using namespace </span>std::literals;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventParameterMapTestClass&gt;());</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keyword">auto</span> gstate = std::dynamic_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;EventParameterMap&quot;</span>, state-&gt;objectA, gstate, 1, {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                {<span class="stringliteral">&quot;testInt&quot;</span>, 1},</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                {<span class="stringliteral">&quot;testStdString&quot;</span>, <span class="stringliteral">&quot;stdstring&quot;</span>s},</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                {<span class="stringliteral">&quot;testString&quot;</span>, <span class="stringliteral">&quot;string&quot;</span>}</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            }</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        );</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        loop-&gt;reach_time(10, gstate);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;}</div><div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdoc">Asserts that the left expression equals the right expression, and that no exception is thrown.</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="namespaceopenage_1_1curve_xhtml_af909cf1de79df6389fd9431b7424b48a"><div class="ttname"><a href="namespaceopenage_1_1curve.xhtml#af909cf1de79df6389fd9431b7424b48a">openage::curve::time_t</a></div><div class="ttdeci">util::FixedPoint&lt; int64_t, 16 &gt; time_t</div><div class="ttdoc">Defines the type that is used as time index.</div><div class="ttdef"><b>Definition:</b> <a href="curve_8h_source.xhtml#l00016">curve.h:16</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a8845e8951e253b5e94ada5be1e308503"><div class="ttname"><a href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a></div><div class="ttdeci">#define TESTFAILMSG(...)</div><div class="ttdoc">As above, but allows printing a message:</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00042">testing.h:42</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="eventclass_8h_source.xhtml#l00105">openage::event::EventClass::param_map::check_type()</a>, <a class="el" href="eventclass_8h_source.xhtml#l00097">openage::event::EventClass::param_map::contains()</a>, <a class="el" href="message_8h_source.xhtml#l00176">DBG</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">openage::event::EventClass::DEPENDENCY</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">openage::event::EventClass::DEPENDENCY_IMMEDIATELY</a>, <a class="el" href="eventclass_8h_source.xhtml#l00085">openage::event::EventClass::param_map::get()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">openage::event::EventClass::ONCE</a>, <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">openage::event::EventClass::REPEAT</a>, <a class="el" href="testing_8h_source.xhtml#l00049">TESTEQUALS</a>, <a class="el" href="testing_8h_source.xhtml#l00042">TESTFAILMSG</a>, and <a class="el" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">openage::event::EventClass::TRIGGER</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1event_1_1tests_ab950ba5156aefba0f5ecaab970fcc1aa_cgraph.svg" width="100%" height="542"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1event.xhtml">event</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1event_1_1tests.xhtml">tests</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
