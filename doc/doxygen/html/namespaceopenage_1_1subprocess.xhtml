<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: openage::subprocess Namespace Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('namespaceopenage_1_1subprocess.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">openage::subprocess Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>similar in its goals to Python's subprocess module  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af8b5d87acaf3d044fdd924ef68a1cec8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1subprocess.xhtml#af8b5d87acaf3d044fdd924ef68a1cec8">is_executable</a> (const char *filename)</td></tr>
<tr class="memdesc:af8b5d87acaf3d044fdd924ef68a1cec8"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true IFF the file is executable  <a href="#af8b5d87acaf3d044fdd924ef68a1cec8">More...</a><br /></td></tr>
<tr class="separator:af8b5d87acaf3d044fdd924ef68a1cec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea6af6d7d8e5290e58dfafd50a96a069"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1subprocess.xhtml#aea6af6d7d8e5290e58dfafd50a96a069">which</a> (const char *name)</td></tr>
<tr class="memdesc:aea6af6d7d8e5290e58dfafd50a96a069"><td class="mdescLeft">&#160;</td><td class="mdescRight">finds the path to an executable by evaluating env[PATH]  <a href="#aea6af6d7d8e5290e58dfafd50a96a069">More...</a><br /></td></tr>
<tr class="separator:aea6af6d7d8e5290e58dfafd50a96a069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9433d1215dbd3b40cd1c0981b84a8541"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceopenage_1_1subprocess.xhtml#a9433d1215dbd3b40cd1c0981b84a8541">call</a> (const std::vector&lt; const char * &gt; &amp;argv, bool wait=false, const char *redirect_stdout_to=nullptr)</td></tr>
<tr class="memdesc:a9433d1215dbd3b40cd1c0981b84a8541"><td class="mdescLeft">&#160;</td><td class="mdescRight">starts the process at argv[0] passes argv as argv  <a href="#a9433d1215dbd3b40cd1c0981b84a8541">More...</a><br /></td></tr>
<tr class="separator:a9433d1215dbd3b40cd1c0981b84a8541"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>similar in its goals to Python's subprocess module </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a9433d1215dbd3b40cd1c0981b84a8541"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9433d1215dbd3b40cd1c0981b84a8541">&#9670;&nbsp;</a></span>call()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int openage::subprocess::call </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; const char * &gt; &amp;&#160;</td>
          <td class="paramname"><em>argv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>wait</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>redirect_stdout_to</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>starts the process at argv[0] passes argv as argv </p>
<p>on failure, -1 is returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">argv</td><td>must consist of at least one non-empty string, and end with a nullptr. this is not verified.</td></tr>
    <tr><td class="paramname">wait</td><td>decides whether we wait for the process to finish. if true, returns the process's return value if false, returns 0</td></tr>
    <tr><td class="paramname">redirect_stdout_to</td><td>if not nullptr, the given file is opened and substituted for the process's stdout. the existing file is overwritten. </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="subprocess_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="subprocess_8cpp_source.xhtml">subprocess.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                                                                         {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// \todo not yet implemented</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> -1; <span class="comment">// nope</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="comment">// used by child to communicate execve() to its parent.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="comment">// on success, the child auto-closes the pipe; the parent reads 0 bytes.</span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="comment">// on failure, however, the child writes errno; the parent reads this.</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">int</span> pipefd[2];</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> (pipe(pipefd) &lt; 0) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">// the pipe could not be created</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;could not create pipe: &quot;</span> &lt;&lt; strerror(errno));</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">int</span> replacement_stdout_fd = -1;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">if</span> (redirect_stdout_to != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        replacement_stdout_fd = open(</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            redirect_stdout_to,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            O_WRONLY | O_CREAT|O_TRUNC|O_CLOEXEC,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            0644);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">if</span> (replacement_stdout_fd &lt; 0) {</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;could not open output redirection file &quot;</span> &lt;&lt; redirect_stdout_to &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; strerror(errno));</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            close(pipefd[0]);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            close(pipefd[1]);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="comment">// mark write end of pipe as close-on-exec</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (fcntl(pipefd[1], F_SETFD, FD_CLOEXEC) &lt; 0) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;could not fcntl write-end of pipe: &quot;</span> &lt;&lt; strerror(errno));</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        close(pipefd[0]);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        close(pipefd[1]);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">if</span> (replacement_stdout_fd &gt; -1) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            close(replacement_stdout_fd);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    pid_t child_pid = fork();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (child_pid == -1) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="comment">// the fork has failed</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;could not fork: &quot;</span> &lt;&lt; strerror(errno));</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        close(pipefd[0]);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        close(pipefd[1]);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">if</span> (replacement_stdout_fd &gt; -1) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            close(replacement_stdout_fd);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span> (child_pid == 0) {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">// we&#39;re the child</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">// close read end of pipe</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        close(pipefd[0]);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment">// replace stdout</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">if</span> (replacement_stdout_fd &gt; -1) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            dup2(replacement_stdout_fd, 1);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            close(replacement_stdout_fd);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *<span class="keyword">const</span> *argv_data = argv.data();</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment">// this is horrible.</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">// &quot;(...) these objects are completely constant.&quot;</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// &quot;Due to a limitation of the ISO C standard,&quot;</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="comment">// &quot;it is not possible to state that idea in standard C.&quot;</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="comment">// wtf is your problem, guys...</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        execv(argv[0], const_cast&lt;char *const *&gt;(argv_data));</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordtype">int</span> child_errno = errno;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="comment">// execv has failed. write errno to parent</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="comment">// welcome to our little adventure of writing _4_ bytes to our parent :)</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordtype">char</span> *write_buf = (<span class="keywordtype">char</span> *) &amp;child_errno;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        ssize_t remaining = <span class="keyword">sizeof</span>(child_errno);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">while</span> (remaining &gt; 0) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            ssize_t written = write(pipefd[1], write_buf, remaining);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">if</span> (written &lt;= 0) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                <span class="comment">// we didn&#39;t even succeed at passing errno to our parent.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="comment">// truly, all hope is lost.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                exit(2);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            remaining -= written;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            write_buf += written;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        exit(1);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="comment">// we&#39;re the parent.</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    close(pipefd[1]);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">if</span> (replacement_stdout_fd &gt; -1) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        close(replacement_stdout_fd);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="comment">// welcome to our little adventure of reading _4_ bytes from our child :)</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordtype">int</span> child_errno;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordtype">char</span> *read_buf = (<span class="keywordtype">char</span> *) &amp;child_errno;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">size_t</span> total = 0;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// we expect to read either 0, or sizeof(child_errno) bytes.</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">while</span> (total &lt; <span class="keyword">sizeof</span>(child_errno)) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        ssize_t read_count = read(pipefd[0], read_buf + total, <span class="keyword">sizeof</span>(child_errno) - total);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> (read_count == 0) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">// no more data from child</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span> (read_count &lt; 0) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;read from child pipe failed&quot;</span> &lt;&lt; strerror(errno));</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            close(pipefd[0]);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        total += read_count;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    close(pipefd[0]);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">if</span> (total &gt; 0) {</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">if</span> (total != <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)) {</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;wrong number of bytes read from child pipe: &quot;</span> &lt;&lt; total);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        }</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">if</span> (child_errno &gt; 0) {</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;execv has failed: &quot;</span> &lt;&lt; strerror(child_errno));</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">if</span> (!wait) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="comment">// leave the child process to its fate</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="comment">// \todo wait in thread to avoid zombification?</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// wait for the child process to finish</span></div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordtype">int</span> status;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> (waitpid(child_pid, &amp;status, 0) &lt; 0) {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;could not wait for child process&quot;</span>);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    }</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="comment">// everything went well.</span></div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> status;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor">    #endif</span></div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}</div><div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="log_2____init_____8py_source.xhtml#l00124">openage::log::err()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, and <a class="el" href="message_8h_source.xhtml#l00171">MSG</a>.</p>

<p class="reference">Referenced by <a class="el" href="os_8cpp_source.xhtml#l00102">openage::os::execute_file()</a>, <a class="el" href="pyobject__tests_8cpp_source.xhtml#l00016">openage::pyinterface::tests::pyobject()</a>, and <a class="el" href="externalprofiler_8cpp_source.xhtml#l00072">openage::util::ExternalProfiler::show_results()</a>.</p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1subprocess_a9433d1215dbd3b40cd1c0981b84a8541_cgraph.svg" width="100%" height="432"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1subprocess_a9433d1215dbd3b40cd1c0981b84a8541_icgraph.svg" width="616" height="155"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="af8b5d87acaf3d044fdd924ef68a1cec8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8b5d87acaf3d044fdd924ef68a1cec8">&#9670;&nbsp;</a></span>is_executable()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openage::subprocess::is_executable </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns true IFF the file is executable </p>

<p class="definition">Definition at line <a class="el" href="subprocess_8cpp_source.xhtml#l00025">25</a> of file <a class="el" href="subprocess_8cpp_source.xhtml">subprocess.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;                                         {</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment">// \todo not yet implemented</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">struct </span>stat sb;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> (stat(<a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>, &amp;sb) == 0</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            and S_ISREG(sb.st_mode)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            and sb.st_mode &amp; 0111);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a664e0be1f5d2f4d1e1a624f6f4a5f0c1"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">openage::util::filename</a></div><div class="ttdeci">std::string filename(const std::string &amp;fullpath)</div><div class="ttdoc">get the filename (last part) of a given path</div><div class="ttdef"><b>Definition:</b> <a href="util_2path_8cpp_source.xhtml#l00364">path.cpp:364</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="util_2path_8cpp_source.xhtml#l00364">openage::util::filename()</a>.</p>

<p class="reference">Referenced by <a class="el" href="subprocess_8cpp_source.xhtml#l00037">which()</a>, and <a class="el" href="files_8py_source.xhtml#l00054">openage.util.files::which()</a>.</p>
<div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1subprocess_af8b5d87acaf3d044fdd924ef68a1cec8_cgraph.svg" width="358" height="52"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1subprocess_af8b5d87acaf3d044fdd924ef68a1cec8_icgraph.svg" width="100%" height="428"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aea6af6d7d8e5290e58dfafd50a96a069"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea6af6d7d8e5290e58dfafd50a96a069">&#9670;&nbsp;</a></span>which()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string openage::subprocess::which </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>finds the path to an executable by evaluating env[PATH] </p>

<p class="definition">Definition at line <a class="el" href="subprocess_8cpp_source.xhtml#l00037">37</a> of file <a class="el" href="subprocess_8cpp_source.xhtml">subprocess.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;                                  {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="comment">// \todo not yet implemented</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> name;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// when it&#39;s an absolute name</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="namespaceopenage_1_1subprocess.xhtml#af8b5d87acaf3d044fdd924ef68a1cec8">is_executable</a>(name)) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">return</span> name;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">char</span> *env_path = getenv(<span class="stringliteral">&quot;PATH&quot;</span>);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">if</span> (env_path == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a271d8f7f52be750e5c744a394ec71344">WARN</a> &lt;&lt; <span class="stringliteral">&quot;no PATH environment variable found!&quot;</span>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::unique_ptr&lt;char[]&gt; path = <a class="code" href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">util::copy_string</a>(env_path);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">char</span> *dir = strtok(path.get(), <span class="stringliteral">&quot;:&quot;</span>); dir; dir = strtok(<span class="keyword">nullptr</span>, <span class="stringliteral">&quot;:&quot;</span>)) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        std::string <a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>.append(dir);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>.push_back(<span class="charliteral">&#39;/&#39;</span>);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>.append(name);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="namespaceopenage_1_1subprocess.xhtml#af8b5d87acaf3d044fdd924ef68a1cec8">is_executable</a>(<a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>.c_str())) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">filename</a>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="ttc" id="namespaceopenage_1_1util_xhtml_a664e0be1f5d2f4d1e1a624f6f4a5f0c1"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a664e0be1f5d2f4d1e1a624f6f4a5f0c1">openage::util::filename</a></div><div class="ttdeci">std::string filename(const std::string &amp;fullpath)</div><div class="ttdoc">get the filename (last part) of a given path</div><div class="ttdef"><b>Definition:</b> <a href="util_2path_8cpp_source.xhtml#l00364">path.cpp:364</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdoc">Convenience method that makes use of the 'general' LogSource.</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="namespaceopenage_1_1subprocess_xhtml_af8b5d87acaf3d044fdd924ef68a1cec8"><div class="ttname"><a href="namespaceopenage_1_1subprocess.xhtml#af8b5d87acaf3d044fdd924ef68a1cec8">openage::subprocess::is_executable</a></div><div class="ttdeci">bool is_executable(const char *filename)</div><div class="ttdoc">returns true IFF the file is executable</div><div class="ttdef"><b>Definition:</b> <a href="subprocess_8cpp_source.xhtml#l00025">subprocess.cpp:25</a></div></div>
<div class="ttc" id="message_8h_xhtml_a271d8f7f52be750e5c744a394ec71344"><div class="ttname"><a href="message_8h.xhtml#a271d8f7f52be750e5c744a394ec71344">WARN</a></div><div class="ttdeci">#define WARN</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00178">message.h:178</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a854794aef09b81dbec641eca208a66d7"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">openage::util::copy_string</a></div><div class="ttdeci">std::unique_ptr&lt; char[]&gt; copy_string(const char *s)</div><div class="ttdoc">Copies the given string to the returned unique_ptr, including 0 byte.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00064">strings.cpp:64</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="strings_8cpp_source.xhtml#l00064">openage::util::copy_string()</a>, <a class="el" href="util_2path_8cpp_source.xhtml#l00364">openage::util::filename()</a>, <a class="el" href="subprocess_8cpp_source.xhtml#l00025">is_executable()</a>, <a class="el" href="log_8cpp_source.xhtml#l00013">openage::log::log()</a>, and <a class="el" href="message_8h_source.xhtml#l00178">WARN</a>.</p>

<p class="reference">Referenced by <a class="el" href="os_8cpp_source.xhtml#l00102">openage::os::execute_file()</a>, <a class="el" href="externalprofiler_8cpp_source.xhtml#l00072">openage::util::ExternalProfiler::show_results()</a>, and <a class="el" href="convert_2main_8py_source.xhtml#l00227">openage.convert.main::wanna_use_wine()</a>.</p>
<div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1subprocess_aea6af6d7d8e5290e58dfafd50a96a069_cgraph.svg" width="100%" height="543"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="namespaceopenage_1_1subprocess_aea6af6d7d8e5290e58dfafd50a96a069_icgraph.svg" width="100%" height="440"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespaceopenage.xhtml">openage</a></li><li class="navelem"><a class="el" href="namespaceopenage_1_1subprocess.xhtml">subprocess</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
