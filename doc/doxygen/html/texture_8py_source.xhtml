<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/openage/convert/texture.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('texture_8py_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">texture.py</div>  </div>
</div><!--header-->
<div class="contents">
<a href="texture_8py.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1convert_1_1texture.xhtml">    1</a></span>&#160;<span class="comment"># Copyright 2014-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot; Routines for texture generation etc &quot;&quot;&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># TODO pylint: disable=C,R</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">import</span> os</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">import</span> numpy</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">from</span> .binpack <span class="keyword">import</span> RowPacker, ColumnPacker, BinaryTreePacker, BestPacker</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">from</span> .blendomatic <span class="keyword">import</span> BlendingMode</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">from</span> .dataformat <span class="keyword">import</span> (exportable, data_definition,</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;                         struct_definition, data_formatter)</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">from</span> .hardcoded.terrain_tile_size <span class="keyword">import</span> TILE_HALFSIZE</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">from</span> .hardcoded.texture <span class="keyword">import</span> (MAX_TEXTURE_DIMENSION, MARGIN,</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                TERRAIN_ASPECT_RATIO)</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">from</span> ..log <span class="keyword">import</span> spam</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">from</span> ..util.fslike.path <span class="keyword">import</span> Path</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceopenage_1_1convert_1_1texture.xhtml#a0fee08e92bb6bd623d2a15d56af23aed">subtexture_meta</a>(tx, ty, hx, hy, cx, cy):</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="stringliteral">    generate a dict that contains the meta information for</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="stringliteral">    the given parameters:</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="stringliteral">        origin x, y</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral">        height, width</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">        center/hotspot x, y</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    ret = {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="stringliteral">&quot;x&quot;</span>:  tx,</div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1convert_1_1texture.xhtml#a0fee08e92bb6bd623d2a15d56af23aed">   33</a></span>&#160;        <span class="stringliteral">&quot;y&quot;</span>:  ty,</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="stringliteral">&quot;w&quot;</span>:  hx,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="stringliteral">&quot;h&quot;</span>:  hy,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="stringliteral">&quot;cx&quot;</span>: cx,</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="stringliteral">&quot;cy&quot;</span>: cy,</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> ret</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml">TextureImage</a>:</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">    represents a image created from a (r,g,b,a) matrix.</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">def </span>__init__(self, picture_data, hotspot=None):</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml">   49</a></span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordflow">if</span> isinstance(picture_data, Image.Image):</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#ac624da81191a224d6452b1e56dfce715">   51</a></span>&#160;            <span class="keywordflow">if</span> picture_data.mode != <span class="stringliteral">&#39;RGBA&#39;</span>:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                picture_data = picture_data.convert(<span class="stringliteral">&#39;RGBA&#39;</span>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            picture_data = numpy.array(picture_data)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(picture_data, numpy.ndarray):</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;Texture image must be created from PIL Image &quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                             <span class="stringliteral">&quot;or numpy array, not &#39;%s&#39;&quot;</span> % type(picture_data))</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#aebbd31c5d38e7183cfc4b73384f4b97e">width</a> = picture_data.shape[1]</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a6ab8f5bb89e0e62dced8b1a4643743db">height</a> = picture_data.shape[0]</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#aebbd31c5d38e7183cfc4b73384f4b97e">   63</a></span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a173fdf777356d529586708570ee36be4">spam</a>(<span class="stringliteral">&quot;creating TextureImage with size %d x %d&quot;</span>, self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#aebbd31c5d38e7183cfc4b73384f4b97e">width</a>, self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a6ab8f5bb89e0e62dced8b1a4643743db">height</a>)</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a6ab8f5bb89e0e62dced8b1a4643743db">   64</a></span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">if</span> hotspot <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#adee0bd6eaa5074d6e4b7c4e07d7e36d6">hotspot</a> = (0, 0)</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#adee0bd6eaa5074d6e4b7c4e07d7e36d6">hotspot</a> = hotspot</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#adee0bd6eaa5074d6e4b7c4e07d7e36d6">   69</a></span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a709b50baede5a6a601d6226be68cd54d">data</a> = picture_data</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a741ac8d5dfe77b4f69dbe433f1c21784">get_pil_image</a>(self):</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a709b50baede5a6a601d6226be68cd54d">   73</a></span>&#160;        <span class="keywordflow">return</span> Image.fromarray(self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a709b50baede5a6a601d6226be68cd54d">data</a>)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a741ac8d5dfe77b4f69dbe433f1c21784">   75</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a5c12fced0432b26fbedfe1248eca26a8">get_data</a>(self):</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a709b50baede5a6a601d6226be68cd54d">data</a></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a5c12fced0432b26fbedfe1248eca26a8">   78</a></span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml">Texture</a>(exportable.Exportable):</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    image_format = <span class="stringliteral">&quot;png&quot;</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml">   82</a></span>&#160;    name_struct = <span class="stringliteral">&quot;subtexture&quot;</span></div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#adf56e2cd42793343f132b0a61f9e4083">   83</a></span>&#160;    name_struct_file = <span class="stringliteral">&quot;texture&quot;</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    struct_description = (</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a021b8f95f6686610b466c2d6d62957c1">   85</a></span>&#160;        <span class="stringliteral">&quot;one sprite, as part of a texture atlas.\n&quot;</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a95e981b97a1beadfb9a324e86154aae0">   86</a></span>&#160;        <span class="stringliteral">&quot;\n&quot;</span></div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#adf99e0c65d8a38600e7b399b56bf80f7">   87</a></span>&#160;        <span class="stringliteral">&quot;this struct stores information about positions and sizes\n&quot;</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="stringliteral">&quot;of sprites included in the &#39;big texture&#39;.&quot;</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    )</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    data_format = (</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;x&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;y&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#abf8056972fb044a7de52a7ae9b8af348">   94</a></span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;w&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;h&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;cx&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        (<span class="keyword">True</span>, <span class="stringliteral">&quot;cy&quot;</span>, <span class="stringliteral">&quot;int32_t&quot;</span>),</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    )</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment"># player-specific colors will be in color blue, but with an alpha of 254</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    player_id = 1</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#ad67d62c0af627d1b83389ed9dc09b213">__init__</a>(self, input_data, palette=None, custom_cutter=None):</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a7e11e21e83e79958c73b81760679ee28">  104</a></span>&#160;        super().<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#ad67d62c0af627d1b83389ed9dc09b213">__init__</a>()</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a173fdf777356d529586708570ee36be4">spam</a>(<span class="stringliteral">&quot;creating Texture from %s&quot;</span>, <a class="code" href="namespaceopenage_1_1util.xhtml#a7bc4421a5f0f57f3a0aba3f96eb8d19c">repr</a>(input_data))</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#ad67d62c0af627d1b83389ed9dc09b213">  106</a></span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keyword">from</span> .slp <span class="keyword">import</span> SLP</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">if</span> isinstance(input_data, SLP):</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">if</span> palette <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;palette needed for SLP -&gt; texture generation&quot;</span>)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            frames = []</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">for</span> frame <span class="keywordflow">in</span> input_data.frames:</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="keywordflow">for</span> subtex <span class="keywordflow">in</span> self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#af19cc8a0f6ae7ae951086a2125419e5d">_slp_to_subtextures</a>(frame,</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                                       palette,</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                                       custom_cutter):</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    frames.append(subtex)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">elif</span> isinstance(input_data, BlendingMode):</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            frames = [</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="comment"># the hotspot is in the west corner of a tile.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml">TextureImage</a>(</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    tile.get_picture_data(),</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    hotspot=(0, TILE_HALFSIZE[<span class="stringliteral">&quot;y&quot;</span>])</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                )</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">for</span> tile <span class="keywordflow">in</span> input_data.alphamasks</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            ]</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;cannot create Texture &quot;</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                            <span class="stringliteral">&quot;from unknown source type: %s&quot;</span> % (type(input_data)))</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        self.image_data, (self.width, self.height), self.image_metadata\</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            = <a class="code" href="namespaceopenage_1_1convert_1_1texture.xhtml#af986c2ec331f19840f4dc1eee51a5961">merge_frames</a>(frames)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#af19cc8a0f6ae7ae951086a2125419e5d">_slp_to_subtextures</a>(self, frame, palette=None, custom_cutter=None):</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="stringliteral">        convert slp to subtexture or subtextures, use a palette.</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment"># TODO this needs some _serious_ performance work</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="comment"># (at least a 10x improvement, 50x would be better).</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment"># ideas: remove PIL and use libpng via CPPInterface,</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">#        cythonize parts of SLP.py</span></div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#af19cc8a0f6ae7ae951086a2125419e5d">  145</a></span>&#160;        subtex = <a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml">TextureImage</a>(</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            frame.get_picture_data(palette, self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a7e11e21e83e79958c73b81760679ee28">player_id</a>),</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            hotspot=frame.get_hotspot()</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        )</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">if</span> custom_cutter:</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="comment"># this may cut the texture into some parts</span></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> custom_cutter.cut(subtex)</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">else</span>:</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> [subtex]</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a5ab6d4ff626d130203d59cdafc830f0d">save</a>(self, targetdir, filename, meta_formats=None):</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="stringliteral">        Store the image data into the target directory path,</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral">        with given filename=&quot;dir/out.png&quot;</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral">        If metaformats are requested, export e.g. as &quot;dir/out.docx&quot;.</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(targetdir, Path):</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;util.fslike Path expected as targetdir&quot;</span>)</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(filename, str):</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;str expected as filename, not %s&quot;</span> % type(filename))</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a5ab6d4ff626d130203d59cdafc830f0d">  166</a></span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        basename, ext = os.path.splitext(filename)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment"># only allow png, although PIL could of course</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment"># do other formats.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="keywordflow">if</span> ext != <span class="stringliteral">&quot;.png&quot;</span>:</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">raise</span> ValueError(<span class="stringliteral">&quot;Filename invalid, a texture must be saved&quot;</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                             <span class="stringliteral">&quot;as &#39;filename.png&#39;, not &#39;%s&#39;&quot;</span> % (filename))</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment"># without the dot</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        ext = ext[1:]</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment"># generate PNG file</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keyword">with</span> targetdir[filename].open(<span class="stringliteral">&quot;wb&quot;</span>) <span class="keyword">as</span> imagefile:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            self.image_data.get_pil_image().<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a5ab6d4ff626d130203d59cdafc830f0d">save</a>(imagefile, ext)</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">if</span> meta_formats:</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="comment"># generate formatted texture metadata</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            formatter = data_formatter.DataFormatter()</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            formatter.add_data(self.<a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#aca0b77a05226fce8d2728f29c827754b">dump</a>(basename))</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            formatter.export(targetdir, meta_formats)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#aca0b77a05226fce8d2728f29c827754b">dump</a>(self, filename):</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">return</span> [data_definition.DataDefinition(self,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                                               self.image_metadata,</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                                               filename)]</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#aca0b77a05226fce8d2728f29c827754b">  193</a></span>&#160;    @classmethod</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">def </span><a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a4255b4b36fcc40867791d1165ac0c54f">structs</a>(cls):</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">return</span> [struct_definition.StructDefinition(cls)]</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceopenage_1_1convert_1_1texture.xhtml#af986c2ec331f19840f4dc1eee51a5961">merge_frames</a>(frames):</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a4255b4b36fcc40867791d1165ac0c54f">  199</a></span>&#160;    <span class="stringliteral">&quot;&quot;&quot;</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="stringliteral">    merge all given frames of this slp to a single image file.</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="stringliteral">    frames = [TextureImage, ...]</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="stringliteral">    returns = TextureImage, (width, height), [drawn_frames_meta]</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">if</span> len(frames) == 0:</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">raise</span> Exception(<span class="stringliteral">&quot;cannot create texture with empty input frame list&quot;</span>)</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1convert_1_1texture.xhtml#af986c2ec331f19840f4dc1eee51a5961">  210</a></span>&#160;    packer = <a class="code" href="classopenage_1_1convert_1_1binpack_1_1_best_packer.xhtml">BestPacker</a>([<a class="code" href="classopenage_1_1convert_1_1binpack_1_1_binary_tree_packer.xhtml">BinaryTreePacker</a>(margin=MARGIN, aspect_ratio=1),</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                         <a class="code" href="classopenage_1_1convert_1_1binpack_1_1_binary_tree_packer.xhtml">BinaryTreePacker</a>(margin=MARGIN,</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                                          aspect_ratio=TERRAIN_ASPECT_RATIO),</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                         <a class="code" href="classopenage_1_1convert_1_1binpack_1_1_row_packer.xhtml">RowPacker</a>(margin=MARGIN),</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                         <a class="code" href="classopenage_1_1convert_1_1binpack_1_1_column_packer.xhtml">ColumnPacker</a>(margin=MARGIN)])</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    packer.pack(frames)</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    width, height = packer.width(), packer.height()</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">assert</span> width &lt;= MAX_TEXTURE_DIMENSION, <span class="stringliteral">&quot;Texture width limit exceeded&quot;</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">assert</span> height &lt;= MAX_TEXTURE_DIMENSION, <span class="stringliteral">&quot;Texture height limit exceeded&quot;</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    area = sum(block.width * block.height <span class="keywordflow">for</span> block <span class="keywordflow">in</span> frames)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    used_area = width * height</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    efficiency = area / used_area</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a173fdf777356d529586708570ee36be4">spam</a>(<span class="stringliteral">&quot;merging %d frames to %dx%d atlas, efficiency %.3f.&quot;</span>,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;         len(frames), width, height, efficiency)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    atlas_data = numpy.zeros((height, width, 4), dtype=numpy.uint8)</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    drawn_frames_meta = []</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">for</span> sub_frame <span class="keywordflow">in</span> frames:</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        sub_w = sub_frame.width</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        sub_h = sub_frame.height</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        pos_x, pos_y = packer.pos(sub_frame)</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a173fdf777356d529586708570ee36be4">spam</a>(<span class="stringliteral">&quot;drawing frame %03d on atlas at %d x %d...&quot;</span>,</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;             len(drawn_frames_meta), pos_x, pos_y)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment"># draw the subtexture on atlas_data</span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        atlas_data[pos_y:pos_y + sub_h, pos_x:pos_x + sub_w] = sub_frame.data</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment"># generate subtexture meta information object</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        hotspot_x, hotspot_y = sub_frame.hotspot</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        drawn_frames_meta.append(<a class="code" href="namespaceopenage_1_1convert_1_1texture.xhtml#a0fee08e92bb6bd623d2a15d56af23aed">subtexture_meta</a>(pos_x, pos_y,</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                                 sub_w, sub_h,</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                                 hotspot_x, hotspot_y))</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    atlas = <a class="code" href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml">TextureImage</a>(atlas_data)</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a173fdf777356d529586708570ee36be4">spam</a>(<span class="stringliteral">&quot;successfully merged %d frames to atlas.&quot;</span>, len(frames))</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">return</span> atlas, (width, height), drawn_frames_meta</div><div class="ttc" id="classopenage_1_1convert_1_1binpack_1_1_row_packer_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1binpack_1_1_row_packer.xhtml">openage.convert.binpack.RowPacker</a></div><div class="ttdoc">Packs blocks into rows, greedily trying to minimize the maximum width.</div><div class="ttdef"><b>Definition:</b> <a href="binpack_8py_source.xhtml#l00050">binpack.py:50</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml_af19cc8a0f6ae7ae951086a2125419e5d"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#af19cc8a0f6ae7ae951086a2125419e5d">openage.convert.texture.Texture._slp_to_subtextures</a></div><div class="ttdeci">def _slp_to_subtextures(self, frame, palette=None, custom_cutter=None)</div><div class="ttdoc">convert slp to subtexture or subtextures, use a palette.</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00145">texture.py:145</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml_a709b50baede5a6a601d6226be68cd54d"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a709b50baede5a6a601d6226be68cd54d">openage.convert.texture.TextureImage.data</a></div><div class="ttdeci">data</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00073">texture.py:73</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml_a5ab6d4ff626d130203d59cdafc830f0d"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a5ab6d4ff626d130203d59cdafc830f0d">openage.convert.texture.Texture.save</a></div><div class="ttdeci">def save(self, targetdir, filename, meta_formats=None)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00166">texture.py:166</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml">openage.convert.texture.TextureImage</a></div><div class="ttdoc">represents a image created from a (r,g,b,a) matrix.</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00049">texture.py:49</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1binpack_1_1_column_packer_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1binpack_1_1_column_packer.xhtml">openage.convert.binpack.ColumnPacker</a></div><div class="ttdoc">Packs blocks into columns, greedily trying to minimize the maximum height.</div><div class="ttdef"><b>Definition:</b> <a href="binpack_8py_source.xhtml#l00078">binpack.py:78</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml_adee0bd6eaa5074d6e4b7c4e07d7e36d6"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#adee0bd6eaa5074d6e4b7c4e07d7e36d6">openage.convert.texture.TextureImage.hotspot</a></div><div class="ttdeci">hotspot</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00069">texture.py:69</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1binpack_1_1_best_packer_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1binpack_1_1_best_packer.xhtml">openage.convert.binpack.BestPacker</a></div><div class="ttdoc">Chooses the best result from all the given packers.</div><div class="ttdef"><b>Definition:</b> <a href="binpack_8py_source.xhtml#l00104">binpack.py:104</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a173fdf777356d529586708570ee36be4"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a173fdf777356d529586708570ee36be4">openage::log.spam</a></div><div class="ttdeci">def spam(msg, *args, **kwargs)</div><div class="ttdoc">spam message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00104">__init__.py:104</a></div></div>
<div class="ttc" id="namespaceopenage_1_1convert_1_1texture_xhtml_af986c2ec331f19840f4dc1eee51a5961"><div class="ttname"><a href="namespaceopenage_1_1convert_1_1texture.xhtml#af986c2ec331f19840f4dc1eee51a5961">openage.convert.texture.merge_frames</a></div><div class="ttdeci">def merge_frames(frames)</div><div class="ttdoc">merge all given frames of this slp to a single image file.</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00210">texture.py:210</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml_ad67d62c0af627d1b83389ed9dc09b213"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#ad67d62c0af627d1b83389ed9dc09b213">openage.convert.texture.Texture.__init__</a></div><div class="ttdeci">def __init__(self, input_data, palette=None, custom_cutter=None)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00106">texture.py:106</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml_a7e11e21e83e79958c73b81760679ee28"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a7e11e21e83e79958c73b81760679ee28">openage.convert.texture.Texture.player_id</a></div><div class="ttdeci">int player_id</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00104">texture.py:104</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml_a4255b4b36fcc40867791d1165ac0c54f"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#a4255b4b36fcc40867791d1165ac0c54f">openage.convert.texture.Texture.structs</a></div><div class="ttdeci">def structs(cls)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00199">texture.py:199</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml_aca0b77a05226fce8d2728f29c827754b"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml#aca0b77a05226fce8d2728f29c827754b">openage.convert.texture.Texture.dump</a></div><div class="ttdeci">def dump(self, filename)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00193">texture.py:193</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a7bc4421a5f0f57f3a0aba3f96eb8d19c"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a7bc4421a5f0f57f3a0aba3f96eb8d19c">openage::util::repr</a></div><div class="ttdeci">std::string repr(const std::string &amp;arg)</div><div class="ttdef"><b>Definition:</b> <a href="repr_8cpp_source.xhtml#l00012">repr.cpp:12</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml_a6ab8f5bb89e0e62dced8b1a4643743db"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a6ab8f5bb89e0e62dced8b1a4643743db">openage.convert.texture.TextureImage.height</a></div><div class="ttdeci">height</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00064">texture.py:64</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml_a741ac8d5dfe77b4f69dbe433f1c21784"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a741ac8d5dfe77b4f69dbe433f1c21784">openage.convert.texture.TextureImage.get_pil_image</a></div><div class="ttdeci">def get_pil_image(self)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00075">texture.py:75</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml_a5c12fced0432b26fbedfe1248eca26a8"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#a5c12fced0432b26fbedfe1248eca26a8">openage.convert.texture.TextureImage.get_data</a></div><div class="ttdeci">def get_data(self)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00078">texture.py:78</a></div></div>
<div class="ttc" id="namespaceopenage_1_1convert_1_1texture_xhtml_a0fee08e92bb6bd623d2a15d56af23aed"><div class="ttname"><a href="namespaceopenage_1_1convert_1_1texture.xhtml#a0fee08e92bb6bd623d2a15d56af23aed">openage.convert.texture.subtexture_meta</a></div><div class="ttdeci">def subtexture_meta(tx, ty, hx, hy, cx, cy)</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00033">texture.py:33</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture.xhtml">openage.convert.texture.Texture</a></div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00082">texture.py:82</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1texture_1_1_texture_image_xhtml_aebbd31c5d38e7183cfc4b73384f4b97e"><div class="ttname"><a href="classopenage_1_1convert_1_1texture_1_1_texture_image.xhtml#aebbd31c5d38e7183cfc4b73384f4b97e">openage.convert.texture.TextureImage.width</a></div><div class="ttdeci">width</div><div class="ttdef"><b>Definition:</b> <a href="texture_8py_source.xhtml#l00063">texture.py:63</a></div></div>
<div class="ttc" id="classopenage_1_1convert_1_1binpack_1_1_binary_tree_packer_xhtml"><div class="ttname"><a href="classopenage_1_1convert_1_1binpack_1_1_binary_tree_packer.xhtml">openage.convert.binpack.BinaryTreePacker</a></div><div class="ttdoc">Binary tree bin packing strategy.</div><div class="ttdef"><b>Definition:</b> <a href="binpack_8py_source.xhtml#l00159">binpack.py:159</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_5432d0784b34fd012a3258f7fe2e6e8b.xhtml">openage</a></li><li class="navelem"><a class="el" href="dir_f8c2790f072062ca31393539e9a4c2e7.xhtml">convert</a></li><li class="navelem"><a class="el" href="texture_8py.xhtml">texture.py</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
