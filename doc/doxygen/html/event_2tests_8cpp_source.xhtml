<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/event/tests.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('event_2tests_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">tests.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event_2tests_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2017-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span> <span class="comment">// for strcmp</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;../testing/testing.h&quot;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;../log/log.h&quot;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_2loop_8h.xhtml">loop.h</a>&quot;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_2event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="eventtarget_8h.xhtml">eventtarget.h</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="state_8h.xhtml">state.h</a>&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1event_1_1tests.xhtml">   15</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1event_1_1tests.xhtml">openage::event::tests</a> {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">// We have to create a temporary State due to the magic of C++</span></div><div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml">   18</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml">TestState</a> : <span class="keyword">public</span> <a class="code" href="classopenage_1_1event_1_1_state.xhtml">State</a> {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml">   20</a></span>&#160;    <span class="keyword">class </span><a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml">TestObject</a> : <span class="keyword">public</span> <a class="code" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a> {</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab15e85629de1bfa3aa13eb3efa962c56">   21</a></span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab15e85629de1bfa3aa13eb3efa962c56">_id</a>;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab4d98e65c5b822c595aecc46618ebd55">   23</a></span>&#160;        <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab4d98e65c5b822c595aecc46618ebd55">TestObject</a>(<span class="keyword">const</span> std::shared_ptr&lt;Loop&gt; &amp;<a class="code" href="classopenage_1_1event_1_1_event_target.xhtml#ab3f3bf3292bc7fc3566b48b2bddd86da">loop</a>, <span class="keywordtype">int</span> <span class="keywordtype">id</span>)</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;            :</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;            <a class="code" href="classopenage_1_1event_1_1_event_target.xhtml">EventTarget</a>(<a class="code" href="classopenage_1_1event_1_1_event_target.xhtml#ab3f3bf3292bc7fc3566b48b2bddd86da">loop</a>),</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;            <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab15e85629de1bfa3aa13eb3efa962c56">_id</a>{<span class="keywordtype">id</span>},</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;            <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a02fdf8df0c2dfef1f518a478af18da41">number</a>(0) {}</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#aa34202033ff483893bb1f253acea5cb5">   29</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#aa34202033ff483893bb1f253acea5cb5">set_number</a>(<span class="keywordtype">int</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a02fdf8df0c2dfef1f518a478af18da41">number</a>, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;time) {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            this-&gt;number = <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a02fdf8df0c2dfef1f518a478af18da41">number</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1event_1_1_event_target.xhtml#a6da66e1f05d92d87ce931d06204b6d9b">changes</a>(time + <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">curve::time_t::from_double</a>(1));</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        }</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a6cd1784f8b74787701fa9813a4068e1c">   34</a></span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a6cd1784f8b74787701fa9813a4068e1c">id</a>()<span class="keyword"> const override </span>{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab15e85629de1bfa3aa13eb3efa962c56">_id</a>;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a84664c0a3a47e8029ce2c705229e385b">   38</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a84664c0a3a47e8029ce2c705229e385b">test_trigger</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;time) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1event_1_1_event_target.xhtml#a69453fddcf70ac72c863f61e25bfb786">trigger</a>(time);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        }</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a02fdf8df0c2dfef1f518a478af18da41">   42</a></span>&#160;        <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a02fdf8df0c2dfef1f518a478af18da41">number</a>;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    };</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3a0b7e55abbb96de06b5ecdcc823299c">   45</a></span>&#160;    <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3a0b7e55abbb96de06b5ecdcc823299c">TestState</a>(<span class="keyword">const</span> std::shared_ptr&lt;Loop&gt; &amp;loop)</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        :</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <a class="code" href="classopenage_1_1event_1_1_state.xhtml">State</a>(loop),</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a85fc736846c1a53eed28c4b0f02bbd09">objectA</a>(<a class="code" href="namespacestd.xhtml">std</a>::make_shared&lt;<a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml">TestObject</a>&gt;(loop, 0)) ,</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3106a6af096add1a6a2a6cc663fe05c6">objectB</a>(<a class="code" href="namespacestd.xhtml">std</a>::make_shared&lt;<a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml">TestObject</a>&gt;(loop, 1)) {}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a85fc736846c1a53eed28c4b0f02bbd09">   51</a></span>&#160;    std::shared_ptr&lt;TestObject&gt; <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a85fc736846c1a53eed28c4b0f02bbd09">objectA</a>;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3106a6af096add1a6a2a6cc663fe05c6">   52</a></span>&#160;    std::shared_ptr&lt;TestObject&gt; <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3106a6af096add1a6a2a6cc663fe05c6">objectB</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml">   54</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml">traceelement</a> {</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a83ebdbc18d10c912a9940a8c4e15c545">   55</a></span>&#160;        <a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a83ebdbc18d10c912a9940a8c4e15c545">traceelement</a>(<span class="keyword">const</span> std::string &amp;event, <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> <a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a259e055907453f783d9bbe82acc1c89b">time</a>)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            :</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a259e055907453f783d9bbe82acc1c89b">time</a>{<a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a259e055907453f783d9bbe82acc1c89b">time</a>},</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#aac3d3b574662dc79341881cea4d17692">name</a>{<span class="keyword">event</span>} {}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a259e055907453f783d9bbe82acc1c89b">   60</a></span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> <a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a259e055907453f783d9bbe82acc1c89b">time</a>;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#aac3d3b574662dc79341881cea4d17692">   61</a></span>&#160;        std::string <a class="code" href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#aac3d3b574662dc79341881cea4d17692">name</a>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    };</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a45754e041824ad45c8824a61ede82021">   64</a></span>&#160;    std::list&lt;traceelement&gt; <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a45754e041824ad45c8824a61ede82021">trace</a>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#ae1464903f08fcc8b86ab86fcc995334e">   66</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#ae1464903f08fcc8b86ab86fcc995334e">log_dbg</a>() {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Trace: &quot;</span>);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : this-&gt;trace) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;T: &quot;</span> &lt;&lt; e.time &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; e.name);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;};</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml">   75</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml">TestEventClass</a> : <span class="keyword">public</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> {</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a49ae0770cb58dbbc88f900581e13444d">   76</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a49ae0770cb58dbbc88f900581e13444d">idx</a>;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a58face639f1698e000f153c478cca2e8">   78</a></span>&#160;    <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a58face639f1698e000f153c478cca2e8">TestEventClass</a>(<span class="keyword">const</span> std::string &amp;name, <span class="keywordtype">int</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a49ae0770cb58dbbc88f900581e13444d">idx</a>)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        :</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>(name, <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>::<a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717">trigger_type</a>::DEPENDENCY),</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a49ae0770cb58dbbc88f900581e13444d">idx</a>{<a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a49ae0770cb58dbbc88f900581e13444d">idx</a>} {}</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a40a7e1ee67df51d9bc9ffb297b13d9dd">   83</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a40a7e1ee67df51d9bc9ffb297b13d9dd">setup_event</a>(<span class="keyword">const</span> std::shared_ptr&lt;Event&gt; &amp;event,</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                     <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;gstate)<span class="keyword"> override </span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keyword">auto</span> state = std::dynamic_pointer_cast&lt;TestState&gt;(gstate);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">switch</span>(this-&gt;idx) {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">case</span> 0:</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="comment">// let the modification of objectA depend on objectB</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keyword">event</span>-&gt;depend_on(state-&gt;objectB);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> 1:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="comment">// let the modification of objectB depend on objectA</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="keyword">event</span>-&gt;depend_on(state-&gt;objectA);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a6d3145302d7a6910d0e8e30d42380cc5">  100</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a6d3145302d7a6910d0e8e30d42380cc5">invoke</a>(<a class="code" href="classopenage_1_1event_1_1_loop.xhtml">Loop</a> &amp;<span class="comment">/*loop*/</span>,</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;target,</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;gstate,</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;time,</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                <span class="keyword">const</span> <a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;<span class="comment">/*param*/</span>)<span class="keyword"> override </span>{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keyword">auto</span> state = std::dynamic_pointer_cast&lt;TestState&gt;(gstate);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">switch</span> (this-&gt;idx) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">case</span> 0: {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keyword">auto</span> t = std::dynamic_pointer_cast&lt;TestState::TestObject&gt;(target);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            state-&gt;objectA-&gt;set_number(t-&gt;number + 1, time);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;I am Event A. Setting number to &quot;</span> &lt;&lt; state-&gt;objectA-&gt;number);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            state-&gt;trace.emplace_back(<span class="stringliteral">&quot;A&quot;</span>, time);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        } <span class="keywordflow">break</span>;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">case</span> 1: {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keyword">auto</span> t = std::dynamic_pointer_cast&lt;TestState::TestObject&gt;(target);</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            state-&gt;objectB-&gt;set_number(t-&gt;number + 1, time);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;I am Event B. Setting number to &quot;</span> &lt;&lt; state-&gt;objectB-&gt;number);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            state-&gt;trace.emplace_back(<span class="stringliteral">&quot;B&quot;</span>, time);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        } <span class="keywordflow">break</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#aa7b77dcf1f1c8665b824c670aab81f88">  125</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#aa7b77dcf1f1c8665b824c670aab81f88">predict_invoke_time</a>(<span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                                      <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;at)<span class="keyword"> override </span>{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="keywordflow">return</span> at + <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">curve::time_t::from_double</a>(2);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml">  133</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml">TestEventClassTwo</a> : <span class="keyword">public</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#a49c6a614f3999462bd75a7465432cd7a">  135</a></span>&#160;    <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#a49c6a614f3999462bd75a7465432cd7a">TestEventClassTwo</a>(<span class="keyword">const</span> std::string &amp;name)</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        :</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>(name, <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>::<a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717">trigger_type</a>::DEPENDENCY) {}</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#a1d8b2054cc30b622db08b26bc12e9b46">  139</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#a1d8b2054cc30b622db08b26bc12e9b46">setup_event</a>(<span class="keyword">const</span> std::shared_ptr&lt;Event&gt; &amp;target,</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                     <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;gstate)<span class="keyword"> override </span>{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keyword">auto</span> state = std::dynamic_pointer_cast&lt;TestState&gt;(gstate);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        target-&gt;depend_on(state-&gt;objectA);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#af47dbc011710ba5e6986493b63dead0e">  146</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#af47dbc011710ba5e6986493b63dead0e">invoke</a>(<a class="code" href="classopenage_1_1event_1_1_loop.xhtml">Loop</a> &amp;<span class="comment">/*loop*/</span>,</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;gtarget,</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;gstate,</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;time,</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">const</span> <a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;<span class="comment">/*param*/</span>)<span class="keyword"> override </span>{</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keyword">auto</span> state = std::dynamic_pointer_cast&lt;TestState&gt;(gstate);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keyword">auto</span> target = std::dynamic_pointer_cast&lt;TestState::TestObject&gt;(gtarget);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        state-&gt;objectB-&gt;set_number(target-&gt;number + 1, time);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;I am EventClassTwo. Setting B.number to &quot;</span> &lt;&lt; state-&gt;objectB-&gt;number);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        state-&gt;trace.emplace_back(<span class="stringliteral">&quot;B&quot;</span>, time);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#aaaeabcec80a4ee92ce170b3ff509afea">  160</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> <a class="code" href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#aaaeabcec80a4ee92ce170b3ff509afea">predict_invoke_time</a>(<span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                                      <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;at)<span class="keyword"> override </span>{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment">// TODO recalculate a hit time</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">return</span> at + <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">curve::time_t::from_double</a>(1);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;};</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml">  169</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml">EventTypeTestClass</a> : <span class="keyword">public</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#a5852467918e6f7a6c966dd52233abd28">  171</a></span>&#160;    <a class="code" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#a5852467918e6f7a6c966dd52233abd28">EventTypeTestClass</a>(<span class="keyword">const</span> std::string &amp;name, <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717">EventClass::trigger_type</a> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a8a540e9ae9989e2fdeaa9139e00370fa">type</a>)</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        :</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>(name, <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a8a540e9ae9989e2fdeaa9139e00370fa">type</a>) {}</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#acadce4dd71ef75305e148c0a98b42163">  175</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#acadce4dd71ef75305e148c0a98b42163">setup_event</a>(<span class="keyword">const</span> std::shared_ptr&lt;Event&gt; &amp;event,</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                     <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;gstate)<span class="keyword"> override </span>{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;EventTypeTestClass-&quot;</span> &lt;&lt; this-&gt;<span class="keywordtype">id</span>() &lt;&lt; <span class="stringliteral">&quot; setting up new event&quot;</span>);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="comment">// let all events depend on objectA</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keyword">auto</span> state = std::dynamic_pointer_cast&lt;TestState&gt;(gstate);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keyword">event</span>-&gt;depend_on(state-&gt;objectA);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#ac71424a13be1323a33f6f538a4d8a3e7">  185</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#ac71424a13be1323a33f6f538a4d8a3e7">invoke</a>(<a class="code" href="classopenage_1_1event_1_1_loop.xhtml">Loop</a> &amp;<span class="comment">/*loop*/</span>,</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;target,</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;gstate,</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;time,</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keyword">const</span> <a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;<span class="comment">/*param*/</span>)<span class="keyword"> override </span>{</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keyword">auto</span> state = std::dynamic_pointer_cast&lt;TestState&gt;(gstate);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keyword">auto</span> t = std::dynamic_pointer_cast&lt;TestState::TestObject&gt;(target);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;EventTypeTestClass-&quot;</span> &lt;&lt; this-&gt;<span class="keywordtype">id</span>() &lt;&lt; <span class="stringliteral">&quot; got called on &quot;</span> &lt;&lt; t-&gt;id()</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                 &lt;&lt; <span class="stringliteral">&quot; with number &quot;</span> &lt;&lt; t-&gt;number &lt;&lt; <span class="stringliteral">&quot; at t=&quot;</span> &lt;&lt; time);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        state-&gt;trace.emplace_back(this-&gt;<span class="keywordtype">id</span>(), time);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#a5321e145f5eea940554f18a71aa1b639">  200</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> <a class="code" href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#a5321e145f5eea940554f18a71aa1b639">predict_invoke_time</a>(<span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                      <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                                      <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;at)<span class="keyword"> override </span>{</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">switch</span>(this-&gt;<a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a8a540e9ae9989e2fdeaa9139e00370fa">type</a>) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">EventClass::trigger_type::DEPENDENCY</a>:</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="comment">// Execute 1 after the change (usually it is neccessary to recalculate a collision</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <span class="keywordflow">return</span> at + <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">curve::time_t::from_double</a>(1);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">EventClass::trigger_type::DEPENDENCY_IMMEDIATELY</a>:</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;DEPENDENCY_IMMEDIATELY does not recalculate time!&quot;</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">EventClass::trigger_type::TRIGGER</a>:</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;TRIGGER does not recalculate time!&quot;</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">EventClass::trigger_type::REPEAT</a>:</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="comment">// This will force the execution every 5ms</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordflow">return</span> at + <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">curve::time_t::from_double</a>(5);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">EventClass::trigger_type::ONCE</a>:</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">return</span> 10;  <span class="comment">// even if data changed it will happen at the given time!</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">return</span> at;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;};</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1event_1_1tests.xhtml#ab950ba5156aefba0f5ecaab970fcc1aa">  228</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="namespaceopenage_1_1event_1_1tests.xhtml#ab950ba5156aefba0f5ecaab970fcc1aa">eventtrigger</a>() {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Basic Ping Pong ] ------------&quot;</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="comment">// test destruction</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    std::weak_ptr&lt;TestState&gt; destruction_test_state;</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="comment">// Test with one event class</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClass&gt;(<span class="stringliteral">&quot;test_on_A&quot;</span>, 0));</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClass&gt;(<span class="stringliteral">&quot;test_on_B&quot;</span>, 1));</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keyword">auto</span> gstate = std::static_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        destruction_test_state = state;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="comment">// One must not start the game at 0 - this leads to randomness in execution</span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_B&quot;</span>, state-&gt;objectB, gstate, 1);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_A&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="comment">// It is expected, that A and B hand over the &quot;changed&quot; events between each other</span></div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        state-&gt;objectA-&gt;set_number(0, 0);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="comment">// run 10 iterations, for times 2, 4, ... 20</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 10; ++i) {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            loop-&gt;reach_time((i + 1) * 2, gstate);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        state-&gt;log_dbg();</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">if</span> (state-&gt;trace.size() &lt; 6) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;not enough items collected&quot;</span>);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> last_time = 0;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : state-&gt;trace) {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">if</span> (last_time &gt; e.time) {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;You broke the time continuum: one shall not execute randomly!&quot;</span>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            last_time = e.time;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">switch</span>(i) {</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">case</span> 0: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 3); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            <span class="keywordflow">case</span> 1: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 6); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">case</span> 2: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 9); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">case</span> 3: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 12); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            <span class="keywordflow">case</span> 4: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 15); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">case</span> 5: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 18); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            <span class="keywordflow">default</span>: <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Too many elements in stack trace&quot;</span>); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            i += 1;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        }</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">if</span> (!destruction_test_state.expired()) {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Test Failed because TestState was not automatically destructed&quot;</span>);</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Two Event Ping Pong ] ------------&quot;</span>);</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="comment">// Test with two event classes to check interplay</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClass&gt;(<span class="stringliteral">&quot;test_on_A&quot;</span>, 0));</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;TestEventClassTwo&gt;(<span class="stringliteral">&quot;test_on_B&quot;</span>));</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keyword">auto</span> gstate = std::static_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="comment">// One must not start the game at 0 - this leads to randomness in execution</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_B&quot;</span>, state-&gt;objectB, gstate, 1);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;test_on_A&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="comment">// It is expected, that A and B hand over the &quot;changed&quot; events between each other</span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        state-&gt;objectA-&gt;set_number(0, 1);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="comment">// run 10 iterations, for times 2, 4, ... 20</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 10; ++i) {</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            loop-&gt;reach_time((i + 1) * 2, gstate);</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        }</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        state-&gt;log_dbg();</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">if</span> (state-&gt;trace.size() &lt; 7) {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;not enough items collected&quot;</span>);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        }</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keywordtype">int</span> i = 0;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> last_time = 0;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : state-&gt;trace) {</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">if</span> (last_time &gt; e.time) {</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;You broke the time continuum: one shall not execute randomly!&quot;</span>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            }</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            last_time = e.time;</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">switch</span>(i) {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;            <span class="keywordflow">case</span> 0: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 3); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">case</span> 1: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 6); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;            <span class="keywordflow">case</span> 2: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 8); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;            <span class="keywordflow">case</span> 3: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 11); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">case</span> 4: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 13); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">case</span> 5: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;A&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 16); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="keywordflow">case</span> 6: <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.name, <span class="stringliteral">&quot;B&quot;</span>); <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(e.time, 18); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">default</span>: <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Too many elements in stack trace&quot;</span>); <span class="keywordflow">break</span>;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            i += 1;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Complex Event Types ] ------------&quot;</span>);</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="comment">// Now set up a more complex test to test the different event types</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                     <span class="stringliteral">&quot;object_modify&quot;</span>,</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                     <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">EventClass::trigger_type::DEPENDENCY</a>));</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                     <span class="stringliteral">&quot;object_modify_immediately&quot;</span>,</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                     <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">EventClass::trigger_type::DEPENDENCY_IMMEDIATELY</a>));</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                     <span class="stringliteral">&quot;object_trigger&quot;</span>,</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                     <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">EventClass::trigger_type::TRIGGER</a>));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                     <span class="stringliteral">&quot;repeat_exec&quot;</span>,</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                     <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">EventClass::trigger_type::REPEAT</a>));</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventTypeTestClass&gt;(</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                                     <span class="stringliteral">&quot;once&quot;</span>,</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                     <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">EventClass::trigger_type::ONCE</a>));</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        <span class="keyword">auto</span> gstate = std::static_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="comment">// One must not start the game at 0 - this leads to randomness in execution</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="comment">// -------------------------------------</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="comment">// Add some events to be invoked:</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="comment">// execs whenever objectA is changed + 1</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;object_modify&quot;</span>, state-&gt;objectA, gstate, 4);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="comment">// execs whenever objectA is changed + 1,</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="comment">// does not use a newly predicted time as object_modify_immediately</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;object_modify_immediately&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="comment">// execs at t=x when test_trigger(x) is invoked on objectA</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;object_trigger&quot;</span>, state-&gt;objectA, gstate, 1);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="comment">// execs periodically at t=n*5</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;repeat_exec&quot;</span>, state-&gt;objectA, gstate, 0);</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="comment">// executes just once at t=10</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;once&quot;</span>, state-&gt;objectA, gstate, 10);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;##### SETUP DONE &quot;</span>);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="comment">// Without anything happening and until time 0, nothing will happen</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        {</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            <span class="comment">// Expected: object_modify_immediately(t=1) [ we changed data at t=1 ]</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            loop-&gt;reach_time(0, gstate);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        state-&gt;objectA-&gt;set_number(0, 1);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        {</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="comment">// Evaluate the state until t=2</span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            <span class="comment">// Expected: object_modify_immediately(t=(1+2)),</span></div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="comment">// because we set the number at t=1,</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="comment">// which then creates a invoke time of t+1 == 2</span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            loop-&gt;reach_time(2, gstate);</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 1);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.front().name, <span class="stringliteral">&quot;object_modify_immediately&quot;</span>);</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.front().time, 2);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        {</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            <span class="comment">// executing to t=2 again should yield nothing,</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="comment">// we reached t=2 in the step before already</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;            loop-&gt;reach_time(2, gstate);</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.empty(), <span class="keyword">true</span>);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;##### INIT DONE &quot;</span>);</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Triggering Keyframe at 1&quot;</span>);</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        state-&gt;objectA-&gt;test_trigger(1);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        {</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="comment">// Expected: object_trigger(1)</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            loop-&gt;reach_time(2, gstate);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            state-&gt;log_dbg();</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 1);</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">if</span> (state-&gt;trace.front().name != <span class="stringliteral">&quot;object_trigger&quot;</span>)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; state-&gt;trace.front().name</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;, expected object_trigger&quot;</span>);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.front().time, 1);</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        }</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="comment">// Expected: object_modify(1+1+1=3) and repeat_exec(5)</span></div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            loop-&gt;reach_time(5, gstate);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 2);</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keyword">auto</span> it = state-&gt;trace.begin();</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;object_modify&quot;</span>)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected object_modify&quot;</span>);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 3);</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            it++;</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;repeat_exec&quot;</span>)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected repeat_exec&quot;</span>);</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 5);</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="comment">// Expected: repeat_exec(10), once(10)</span></div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            loop-&gt;reach_time(11, gstate);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 2);</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keyword">auto</span> it = state-&gt;trace.begin();</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;repeat_exec&quot;</span>)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected repeat_exec&quot;</span>);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 10);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            it++;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;once&quot;</span>)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected once&quot;</span>);</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 10);</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        }</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;        <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;changing the value at t=12&quot;</span>);</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        state-&gt;objectA-&gt;set_number(1, 12);</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;            <span class="comment">// Expected: object_modify_immediately(12+1=13), object_modify(12+1+1=14)</span></div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="comment">// object_modify_immediately is executed at the time of change (12+1)</span></div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            <span class="comment">// whereas object_modify is executed with a newly predicted time (that is +1)</span></div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            loop-&gt;reach_time(15, gstate);</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(state-&gt;trace.size(), 3);</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            <span class="keyword">auto</span> it = state-&gt;trace.begin();</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;object_modify_immediately&quot;</span>)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected object_modify_immediately&quot;</span>);</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 13);</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            it++;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;object_modify&quot;</span>)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected object_modify&quot;</span>);</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 14);</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            it++;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <span class="keywordflow">if</span> (it-&gt;name != <span class="stringliteral">&quot;repeat_exec&quot;</span>)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <a class="code" href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a>(<span class="stringliteral">&quot;Unexpected Event: &quot;</span> &lt;&lt; it-&gt;name &lt;&lt; <span class="stringliteral">&quot; expected repeat_exec&quot;</span>);</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(it-&gt;time, 15);</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            state-&gt;trace.clear();</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        }</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    }</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;------------- [ Starting Test: Event parameter Mapping ] ------------&quot;</span>);</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keyword">class </span>EventParameterMapTestClass : <span class="keyword">public</span> <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a> {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keyword">public</span>:</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            EventParameterMapTestClass()</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                :</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml">EventClass</a>(<span class="stringliteral">&quot;EventParameterMap&quot;</span>, <a class="code" href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">EventClass::trigger_type::ONCE</a>) {}</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="keywordtype">void</span> setup_event(<span class="keyword">const</span> std::shared_ptr&lt;Event&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                             <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordtype">void</span> invoke(<a class="code" href="classopenage_1_1event_1_1_loop.xhtml">Loop</a> &amp;<span class="comment">/*loop*/</span>,</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                        <span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                        <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;<span class="comment">/*time*/</span>,</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                        <span class="keyword">const</span> <a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">EventClass::param_map</a> &amp;param)<span class="keyword"> override </span>{</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing unknown parameter&quot;</span>);</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a4c7f73fe4acc0ed28e06ef69f07ef26e">contains</a>(<span class="stringliteral">&quot;tomato&quot;</span>), <span class="keyword">false</span>);</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#aeaf58d316c8416ac8d8597b6f635973d">check_type</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;tomato&quot;</span>), <span class="keyword">false</span>);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;tomato&quot;</span>, 1), 1);</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;tomato&quot;</span>), 0);</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;std::string&gt;(<span class="stringliteral">&quot;tomato&quot;</span>, <span class="stringliteral">&quot;test&quot;</span>), <span class="stringliteral">&quot;test&quot;</span>);</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;std::string&gt;(<span class="stringliteral">&quot;tomato&quot;</span>), <span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing Integer parameter&quot;</span>);</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a4c7f73fe4acc0ed28e06ef69f07ef26e">contains</a>(<span class="stringliteral">&quot;testInt&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#aeaf58d316c8416ac8d8597b6f635973d">check_type</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;testInt&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;<span class="keywordtype">int</span>&gt;(<span class="stringliteral">&quot;testInt&quot;</span>), 1);</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                <span class="comment">// FIXME: This should hurt you!!!</span></div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;std::string&gt;(<span class="stringliteral">&quot;testInt&quot;</span>, <span class="stringliteral">&quot;int&quot;</span>), <span class="stringliteral">&quot;int&quot;</span>);</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing char* parameter&quot;</span>);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a4c7f73fe4acc0ed28e06ef69f07ef26e">contains</a>(<span class="stringliteral">&quot;testString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#aeaf58d316c8416ac8d8597b6f635973d">check_type</a>&lt;<span class="keyword">const</span> <span class="keywordtype">char</span>*&gt;(<span class="stringliteral">&quot;testString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(strcmp(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;<span class="keyword">const</span> <span class="keywordtype">char</span>*&gt;(<span class="stringliteral">&quot;testString&quot;</span>), <span class="stringliteral">&quot;string&quot;</span>), 0);</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                <a class="code" href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">log::log</a>(<a class="code" href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a> &lt;&lt; <span class="stringliteral">&quot;Testing std::string parameter&quot;</span>);</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a4c7f73fe4acc0ed28e06ef69f07ef26e">contains</a>(<span class="stringliteral">&quot;testStdString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#aeaf58d316c8416ac8d8597b6f635973d">check_type</a>&lt;std::string&gt;(<span class="stringliteral">&quot;testStdString&quot;</span>), <span class="keyword">true</span>);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                <a class="code" href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a>(param.<a class="code" href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">get</a>&lt;std::string&gt;(<span class="stringliteral">&quot;testStdString&quot;</span>), <span class="stringliteral">&quot;stdstring&quot;</span>);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;            }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;            <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> predict_invoke_time(<span class="keyword">const</span> std::shared_ptr&lt;EventTarget&gt; &amp;<span class="comment">/*target*/</span>,</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                                              <span class="keyword">const</span> std::shared_ptr&lt;State&gt; &amp;<span class="comment">/*state*/</span>,</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                                              <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_fixed_point.xhtml">curve::time_t</a> &amp;at)<span class="keyword"> override </span>{</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                <span class="keywordflow">return</span> at;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            }</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        };</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <span class="keyword">using namespace </span>std::literals;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="keyword">auto</span> loop = std::make_shared&lt;Loop&gt;();</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        loop-&gt;add_event_class(std::make_shared&lt;EventParameterMapTestClass&gt;());</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <span class="keyword">auto</span> state = std::make_shared&lt;TestState&gt;(loop);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="keyword">auto</span> gstate = std::dynamic_pointer_cast&lt;State&gt;(state);</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        loop-&gt;create_event(<span class="stringliteral">&quot;EventParameterMap&quot;</span>, state-&gt;objectA, gstate, 1, {</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                {<span class="stringliteral">&quot;testInt&quot;</span>, 1},</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                {<span class="stringliteral">&quot;testStdString&quot;</span>, <span class="stringliteral">&quot;stdstring&quot;</span>s},</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                {<span class="stringliteral">&quot;testString&quot;</span>, <span class="stringliteral">&quot;string&quot;</span>}</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;            }</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        );</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        loop-&gt;reach_time(10, gstate);</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    }</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;}</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;} <span class="comment">// namespace openage::event::tests</span></div><div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_xhtml_a3a0b7e55abbb96de06b5ecdcc823299c"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3a0b7e55abbb96de06b5ecdcc823299c">openage::event::tests::TestState::TestState</a></div><div class="ttdeci">TestState(const std::shared_ptr&lt; Loop &gt; &amp;loop)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00045">tests.cpp:45</a></div></div>
<div class="ttc" id="event_2loop_8h_xhtml"><div class="ttname"><a href="event_2loop_8h.xhtml">loop.h</a></div></div>
<div class="ttc" id="event_2event_8h_xhtml"><div class="ttname"><a href="event_2event_8h.xhtml">event.h</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_two_xhtml_af47dbc011710ba5e6986493b63dead0e"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#af47dbc011710ba5e6986493b63dead0e">openage::event::tests::TestEventClassTwo::invoke</a></div><div class="ttdeci">void invoke(Loop &amp;, const std::shared_ptr&lt; EventTarget &gt; &amp;gtarget, const std::shared_ptr&lt; State &gt; &amp;gstate, const curve::time_t &amp;time, const EventClass::param_map &amp;) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00146">tests.cpp:146</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_1_1param__map_xhtml_aeaf58d316c8416ac8d8597b6f635973d"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#aeaf58d316c8416ac8d8597b6f635973d">openage::event::EventClass::param_map::check_type</a></div><div class="ttdeci">bool check_type(const std::string &amp;key) const</div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00105">eventclass.h:105</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_state_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1_state.xhtml">openage::event::State</a></div><div class="ttdef"><b>Definition:</b> <a href="state_8h_source.xhtml#l00013">state.h:13</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_1_1param__map_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml">openage::event::EventClass::param_map</a></div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00072">eventclass.h:72</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_xhtml_a40a7e1ee67df51d9bc9ffb297b13d9dd"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a40a7e1ee67df51d9bc9ffb297b13d9dd">openage::event::tests::TestEventClass::setup_event</a></div><div class="ttdeci">void setup_event(const std::shared_ptr&lt; Event &gt; &amp;event, const std::shared_ptr&lt; State &gt; &amp;gstate) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00083">tests.cpp:83</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_xhtml_aa7b77dcf1f1c8665b824c670aab81f88"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#aa7b77dcf1f1c8665b824c670aab81f88">openage::event::tests::TestEventClass::predict_invoke_time</a></div><div class="ttdeci">curve::time_t predict_invoke_time(const std::shared_ptr&lt; EventTarget &gt; &amp;, const std::shared_ptr&lt; State &gt; &amp;, const curve::time_t &amp;at) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00125">tests.cpp:125</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_event_type_test_class_xhtml_acadce4dd71ef75305e148c0a98b42163"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#acadce4dd71ef75305e148c0a98b42163">openage::event::tests::EventTypeTestClass::setup_event</a></div><div class="ttdeci">void setup_event(const std::shared_ptr&lt; Event &gt; &amp;event, const std::shared_ptr&lt; State &gt; &amp;gstate) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00175">tests.cpp:175</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_event_type_test_class_xhtml_ac71424a13be1323a33f6f538a4d8a3e7"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#ac71424a13be1323a33f6f538a4d8a3e7">openage::event::tests::EventTypeTestClass::invoke</a></div><div class="ttdeci">void invoke(Loop &amp;, const std::shared_ptr&lt; EventTarget &gt; &amp;target, const std::shared_ptr&lt; State &gt; &amp;gstate, const curve::time_t &amp;time, const EventClass::param_map &amp;) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00185">tests.cpp:185</a></div></div>
<div class="ttc" id="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement_xhtml_aac3d3b574662dc79341881cea4d17692"><div class="ttname"><a href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#aac3d3b574662dc79341881cea4d17692">openage::event::tests::TestState::traceelement::name</a></div><div class="ttdeci">std::string name</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00061">tests.cpp:61</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_event_type_test_class_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml">openage::event::tests::EventTypeTestClass</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00169">tests.cpp:169</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a57b089ad5d574fad716e3b140c80d0e5"><div class="ttname"><a href="testing_8h.xhtml#a57b089ad5d574fad716e3b140c80d0e5">TESTEQUALS</a></div><div class="ttdeci">#define TESTEQUALS(left, right)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00049">testing.h:49</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml">openage::event::tests::TestEventClass</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00075">tests.cpp:75</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml_a84664c0a3a47e8029ce2c705229e385b"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a84664c0a3a47e8029ce2c705229e385b">openage::event::tests::TestState::TestObject::test_trigger</a></div><div class="ttdeci">void test_trigger(const curve::time_t &amp;time)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00038">tests.cpp:38</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml_a483c36345c5b597c1626162bc96dc52c"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml#a483c36345c5b597c1626162bc96dc52c">openage::util::FixedPoint&lt; int64_t, 16 &gt;::from_double</a></div><div class="ttdeci">static constexpr FixedPoint from_double(double n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00192">fixed_point.h:192</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml_ab15e85629de1bfa3aa13eb3efa962c56"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab15e85629de1bfa3aa13eb3efa962c56">openage::event::tests::TestState::TestObject::_id</a></div><div class="ttdeci">const int _id</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00021">tests.cpp:21</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_xhtml_a3106a6af096add1a6a2a6cc663fe05c6"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a3106a6af096add1a6a2a6cc663fe05c6">openage::event::tests::TestState::objectB</a></div><div class="ttdeci">std::shared_ptr&lt; TestObject &gt; objectB</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00052">tests.cpp:52</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml">openage::event::tests::TestState</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00018">tests.cpp:18</a></div></div>
<div class="ttc" id="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement_xhtml"><div class="ttname"><a href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml">openage::event::tests::TestState::traceelement</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00054">tests.cpp:54</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml_ab4d98e65c5b822c595aecc46618ebd55"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#ab4d98e65c5b822c595aecc46618ebd55">openage::event::tests::TestState::TestObject::TestObject</a></div><div class="ttdeci">TestObject(const std::shared_ptr&lt; Loop &gt; &amp;loop, int id)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00023">tests.cpp:23</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml_a6cd1784f8b74787701fa9813a4068e1c"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a6cd1784f8b74787701fa9813a4068e1c">openage::event::tests::TestState::TestObject::id</a></div><div class="ttdeci">size_t id() const override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00034">tests.cpp:34</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_two_xhtml_aaaeabcec80a4ee92ce170b3ff509afea"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#aaaeabcec80a4ee92ce170b3ff509afea">openage::event::tests::TestEventClassTwo::predict_invoke_time</a></div><div class="ttdeci">curve::time_t predict_invoke_time(const std::shared_ptr&lt; EventTarget &gt; &amp;, const std::shared_ptr&lt; State &gt; &amp;, const curve::time_t &amp;at) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00160">tests.cpp:160</a></div></div>
<div class="ttc" id="namespaceopenage_1_1event_1_1tests_xhtml_ab950ba5156aefba0f5ecaab970fcc1aa"><div class="ttname"><a href="namespaceopenage_1_1event_1_1tests.xhtml#ab950ba5156aefba0f5ecaab970fcc1aa">openage::event::tests::eventtrigger</a></div><div class="ttdeci">void eventtrigger()</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00228">tests.cpp:228</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a0eff614e7d6e818746700ed9d29e583f"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a0eff614e7d6e818746700ed9d29e583f">openage::log::log</a></div><div class="ttdeci">void log(const message &amp;msg)</div><div class="ttdef"><b>Definition:</b> <a href="log_8cpp_source.xhtml#l00013">log.cpp:13</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div><div class="ttdef"><b>Definition:</b> <a href="hash__functions_8h_source.xhtml#l00009">hash_functions.h:9</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_xhtml_a45754e041824ad45c8824a61ede82021"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a45754e041824ad45c8824a61ede82021">openage::event::tests::TestState::trace</a></div><div class="ttdeci">std::list&lt; traceelement &gt; trace</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00064">tests.cpp:64</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_target_xhtml_a6da66e1f05d92d87ce931d06204b6d9b"><div class="ttname"><a href="classopenage_1_1event_1_1_event_target.xhtml#a6da66e1f05d92d87ce931d06204b6d9b">openage::event::EventTarget::changes</a></div><div class="ttdeci">void changes(const curve::time_t &amp;change_time)</div><div class="ttdef"><b>Definition:</b> <a href="eventtarget_8cpp_source.xhtml#l00014">eventtarget.cpp:14</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_two_xhtml_a1d8b2054cc30b622db08b26bc12e9b46"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#a1d8b2054cc30b622db08b26bc12e9b46">openage::event::tests::TestEventClassTwo::setup_event</a></div><div class="ttdeci">void setup_event(const std::shared_ptr&lt; Event &gt; &amp;target, const std::shared_ptr&lt; State &gt; &amp;gstate) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00139">tests.cpp:139</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717">openage::event::EventClass::trigger_type</a></div><div class="ttdeci">trigger_type</div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00032">eventclass.h:32</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_target_xhtml_a69453fddcf70ac72c863f61e25bfb786"><div class="ttname"><a href="classopenage_1_1event_1_1_event_target.xhtml#a69453fddcf70ac72c863f61e25bfb786">openage::event::EventTarget::trigger</a></div><div class="ttdeci">void trigger(const curve::time_t &amp;last_valid_time)</div><div class="ttdef"><b>Definition:</b> <a href="eventtarget_8cpp_source.xhtml#l00064">eventtarget.cpp:64</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_event_type_test_class_xhtml_a5321e145f5eea940554f18a71aa1b639"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#a5321e145f5eea940554f18a71aa1b639">openage::event::tests::EventTypeTestClass::predict_invoke_time</a></div><div class="ttdeci">curve::time_t predict_invoke_time(const std::shared_ptr&lt; EventTarget &gt; &amp;, const std::shared_ptr&lt; State &gt; &amp;, const curve::time_t &amp;at) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00200">tests.cpp:200</a></div></div>
<div class="ttc" id="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement_xhtml_a83ebdbc18d10c912a9940a8c4e15c545"><div class="ttname"><a href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a83ebdbc18d10c912a9940a8c4e15c545">openage::event::tests::TestState::traceelement::traceelement</a></div><div class="ttdeci">traceelement(const std::string &amp;event, curve::time_t time)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00055">tests.cpp:55</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml_aa34202033ff483893bb1f253acea5cb5"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#aa34202033ff483893bb1f253acea5cb5">openage::event::tests::TestState::TestObject::set_number</a></div><div class="ttdeci">void set_number(int number, const curve::time_t &amp;time)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00029">tests.cpp:29</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml">openage::event::tests::TestState::TestObject</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00020">tests.cpp:20</a></div></div>
<div class="ttc" id="state_8h_xhtml"><div class="ttname"><a href="state_8h.xhtml">state.h</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_target_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1_event_target.xhtml">openage::event::EventTarget</a></div><div class="ttdef"><b>Definition:</b> <a href="eventtarget_8h_source.xhtml#l00021">eventtarget.h:21</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_event_type_test_class_xhtml_a5852467918e6f7a6c966dd52233abd28"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_event_type_test_class.xhtml#a5852467918e6f7a6c966dd52233abd28">openage::event::tests::EventTypeTestClass::EventTypeTestClass</a></div><div class="ttdeci">EventTypeTestClass(const std::string &amp;name, EventClass::trigger_type type)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00171">tests.cpp:171</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object_xhtml_a02fdf8df0c2dfef1f518a478af18da41"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state_1_1_test_object.xhtml#a02fdf8df0c2dfef1f518a478af18da41">openage::event::tests::TestState::TestObject::number</a></div><div class="ttdeci">int number</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00042">tests.cpp:42</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_two_xhtml_a49c6a614f3999462bd75a7465432cd7a"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml#a49c6a614f3999462bd75a7465432cd7a">openage::event::tests::TestEventClassTwo::TestEventClassTwo</a></div><div class="ttdeci">TestEventClassTwo(const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00135">tests.cpp:135</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a8a540e9ae9989e2fdeaa9139e00370fa"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a8a540e9ae9989e2fdeaa9139e00370fa">openage::event::EventClass::type</a></div><div class="ttdeci">const trigger_type type</div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00135">eventclass.h:135</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_two_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class_two.xhtml">openage::event::tests::TestEventClassTwo</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00133">tests.cpp:133</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_xhtml_a58face639f1698e000f153c478cca2e8"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a58face639f1698e000f153c478cca2e8">openage::event::tests::TestEventClass::TestEventClass</a></div><div class="ttdeci">TestEventClass(const std::string &amp;name, int idx)</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00078">tests.cpp:78</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_1_1param__map_xhtml_a01b87e6f9de36ce10f991c0cbddcd384"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a01b87e6f9de36ce10f991c0cbddcd384">openage::event::EventClass::param_map::get</a></div><div class="ttdeci">T get(const std::string &amp;key, const T &amp;defaultval=T()) const</div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00085">eventclass.h:85</a></div></div>
<div class="ttc" id="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement_xhtml_a259e055907453f783d9bbe82acc1c89b"><div class="ttname"><a href="structopenage_1_1event_1_1tests_1_1_test_state_1_1traceelement.xhtml#a259e055907453f783d9bbe82acc1c89b">openage::event::tests::TestState::traceelement::time</a></div><div class="ttdeci">curve::time_t time</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00060">tests.cpp:60</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a66ce7f5b73a0a164407078b598f45e09">openage::event::EventClass::trigger_type::DEPENDENCY_IMMEDIATELY</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_target_xhtml_ab3f3bf3292bc7fc3566b48b2bddd86da"><div class="ttname"><a href="classopenage_1_1event_1_1_event_target.xhtml#ab3f3bf3292bc7fc3566b48b2bddd86da">openage::event::EventTarget::loop</a></div><div class="ttdeci">std::shared_ptr&lt; Loop &gt; loop</div><div class="ttdef"><b>Definition:</b> <a href="eventtarget_8h_source.xhtml#l00068">eventtarget.h:68</a></div></div>
<div class="ttc" id="namespaceopenage_1_1event_1_1tests_xhtml"><div class="ttname"><a href="namespaceopenage_1_1event_1_1tests.xhtml">openage::event::tests</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00015">tests.cpp:15</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_xhtml_a49ae0770cb58dbbc88f900581e13444d"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a49ae0770cb58dbbc88f900581e13444d">openage::event::tests::TestEventClass::idx</a></div><div class="ttdeci">int idx</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00076">tests.cpp:76</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a46e158d5ce615a4f0057515b9a242188">openage::event::EventClass::trigger_type::DEPENDENCY</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_event_class_xhtml_a6d3145302d7a6910d0e8e30d42380cc5"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_event_class.xhtml#a6d3145302d7a6910d0e8e30d42380cc5">openage::event::tests::TestEventClass::invoke</a></div><div class="ttdeci">void invoke(Loop &amp;, const std::shared_ptr&lt; EventTarget &gt; &amp;target, const std::shared_ptr&lt; State &gt; &amp;gstate, const curve::time_t &amp;time, const EventClass::param_map &amp;) override</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00100">tests.cpp:100</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717ab8cd801b107a9a8f62c5b61ea5646620">openage::event::EventClass::trigger_type::TRIGGER</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_loop_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1_loop.xhtml">openage::event::Loop</a></div><div class="ttdef"><b>Definition:</b> <a href="event_2loop_8h_source.xhtml#l00032">loop.h:32</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_xhtml_ae1464903f08fcc8b86ab86fcc995334e"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#ae1464903f08fcc8b86ab86fcc995334e">openage::event::tests::TestState::log_dbg</a></div><div class="ttdeci">void log_dbg()</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00066">tests.cpp:66</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1tests_1_1_test_state_xhtml_a85fc736846c1a53eed28c4b0f02bbd09"><div class="ttname"><a href="classopenage_1_1event_1_1tests_1_1_test_state.xhtml#a85fc736846c1a53eed28c4b0f02bbd09">openage::event::tests::TestState::objectA</a></div><div class="ttdeci">std::shared_ptr&lt; TestObject &gt; objectA</div><div class="ttdef"><b>Definition:</b> <a href="event_2tests_8cpp_source.xhtml#l00051">tests.cpp:51</a></div></div>
<div class="ttc" id="eventtarget_8h_xhtml"><div class="ttname"><a href="eventtarget_8h.xhtml">eventtarget.h</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_fixed_point_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_fixed_point.xhtml">openage::util::FixedPoint&lt; int64_t, 16 &gt;</a></div></div>
<div class="ttc" id="message_8h_xhtml_a49606be7356624568932ec81c0d429f4"><div class="ttname"><a href="message_8h.xhtml#a49606be7356624568932ec81c0d429f4">DBG</a></div><div class="ttdeci">#define DBG</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00176">message.h:176</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml">openage::event::EventClass</a></div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00026">eventclass.h:26</a></div></div>
<div class="ttc" id="testing_8h_xhtml_a8845e8951e253b5e94ada5be1e308503"><div class="ttname"><a href="testing_8h.xhtml#a8845e8951e253b5e94ada5be1e308503">TESTFAILMSG</a></div><div class="ttdeci">#define TESTFAILMSG(...)</div><div class="ttdef"><b>Definition:</b> <a href="testing_8h_source.xhtml#l00042">testing.h:42</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717aa32d16355630f112473d1ae254519c24">openage::event::EventClass::trigger_type::ONCE</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_1_1param__map_xhtml_a4c7f73fe4acc0ed28e06ef69f07ef26e"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class_1_1param__map.xhtml#a4c7f73fe4acc0ed28e06ef69f07ef26e">openage::event::EventClass::param_map::contains</a></div><div class="ttdeci">bool contains(const std::string &amp;key) const</div><div class="ttdef"><b>Definition:</b> <a href="eventclass_8h_source.xhtml#l00097">eventclass.h:97</a></div></div>
<div class="ttc" id="classopenage_1_1event_1_1_event_class_xhtml_a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555"><div class="ttname"><a href="classopenage_1_1event_1_1_event_class.xhtml#a911de25538d1280c375a90ed694bb717a5be68175be14dfaa080165456c2e9555">openage::event::EventClass::trigger_type::REPEAT</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_906fd80251564c07ab43a732fc1e9e78.xhtml">event</a></li><li class="navelem"><a class="el" href="event_2tests_8cpp.xhtml">tests.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
