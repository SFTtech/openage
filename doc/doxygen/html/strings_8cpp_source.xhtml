<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/strings.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('strings_8cpp_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">strings.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="strings_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2013-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="strings_8h.xhtml">strings.h</a>&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;cstdlib&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;config.h&quot;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;../error/error.h&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="compiler_8h.xhtml">compiler.h</a>&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage.xhtml">openage</a> {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>util {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#afd23b015922ec41eec0165f8d88bf430">   20</a></span>&#160;std::string <a class="code" href="namespaceopenage_1_1util.xhtml#afd23b015922ec41eec0165f8d88bf430">sformat</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *fmt, ...) {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    std::string ret;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    va_list ap;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    va_start(ap, fmt);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <a class="code" href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">vsformat</a>(fmt, ap, ret);</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    va_end(ap);</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">   32</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">vsformat</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *fmt, va_list ap, std::string &amp;output) {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#if HAVE_THREAD_LOCAL_STORAGE</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">static</span> thread_local std::vector&lt;char&gt; buf(64);</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    std::vector&lt;char&gt; buf(64);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    va_list aq;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    va_copy(aq, ap);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordtype">size_t</span> length = vsnprintf(buf.data(), buf.size(), fmt, aq);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    va_end(aq);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(length &gt;= buf.size())) {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordtype">size_t</span> target_size = buf.size();</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(target_size &lt; 64)) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            target_size = 64;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">while</span> (length &gt;= target_size) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            target_size *= 2;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        buf.resize(target_size);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        vsnprintf(buf.data(), buf.size(), fmt, ap);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    output.append(buf.data(), length);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> length;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">   64</a></span>&#160;std::unique_ptr&lt;char[]&gt; <a class="code" href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">copy_string</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *s) {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">size_t</span> sz = <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(s) + 1;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">auto</span> ret = std::make_unique&lt;char[]&gt;(sz);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    memcpy(ret.get(), s, sz);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#abeb6a94572d93a14498661545b8332ec">   72</a></span>&#160;<span class="keywordtype">size_t</span> <a class="code" href="namespaceopenage_1_1util.xhtml#abeb6a94572d93a14498661545b8332ec">rstrip</a>(<span class="keywordtype">char</span> *s) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">size_t</span> strippedlen = <a class="code" href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">strlen</a>(s);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">while</span> (strippedlen &gt; 0) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">if</span> (s[strippedlen - 1] == <span class="charliteral">&#39;\n&#39;</span> ||</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            s[strippedlen - 1] == <span class="charliteral">&#39; &#39;</span>  ||</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            s[strippedlen - 1] == <span class="charliteral">&#39;\t&#39;</span>) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            strippedlen -= 1;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        }</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    s[strippedlen] = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">return</span> strippedlen;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">   92</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">string_matches_pattern</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>, <span class="keyword">const</span> <span class="keywordtype">char</span> *pattern) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordflow">if</span> (*pattern == <span class="charliteral">&#39;*&#39;</span>) {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <span class="comment">// skip all wildcard chars</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">while</span> (*pattern == <span class="charliteral">&#39;*&#39;</span>) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                pattern++;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="comment">// performance optimization: if the wildcard was the</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="comment">// last char of the pattern, it&#39;s a sure match.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">if</span> (*pattern == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="comment">// search for all places in str that equal *pattern;</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="comment">// those are possible places of continuation.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">while</span> (*<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> != <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">if</span> (*<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> == *pattern) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="keywordflow">if</span> (<a class="code" href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">string_matches_pattern</a>(<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a>, pattern)) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="comment">// no match was found</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span> (*<a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> != *pattern) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment">// chars don&#39;t match</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> (*pattern == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="comment">// comparision done</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <a class="code" href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">str</a> += 1;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        pattern += 1;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a9556b8562574e2c6ad102d8fd87569c6">  136</a></span>&#160;std::vector&lt;std::string&gt; <a class="code" href="namespaceopenage_1_1util.xhtml#a9556b8562574e2c6ad102d8fd87569c6">split</a>(<span class="keyword">const</span> std::string &amp;txt, <span class="keywordtype">char</span> delimiter) {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::vector&lt;std::string&gt; items;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="comment">// use the back inserter iterator and the templated split function.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <a class="code" href="namespaceopenage_1_1util.xhtml#a9556b8562574e2c6ad102d8fd87569c6">split</a>(txt, delimiter, std::back_inserter(items));</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">return</span> items;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a34e437da5fb7314c04d0af249dbd8bd1">  144</a></span>&#160;std::vector&lt;std::string&gt; <a class="code" href="namespaceopenage_1_1util.xhtml#a34e437da5fb7314c04d0af249dbd8bd1">split_escape</a>(<span class="keyword">const</span> std::string &amp;txt, <span class="keywordtype">char</span> delim, <span class="keywordtype">size_t</span> size_hint) {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="comment">// output vector</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;std::string&gt; items;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a>(size_hint)) {</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        items.reserve(size_hint);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#if HAVE_THREAD_LOCAL_STORAGE</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">static</span> thread_local std::vector&lt;char&gt; buf;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    std::vector&lt;char&gt; buf;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    buf.reserve(256);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="comment">// string reading pointer</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *r = txt.c_str();</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// copy characters to buf, and a buf is emitted as a token</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">// when the delimiter or end is reached.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">// end of input string</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span> (*r == <span class="charliteral">&#39;\0&#39;</span>) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            items.push_back(std::string{std::begin(buf), std::end(buf)});</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            buf.clear();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// delimiter found</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> (*r == delim) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            items.push_back(std::string{std::begin(buf), std::end(buf)});</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            buf.clear();</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            r++;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span> (*r == <span class="charliteral">&#39;\\&#39;</span>) {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="comment">// an escaped char: increment the read pointer to point</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="comment">// at the escape code.</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            r++;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// analyze the escape code</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            <span class="keywordflow">switch</span> (*r) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">case</span> <span class="charliteral">&#39;\0&#39;</span>:</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="comment">// string ended in the middle of an escape code</span></div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                <span class="comment">// error!</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;string ends after escape&quot;</span>};</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">case</span> <span class="charliteral">&#39;n&#39;</span>:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="comment">// a newline</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                buf.push_back(<span class="charliteral">&#39;\n&#39;</span>);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">default</span>:</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="comment">// the escape code already represents the literal</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="comment">// character (e.g.: &quot;\\&quot; = &#39;\&#39;, &quot;\,&quot; = &#39;,&#39;).</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">break</span>;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            }</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        buf.push_back(*r);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        r++;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordflow">return</span> items;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;}</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;}} <span class="comment">// openage::util</span></div><div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdoc">Openage base exception type; the constructor usage is analogous to log::log().</div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="strings_8h_xhtml"><div class="ttname"><a href="strings_8h.xhtml">strings.h</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_a217a0bd562b98ae8c2ffce44935351e1"><div class="ttname"><a href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a></div><div class="ttdeci">#define likely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00052">compiler.h:52</a></div></div>
<div class="ttc" id="compiler_8h_xhtml"><div class="ttname"><a href="compiler_8h.xhtml">compiler.h</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_afd23b015922ec41eec0165f8d88bf430"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#afd23b015922ec41eec0165f8d88bf430">openage::util::sformat</a></div><div class="ttdeci">std::string sformat(const char *fmt,...)</div><div class="ttdoc">printf-style to-string formatting.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00020">strings.cpp:20</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_1_1constexpr___xhtml_a72a87a05e383ec62bf0b60359f314df7"><div class="ttname"><a href="namespaceopenage_1_1util_1_1constexpr__.xhtml#a72a87a05e383ec62bf0b60359f314df7">openage::util::constexpr_::strlen</a></div><div class="ttdeci">constexpr size_t strlen(const char *str)</div><div class="ttdoc">Returns the length of the string literal, excluding the terminating NULL byte.</div><div class="ttdef"><b>Definition:</b> <a href="constexpr_8h_source.xhtml#l00030">constexpr.h:30</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a9556b8562574e2c6ad102d8fd87569c6"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a9556b8562574e2c6ad102d8fd87569c6">openage::util::split</a></div><div class="ttdeci">std::vector&lt; std::string &gt; split(const std::string &amp;txt, char delimiter)</div><div class="ttdoc">Split a string at a delimiter into a vector.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00136">strings.cpp:136</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a34e437da5fb7314c04d0af249dbd8bd1"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a34e437da5fb7314c04d0af249dbd8bd1">openage::util::split_escape</a></div><div class="ttdeci">std::vector&lt; std::string &gt; split_escape(const std::string &amp;txt, char delim, size_t size_hint)</div><div class="ttdoc">Split a string at a delimiter into a vector.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00144">strings.cpp:144</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml"><div class="ttname"><a href="namespaceopenage.xhtml">openage</a></div><div class="ttdoc">This file contains forward declarations for all the coordinate types, as well as their scalar types.</div><div class="ttdef"><b>Definition:</b> <a href="assetmanager_8cpp_source.xhtml#l00018">assetmanager.cpp:18</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a042594ac67e652c429fba1eeb1bec6fa"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a042594ac67e652c429fba1eeb1bec6fa">openage::util::vsformat</a></div><div class="ttdeci">size_t vsformat(const char *fmt, va_list ap, std::string &amp;output)</div><div class="ttdoc">printf-style valist-to-string formatting; the result is appended to output.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00032">strings.cpp:32</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aae9cd09351bc11ad2c9fcf701786340a"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aae9cd09351bc11ad2c9fcf701786340a">openage::util::string_matches_pattern</a></div><div class="ttdeci">bool string_matches_pattern(const char *str, const char *pattern)</div><div class="ttdoc">returns true if str matches the basic globbing pattern in the pattern, '*' matches any number of char...</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00092">strings.cpp:92</a></div></div>
<div class="ttc" id="namespaceopenage_1_1py_xhtml_a4d2bbe46a5d10404c658b54f3b199551"><div class="ttname"><a href="namespaceopenage_1_1py.xhtml#a4d2bbe46a5d10404c658b54f3b199551">openage::py::str</a></div><div class="ttdeci">Obj str(const std::string &amp;value)</div><div class="ttdoc">str(value);</div><div class="ttdef"><b>Definition:</b> <a href="pyobject_8cpp_source.xhtml#l00331">pyobject.cpp:331</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_abeb6a94572d93a14498661545b8332ec"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#abeb6a94572d93a14498661545b8332ec">openage::util::rstrip</a></div><div class="ttdeci">size_t rstrip(char *s)</div><div class="ttdoc">Returns the number of whitespace characters on the right of the string.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00072">strings.cpp:72</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_a854794aef09b81dbec641eca208a66d7"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#a854794aef09b81dbec641eca208a66d7">openage::util::copy_string</a></div><div class="ttdeci">std::unique_ptr&lt; char[]&gt; copy_string(const char *s)</div><div class="ttdoc">Copies the given string to the returned unique_ptr, including 0 byte.</div><div class="ttdef"><b>Definition:</b> <a href="strings_8cpp_source.xhtml#l00064">strings.cpp:64</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="strings_8cpp.xhtml">strings.cpp</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
