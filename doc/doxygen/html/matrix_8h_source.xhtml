<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/util/matrix.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   &#160;<span id="projectnumber">0.3.1</span>
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('matrix_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">matrix.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="matrix_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2015-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;array&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;cmath&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="vector_8h.xhtml">vector.h</a>&quot;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1util.xhtml">openage::util</a> {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> M, <span class="keywordtype">size_t</span> N, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix</a> : <span class="keyword">public</span> std::array&lt;std::array&lt;T, N&gt;, M&gt; {</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    static_assert(M &gt; 0 and N &gt; 0, <span class="stringliteral">&quot;0-dimensional matrix not allowed&quot;</span>);</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a5ea0a61c6ed750526162578bb981ee24">   24</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, T&gt;</a>;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a17a9f1eb11a77fa366b55f0a1143b541">   26</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">float</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a17a9f1eb11a77fa366b55f0a1143b541">default_eps</a> = 1e-5;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a05cddcbaea57d38a247fc3f6bfe9732b">   28</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a05cddcbaea57d38a247fc3f6bfe9732b">rows</a> = M;</div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a5e6ca60e377f5be70baace533d677b79">   29</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a5e6ca60e377f5be70baace533d677b79">cols</a> = N;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a775ebdbef36a23cf8a7e62d7517f9303">   30</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a775ebdbef36a23cf8a7e62d7517f9303">is_square</a> = (M == N);</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a797428914210319763ae300a914e9177">   31</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a797428914210319763ae300a914e9177">is_row_vector</a> = (M == 1);</div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a7eeb76d6d746657e82580bca16bd0b95">   32</a></span>&#160;    <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a7eeb76d6d746657e82580bca16bd0b95">is_column_vector</a> = (N == 1);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#ac4b352fc7e312facc880e5715bd42f01">   37</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#ac4b352fc7e312facc880e5715bd42f01">Matrix</a>() {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; N; j++) {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                (*this)[i][j] = 0;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        }</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    }</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#aceff6c42bedce3eb5850b05ab6145112">~Matrix</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> cond=<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a7eeb76d6d746657e82580bca16bd0b95">is_column_vector</a>,</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;              <span class="keyword">typename</span>=<span class="keyword">typename</span> std::enable_if&lt;cond&gt;::type&gt;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#aaf3e43eed1934588bcf877c435502934">   52</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#aaf3e43eed1934588bcf877c435502934">Matrix</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;M, T&gt;</a> &amp;vec) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            (*this)[i][0] = vec[i];</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> ... Ts&gt;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a19707201a8fcd11cbeb9f91f72f7ccfd">   62</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a19707201a8fcd11cbeb9f91f72f7ccfd">Matrix</a>(Ts ... args) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        static_assert(<span class="keyword">sizeof</span>...(args) == N*M, <span class="stringliteral">&quot;not all values supplied&quot;</span>);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        std::array&lt;float, N*M&gt; temp{{static_cast&lt;T&gt;(args)...}};</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N*M; i++) {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            (*this)[i / (N*M)][i % (N*M)] = temp[i];</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        }</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">bool</span> cond=<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a775ebdbef36a23cf8a7e62d7517f9303">is_square</a>,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;              <span class="keyword">typename</span>=<span class="keyword">typename</span> std::enable_if&lt;cond&gt;::type&gt;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a0ba437147db630d1ca901f870764a024">   76</a></span>&#160;    <span class="keyword">static</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a0ba437147db630d1ca901f870764a024">identity</a>() {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> res;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            res[i][i] = 1;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#ac1bc212dbfd151ce922ba27cad25a074">   89</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#ac1bc212dbfd151ce922ba27cad25a074">equals</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> &amp;other, <span class="keywordtype">float</span> eps=<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a17a9f1eb11a77fa366b55f0a1143b541">default_eps</a>)<span class="keyword"> const </span>{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; M; j++) {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                <span class="keywordflow">if</span> (<a class="code" href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a>((*<span class="keyword">this</span>)[i][j] - other[i][j]) &gt;= eps) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> P&gt;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a23f79a50b5b6c3461e674e7b07432ff7">  104</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, P, T&gt;</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a23f79a50b5b6c3461e674e7b07432ff7">operator *</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;N, P, T&gt;</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, P, T&gt;</a> res;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; P; j++) {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                res[i][j] = 0;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; N; k++) {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    res[i][j] += (*this)[i][k] * other[k][j];</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#aa58e34206c0925efc722483e34ada587">  120</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix &lt;M, 1, T&gt;</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#aa58e34206c0925efc722483e34ada587">operator *</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;M, T&gt;</a> &amp;vec)<span class="keyword"> const </span>{</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>) * <span class="keyword">static_cast&lt;</span><a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, 1, T&gt;</a><span class="keyword">&gt;</span>(vec);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a7b100e3972d47f11b30e241809ec29a4">  127</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a7b100e3972d47f11b30e241809ec29a4">operator +</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> res;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; N; j++) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                res[i][j] = (*this)[i][j] + other[i][j];</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#ad13f1ffce8d8f40098cb63cb8a609330">  140</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#ad13f1ffce8d8f40098cb63cb8a609330">operator -</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> &amp;other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> res;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; N; j++) {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                res[i][j] = (*this)[i][j] - other[i][j];</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a7e2887f1612a7a82733967b1856434ac">  153</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a7e2887f1612a7a82733967b1856434ac">operator *=</a>(T other) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; N; j++) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                (*this)[i][j] *= other;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        }</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a7b93d69889c489a4137c3f7a07708050">  164</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a7b93d69889c489a4137c3f7a07708050">operator *</a>(T other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> res(*<span class="keyword">this</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        res *= other;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a3d5d06bd34e0a9eea626b00b080ad3d2">  173</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a3d5d06bd34e0a9eea626b00b080ad3d2">operator /=</a>(T other) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; N; j++) {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                (*this)[i][j] /= other;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a47559fde49b3a9634d95596d87fbea98">  184</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a47559fde49b3a9634d95596d87fbea98">operator /</a>(T other)<span class="keyword"> const </span>{</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> res(*<span class="keyword">this</span>);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        res /= other;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a4950945a55363fd77668b983001d55b5">  193</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;N, M, T&gt;</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a4950945a55363fd77668b983001d55b5">transpose</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix &lt;N, M, T&gt;</a> res;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; N; j++) {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                res[j][i] = (*this)[i][j];</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        }</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> cond=<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a7eeb76d6d746657e82580bca16bd0b95">is_column_vector</a>,</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;             <span class="keyword">typename</span>=<span class="keyword">typename</span> std::enable_if&lt;cond&gt;::type&gt;</div><div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a58d27b46e7ceaddc0c7ff2e0e9f2a6cf">  208</a></span>&#160;    <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;M, T&gt;</a> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a58d27b46e7ceaddc0c7ff2e0e9f2a6cf">to_vector</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <a class="code" href="classopenage_1_1util_1_1_vector.xhtml">Vector&lt;M, T&gt;</a> res{};</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; M; i++) {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            res[i] = (*this)[i][0];</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        }</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    }</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">template</span>&lt;<span class="keywordtype">bool</span> cond=<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a775ebdbef36a23cf8a7e62d7517f9303">is_square</a>,</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;             <span class="keyword">typename</span>=<span class="keyword">typename</span> std::enable_if&lt;cond&gt;::type&gt;</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#ae8e23f59ac0793b10d8487abac1e2edb">  221</a></span>&#160;    T <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#ae8e23f59ac0793b10d8487abac1e2edb">trace</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        T res = 0;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N; i++) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;            res += (*this)[i][i];</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> res;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classopenage_1_1util_1_1_matrix.xhtml#a256d8ad5c2e631d1727aae6e813289f0">  234</a></span>&#160;    <span class="keyword">friend</span> std::ostream &amp;<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml#a256d8ad5c2e631d1727aae6e813289f0">operator &lt;&lt;</a>(std::ostream &amp;o,</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                     <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">this_type</a> &amp;mat) {</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        o &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; M-1; j++) {</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            o &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N-1; i++) {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                o &lt;&lt; mat[j][i] &lt;&lt; <span class="stringliteral">&quot;,\t&quot;</span>;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            o &lt;&lt; mat[j][N-1] &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            o &lt;&lt; <span class="stringliteral">&quot;,&quot;</span> &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        o &lt;&lt; <span class="stringliteral">&quot;(&quot;</span>;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; N-1; i++) {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            o &lt;&lt; mat[M-1][i] &lt;&lt; <span class="stringliteral">&quot;,\t&quot;</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        o &lt;&lt; mat[M-1][N-1] &lt;&lt; <span class="stringliteral">&quot;))&quot;</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> o;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;};</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> M, <span class="keywordtype">size_t</span> N, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#af3f37a72fc7fc649b471cff17733f7ec">  258</a></span>&#160;<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, T&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">operator *</a>(T a, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, T&gt;</a> &amp;mat) {</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">return</span> mat * a;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> M, <span class="keywordtype">size_t</span> N, <span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a759079d1391952faee3b693dba78382c">  268</a></span>&#160;<a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, T&gt;</a> <a class="code" href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">operator *</a>(int64_t a, <span class="keyword">const</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, T&gt;</a> &amp;mat) {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">return</span> mat * a;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="keywordtype">float</span>&gt;</div><div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aa62f335908f8f5e68345cb3386ab94c6">  273</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix2t</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;2, 2, T&gt;</a>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="keywordtype">float</span>&gt;</div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a748106aeb16275c1ebf6f0f9276381cd">  276</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix3t</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;3, 3, T&gt;</a>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T=<span class="keywordtype">float</span>&gt;</div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#ae5976ba79c39027e28f3f02458e93e38">  279</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix4t</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;4, 4, T&gt;</a>;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> M, <span class="keywordtype">size_t</span> N&gt;</div><div class="line"><a name="l00282"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#af077ef0b2ea660c4044917c60c4f0385">  282</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrixf</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, float&gt;</a>;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">template</span>&lt;<span class="keywordtype">size_t</span> M, <span class="keywordtype">size_t</span> N&gt;</div><div class="line"><a name="l00285"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a21feb2f799e75fd645e0d663ec4712f9">  285</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrixd</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;M, N, double&gt;</a>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a00694c43ac6582c643b2591d420ce472">  287</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix2f</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;2, 2, float&gt;</a>;</div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#aaa417153128f83c6b7ee0b42efc418aa">  288</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix3f</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;3, 3, float&gt;</a>;</div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#afd42b418dc20fcb64677b2f75ecd97b8">  289</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix4f</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;4, 4, float&gt;</a>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a94d988fc19451e9042116f14432ec1b6">  291</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix2d</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;2, 2, double&gt;</a>;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a157c43b340256c0f1124074fae7aa807">  292</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix3d</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;3, 3, double&gt;</a>;</div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="namespaceopenage_1_1util.xhtml#a06158fd9e1e05c74de527f554486f2b6">  293</a></span>&#160;<span class="keyword">using</span> <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix4d</a> = <a class="code" href="classopenage_1_1util_1_1_matrix.xhtml">Matrix&lt;4, 4, double&gt;</a>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;} <span class="comment">// openage::util</span></div><div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a4950945a55363fd77668b983001d55b5"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a4950945a55363fd77668b983001d55b5">openage::util::Matrix::transpose</a></div><div class="ttdeci">Matrix&lt; N, M, T &gt; transpose() const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00193">matrix.h:193</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a7e2887f1612a7a82733967b1856434ac"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a7e2887f1612a7a82733967b1856434ac">openage::util::Matrix::operator *=</a></div><div class="ttdeci">void operator *=(T other)</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00153">matrix.h:153</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a7b93d69889c489a4137c3f7a07708050"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a7b93d69889c489a4137c3f7a07708050">openage::util::Matrix::operator *</a></div><div class="ttdeci">this_type operator *(T other) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00164">matrix.h:164</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a7b100e3972d47f11b30e241809ec29a4"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a7b100e3972d47f11b30e241809ec29a4">openage::util::Matrix::operator+</a></div><div class="ttdeci">this_type operator+(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00127">matrix.h:127</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_ac1bc212dbfd151ce922ba27cad25a074"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#ac1bc212dbfd151ce922ba27cad25a074">openage::util::Matrix::equals</a></div><div class="ttdeci">bool equals(const this_type &amp;other, float eps=default_eps) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00089">matrix.h:89</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_ad13f1ffce8d8f40098cb63cb8a609330"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#ad13f1ffce8d8f40098cb63cb8a609330">openage::util::Matrix::operator -</a></div><div class="ttdeci">this_type operator -(const this_type &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00140">matrix.h:140</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_aaf3e43eed1934588bcf877c435502934"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#aaf3e43eed1934588bcf877c435502934">openage::util::Matrix::Matrix</a></div><div class="ttdeci">Matrix(const Vector&lt; M, T &gt; &amp;vec)</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00052">matrix.h:52</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a17a9f1eb11a77fa366b55f0a1143b541"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a17a9f1eb11a77fa366b55f0a1143b541">openage::util::Matrix::default_eps</a></div><div class="ttdeci">static constexpr float default_eps</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00026">matrix.h:26</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a19707201a8fcd11cbeb9f91f72f7ccfd"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a19707201a8fcd11cbeb9f91f72f7ccfd">openage::util::Matrix::Matrix</a></div><div class="ttdeci">Matrix(Ts ... args)</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00062">matrix.h:62</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a5e6ca60e377f5be70baace533d677b79"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a5e6ca60e377f5be70baace533d677b79">openage::util::Matrix::cols</a></div><div class="ttdeci">static constexpr size_t cols</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00029">matrix.h:29</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a0ba437147db630d1ca901f870764a024"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a0ba437147db630d1ca901f870764a024">openage::util::Matrix::identity</a></div><div class="ttdeci">static this_type identity()</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00076">matrix.h:76</a></div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml">openage::util</a></div><div class="ttdef"><b>Definition:</b> <a href="draw_8h_source.xhtml#l00009">draw.h:9</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a797428914210319763ae300a914e9177"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a797428914210319763ae300a914e9177">openage::util::Matrix::is_row_vector</a></div><div class="ttdeci">static constexpr bool is_row_vector</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00031">matrix.h:31</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_ac4b352fc7e312facc880e5715bd42f01"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#ac4b352fc7e312facc880e5715bd42f01">openage::util::Matrix::Matrix</a></div><div class="ttdeci">Matrix()</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00037">matrix.h:37</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml">openage::util::Matrix</a></div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00020">matrix.h:20</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a05cddcbaea57d38a247fc3f6bfe9732b"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a05cddcbaea57d38a247fc3f6bfe9732b">openage::util::Matrix::rows</a></div><div class="ttdeci">static constexpr size_t rows</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00028">matrix.h:28</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_ae8e23f59ac0793b10d8487abac1e2edb"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#ae8e23f59ac0793b10d8487abac1e2edb">openage::util::Matrix::trace</a></div><div class="ttdeci">T trace() const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00221">matrix.h:221</a></div></div>
<div class="ttc" id="namespacestd_xhtml_a6af851cc1249a970adde4dc422ff824a"><div class="ttname"><a href="namespacestd.xhtml#a6af851cc1249a970adde4dc422ff824a">std::abs</a></div><div class="ttdeci">constexpr openage::util::FixedPoint&lt; I, F &gt; abs(openage::util::FixedPoint&lt; I, F &gt; n)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00491">fixed_point.h:491</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a3d5d06bd34e0a9eea626b00b080ad3d2"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a3d5d06bd34e0a9eea626b00b080ad3d2">openage::util::Matrix::operator/=</a></div><div class="ttdeci">void operator/=(T other)</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00173">matrix.h:173</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_vector_xhtml"><div class="ttname"><a href="classopenage_1_1util_1_1_vector.xhtml">openage::util::Vector</a></div><div class="ttdef"><b>Definition:</b> <a href="vector_8h_source.xhtml#l00024">vector.h:24</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_aceff6c42bedce3eb5850b05ab6145112"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#aceff6c42bedce3eb5850b05ab6145112">openage::util::Matrix::~Matrix</a></div><div class="ttdeci">~Matrix()=default</div></div>
<div class="ttc" id="namespaceopenage_1_1util_xhtml_aa3949bf1d23f5c8446474135851399fc"><div class="ttname"><a href="namespaceopenage_1_1util.xhtml#aa3949bf1d23f5c8446474135851399fc">openage::util::operator *</a></div><div class="ttdeci">std::enable_if&lt; std::is_arithmetic&lt; N &gt;::value, FixedPoint&lt; I, F &gt; &gt;::type constexpr operator *(const FixedPoint&lt; I, F &gt; lhs, const N &amp;rhs)</div><div class="ttdef"><b>Definition:</b> <a href="fixed__point_8h_source.xhtml#l00440">fixed_point.h:440</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a47559fde49b3a9634d95596d87fbea98"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a47559fde49b3a9634d95596d87fbea98">openage::util::Matrix::operator/</a></div><div class="ttdeci">this_type operator/(T other) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00184">matrix.h:184</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a775ebdbef36a23cf8a7e62d7517f9303"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a775ebdbef36a23cf8a7e62d7517f9303">openage::util::Matrix::is_square</a></div><div class="ttdeci">static constexpr bool is_square</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00030">matrix.h:30</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a23f79a50b5b6c3461e674e7b07432ff7"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a23f79a50b5b6c3461e674e7b07432ff7">openage::util::Matrix::operator *</a></div><div class="ttdeci">Matrix&lt; M, P, T &gt; operator *(const Matrix&lt; N, P, T &gt; &amp;other) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00104">matrix.h:104</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_aa58e34206c0925efc722483e34ada587"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#aa58e34206c0925efc722483e34ada587">openage::util::Matrix::operator *</a></div><div class="ttdeci">Matrix&lt; M, 1, T &gt; operator *(const Vector&lt; M, T &gt; &amp;vec) const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00120">matrix.h:120</a></div></div>
<div class="ttc" id="vector_8h_xhtml"><div class="ttname"><a href="vector_8h.xhtml">vector.h</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a256d8ad5c2e631d1727aae6e813289f0"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a256d8ad5c2e631d1727aae6e813289f0">openage::util::Matrix::operator&lt;&lt;</a></div><div class="ttdeci">friend std::ostream &amp; operator&lt;&lt;(std::ostream &amp;o, const this_type &amp;mat)</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00234">matrix.h:234</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a7eeb76d6d746657e82580bca16bd0b95"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a7eeb76d6d746657e82580bca16bd0b95">openage::util::Matrix::is_column_vector</a></div><div class="ttdeci">static constexpr bool is_column_vector</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00032">matrix.h:32</a></div></div>
<div class="ttc" id="classopenage_1_1util_1_1_matrix_xhtml_a58d27b46e7ceaddc0c7ff2e0e9f2a6cf"><div class="ttname"><a href="classopenage_1_1util_1_1_matrix.xhtml#a58d27b46e7ceaddc0c7ff2e0e9f2a6cf">openage::util::Matrix::to_vector</a></div><div class="ttdeci">Vector&lt; M, T &gt; to_vector() const</div><div class="ttdef"><b>Definition:</b> <a href="matrix_8h_source.xhtml#l00208">matrix.h:208</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_a25237b91464ed624c167f154229e196.xhtml">util</a></li><li class="navelem"><a class="el" href="matrix_8h.xhtml">matrix.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
