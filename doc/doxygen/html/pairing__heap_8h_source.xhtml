<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.15"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>openage: C:/Users/Jameson/Documents/git-projects/openage/libopenage/datastructure/pairing_heap.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(initResizable);
/* @license-end */</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo_small.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">openage
   </div>
   <div id="projectbrief">Free (as in freedom) open source clone of the Age of Empires II engine</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.15 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('pairing__heap_8h_source.xhtml','');});
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">pairing_heap.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pairing__heap_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">// Copyright 2014-2018 the openage authors. See copying.md for legal info.</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;unordered_set&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;../util/compiler.h&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;../error/error.h&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="pairing__heap_8h.xhtml#ac4f5862bbb243cacbe53df34654f1ebd">   28</a></span>&#160;<span class="preprocessor">#define OPENAGE_PAIRINGHEAP_DEBUG false</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceopenage_1_1datastructure.xhtml">openage::datastructure</a> {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;         <span class="keyword">typename</span> compare,</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;         <span class="keyword">typename</span> heapnode_t&gt;</div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">   37</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a>;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> compare=std::less&lt;T&gt;&gt;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">   42</a></span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode</a> : <span class="keyword">public</span> std::enable_shared_from_this&lt;PairingHeapNode&lt;T, compare&gt;&gt; {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad25d6fdfdc3e7bfc92d2c77395571e75">   44</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">this_type</a> = <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode&lt;T, compare&gt;</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3aca0150a01a40ee16f3da49f38c3c31">   46</a></span>&#160;    <span class="keyword">friend</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap&lt;T, compare, this_type&gt;</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">   48</a></span>&#160;    T <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">   49</a></span>&#160;    compare <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">cmp</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#af1b32b518657c3a03efa60240c5634d5">   52</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#af1b32b518657c3a03efa60240c5634d5">PairingHeapNode</a>(<span class="keyword">const</span> T &amp;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>)</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        :</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>{<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>} {}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a17ab80e5ef35e2d22599ebcfabbdf639">   56</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a17ab80e5ef35e2d22599ebcfabbdf639">PairingHeapNode</a>(T &amp;&amp;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        :</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>{<a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>)} {}</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad2d2dd30261c2108d7ff21a4df43098c">~PairingHeapNode</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a4f1e12c9a1871b3ba19edb4a73935ae4">   65</a></span>&#160;    <span class="keyword">const</span> T &amp;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a4f1e12c9a1871b3ba19edb4a73935ae4">get_data</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">data</a>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a0b2c1f83d627f4f401d53787e9fa076f">   72</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a0b2c1f83d627f4f401d53787e9fa076f">become_child_of</a>(<span class="keyword">const</span> std::shared_ptr&lt;this_type&gt; &amp;node) {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        node-&gt;add_child(this-&gt;shared_from_this());</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3f6b72619532af9b5a828dd541a225b1">   79</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3f6b72619532af9b5a828dd541a225b1">add_child</a>(<span class="keyword">const</span> std::shared_ptr&lt;this_type&gt; &amp;new_child) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// first child is the most recently attached one</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="comment">// it must not have siblings as they will get lost.</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        new_child-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        new_child-&gt;next_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a> != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a>-&gt;prev_sibling = new_child;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a> = new_child;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        new_child-&gt;parent = this-&gt;shared_from_this();</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">   99</a></span>&#160;    std::shared_ptr&lt;this_type&gt; <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">link_with</a>(<span class="keyword">const</span> std::shared_ptr&lt;this_type&gt; &amp;node) {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        std::shared_ptr&lt;this_type&gt; new_root;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        std::shared_ptr&lt;this_type&gt; new_child;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">cmp</a>(this-&gt;data, node-&gt;data)) {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            new_root  = this-&gt;shared_from_this();</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            new_child = node;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            new_root  = node;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            new_child = this-&gt;shared_from_this();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="comment">// children of new root become siblings of new new_child</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// -&gt; parent of new child = new root</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">// this whll be set by the add_child method</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        new_child-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        new_child-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment">// this is then set to the previous pair root:</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        new_root-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        new_root-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="comment">// set up the child</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        new_root-&gt;add_child(new_child);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> new_root;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a6227d9be8c7b75e3456c25850e324327">  134</a></span>&#160;    std::shared_ptr&lt;this_type&gt; <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a6227d9be8c7b75e3456c25850e324327">link_backwards</a>() {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="comment">// reached end, return this as current root,</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="comment">// the previous siblings will be linked to it.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> this-&gt;shared_from_this();</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment">// recurse to last sibling,</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        std::shared_ptr&lt;this_type&gt; node = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>-&gt;link_backwards();</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment">// then link ourself to the new root.</span></div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        node-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        node-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">link_with</a>(node);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a954463b2218a69cf977df80d4bd7d872">  157</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a954463b2218a69cf977df80d4bd7d872">loosen</a>() {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="comment">// release us from some other node</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a> and this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a>-&gt;first_child == this-&gt;shared_from_this()) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="comment">// we are the first child</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="comment">// make the next sibling the first child</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a>-&gt;first_child = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        }</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">// if we have a previous sibling</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a> != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="comment">// set its next sibling to skip us.</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a>-&gt;next_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">// if we have a next sibling</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="comment">// tell its previous sibling to skip us.</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>-&gt;prev_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment">// reset sibling and parent ptrs.</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">  182</a></span>&#160;    std::shared_ptr&lt;this_type&gt; <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">first_child</a>;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">  183</a></span>&#160;    std::shared_ptr&lt;this_type&gt; <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">prev_sibling</a>;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">  184</a></span>&#160;    std::shared_ptr&lt;this_type&gt; <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">next_sibling</a>;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">  185</a></span>&#160;    std::shared_ptr&lt;this_type&gt; <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">parent</a>;       <span class="comment">// for decrease-key and delete</span></div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;};</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;         <span class="keyword">typename</span> compare=std::less&lt;T&gt;,</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;         <span class="keyword">typename</span> heapnode_t=<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">PairingHeapNode&lt;T, compare&gt;</a>&gt;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">class </span><a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap</a> final {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aecca499825c32d9f3763c58d7b8f7482">  197</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">node_t</a> = heapnode_t;</div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">  198</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> = std::shared_ptr&lt;node_t&gt;;</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a97080dca2abefa0817478c009f2ca67b">  199</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">this_type</a> = <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">PairingHeap&lt;T, compare, node_t&gt;</a>;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a1f19a6e5b26897b3fa79ccf610e31add">  200</a></span>&#160;    <span class="keyword">using</span> <a class="code" href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">cmp_t</a> = compare;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a2087411c07ffe7d5d0762a700ee4e34e">  205</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a2087411c07ffe7d5d0762a700ee4e34e">PairingHeap</a>()</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        :</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a>(0),</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>(nullptr) {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aa219dc574937f546b210dd0c04836219">~PairingHeap</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">  217</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">push</a>(<span class="keyword">const</span> T &amp;item) {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> new_node = std::make_shared&lt;node_t&gt;(item);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">push_node</a>(new_node);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordflow">return</span> new_node;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a684440bcb0466bd64164e9fe7e9df954">  227</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a684440bcb0466bd64164e9fe7e9df954">push</a>(T &amp;&amp;item) {</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> new_node = std::make_shared&lt;node_t&gt;(<a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(item));</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">push_node</a>(new_node);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">return</span> new_node;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">  236</a></span>&#160;    T <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">pop</a>() {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">std::move</a>(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">pop_node</a>()-&gt;data);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">  246</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">pop_node</a>() {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>{<a class="code" href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a>(<a class="code" href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">err</a>) &lt;&lt; <span class="stringliteral">&quot;Can&#39;t pop an empty heap!&quot;</span>};</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="comment">// 0. remove tree root, it&#39;s the minimum.</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> ret = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> current_sibling = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>-&gt;first_child;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="comment">// 1. link root children pairwise, last node may be alone</span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> first_pair = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> previous_pair = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">while</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(current_sibling != <span class="keyword">nullptr</span>)) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> link0 = current_sibling;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> link1 = current_sibling-&gt;next_sibling;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            <span class="comment">// pair link0 and link1</span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">if</span> (link1 != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="comment">// get the first sibling for next pair, just in advance.</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                current_sibling = link1-&gt;next_sibling;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                <span class="comment">// do the link: merges two nodes, smaller one = root.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> link_root = link0-&gt;link_with(link1);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                link_root-&gt;parent = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                <span class="keywordflow">if</span> (previous_pair == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                    <span class="comment">// this was the first pair</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    first_pair = link_root;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    first_pair-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                }</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                <span class="keywordflow">else</span> {</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    <span class="comment">// store node as next sibling in previous pair</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    previous_pair-&gt;next_sibling = link_root;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    link_root-&gt;prev_sibling = previous_pair;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                previous_pair = link_root;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                link_root-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            }</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keywordflow">else</span> {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                <span class="comment">// link0 is the last and unpaired root child.</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                link0-&gt;parent = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keywordflow">if</span> (previous_pair == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    <span class="comment">// link0 was the only node</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    first_pair = link0;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    link0-&gt;prev_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    previous_pair-&gt;next_sibling = link0;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    link0-&gt;prev_sibling = previous_pair;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                }</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                link0-&gt;next_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                current_sibling = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        }</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="comment">// 2. then link remaining trees to the last one, from right to left</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">if</span> (first_pair != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = first_pair-&gt;link_backwards();</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        }</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a> -= 1;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">#if OPENAGE_PAIRINGHEAP_DEBUG</span></div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">if</span> (1 != this-&gt;nodes.erase(ret)) {</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;didn&#39;t remove node&quot;</span>};</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        }</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="comment">// (to find those two lines, 14h of debugging passed)</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        ret-&gt;loosen();</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        ret-&gt;first_child = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="comment">// and it&#39;s done!</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    }</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a8f6c87e73e47397b92a2766989a30c0f">  334</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a8f6c87e73e47397b92a2766989a30c0f">unlink_node</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node) {</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordflow">if</span> (node == this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>) {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">pop_node</a>();</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        }</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            node-&gt;loosen();</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> real_root = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = node;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">pop_node</a>();</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> new_root = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = real_root;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordflow">if</span> (new_root != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af0b5d27df523155450ae777c9aa40f20">root_insert</a>(new_root);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        }</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    }</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ad22ca21f8e7319ea14cd3e14cf5274c4">  358</a></span>&#160;    <span class="keyword">const</span> T &amp;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ad22ca21f8e7319ea14cd3e14cf5274c4">top</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>-&gt;get_data();</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a74c5545ea2c581782effc648a0ecefab">  367</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a74c5545ea2c581782effc648a0ecefab">top_node</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ab94d37206816a45bcfe49f8631cc82a9">  380</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ab94d37206816a45bcfe49f8631cc82a9">decrease</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node) {</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a>(node != this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>)) {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="comment">// cut out the node and its subtree</span></div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            node-&gt;loosen();</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = node-&gt;link_with(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        }</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        <span class="comment">// decreasing the root node won&#39;t change it, so we do nothing.</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    }</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aab81daeebac3d236ced4a85117483d76">  397</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aab81daeebac3d236ced4a85117483d76">update</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node) {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a>(node != this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>)) {</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a8f6c87e73e47397b92a2766989a30c0f">unlink_node</a>(node);</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">push_node</a>(node);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="comment">// it&#39;s the root node, so we just pop and push it.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">push_node</a>(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">pop_node</a>());</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        }</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a012519defd709aacae622b276c3f85eb">  411</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a012519defd709aacae622b276c3f85eb">clear</a>() {</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a> = 0;</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="preprocessor">#if OPENAGE_PAIRINGHEAP_DEBUG</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        this-&gt;nodes.clear();</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    }</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a45599db3b89b27ad5c53ca900a67df85">  422</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a45599db3b89b27ad5c53ca900a67df85">size</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a>;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    }</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">  429</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">empty</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">return</span> this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a> == 0;</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="preprocessor">#if OPENAGE_PAIRINGHEAP_DEBUG</span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    std::unordered_set&lt;element_t&gt; check_consistency()<span class="keyword"> const </span>{</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        std::unordered_set&lt;element_t&gt; found_nodes;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keyword">auto</span> func = [&amp;](<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;root) {</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">if</span> (not root) {</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;test function called with nullptr node&quot;</span>};</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            }</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordflow">if</span> (found_nodes.find(root) == std::end(found_nodes)) {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                found_nodes.insert(root);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            }</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordflow">else</span> {</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;encountered node twice&quot;</span>};</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            }</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;            <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a> != this-&gt;nodes.size()) {</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node count fail&quot;</span>};</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;            }</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="keywordflow">if</span> (root-&gt;next_sibling) {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                <span class="keywordflow">if</span> (not root-&gt;next_sibling-&gt;prev_sibling) {</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node has next sibling, which has no prev sibling&quot;</span>};</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                }</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                <span class="keywordflow">if</span> (root-&gt;next_sibling-&gt;prev_sibling != root) {</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node not referenced by next.prev&quot;</span>};</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                }</div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            }</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">if</span> (root-&gt;prev_sibling) {</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                <span class="keywordflow">if</span> (not root-&gt;prev_sibling-&gt;next_sibling) {</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node has prev sibling, which has no next sibling&quot;</span>};</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                }</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                <span class="keywordflow">if</span> (root-&gt;prev_sibling-&gt;next_sibling != root) {</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node not referenced by prev.next&quot;</span>};</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                }</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            }</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="keywordflow">if</span> (root-&gt;first_child) {</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                <span class="keywordflow">if</span> (root-&gt;first_child == root-&gt;next_sibling) {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;first_child is next_sibling&quot;</span>};</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                }</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                <span class="keywordflow">if</span> (root-&gt;first_child == root-&gt;prev_sibling) {</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;first_child is prev_sibling&quot;</span>};</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                }</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <span class="keywordflow">if</span> (root-&gt;first_child == root-&gt;parent) {</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;first_child is parent&quot;</span>};</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            }</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="keywordflow">if</span> (root-&gt;parent) {</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                <span class="keywordflow">if</span> (found_nodes.find(root-&gt;parent) == std::end(found_nodes)) {</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;parent node is not known&quot;</span>};</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                }</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> child = root-&gt;parent-&gt;first_child;</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> lastchild;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                <span class="keywordtype">bool</span> foundvianext = <span class="keyword">false</span>, foundviaprev = <span class="keyword">false</span>;</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                std::unordered_set&lt;element_t&gt; loopprotect;</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                    <span class="keywordflow">if</span> (not child) {</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                    }</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    <span class="keywordflow">if</span> (loopprotect.find(child) == std::end(loopprotect)) {</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                        loopprotect.insert(child);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                    }</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                        <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;child reencountered when walking forward&quot;</span>};</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                    <span class="keywordflow">if</span> (child == root) {</div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                        foundvianext = <span class="keyword">true</span>;</div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                    }</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                    <span class="comment">// if both are equal, cmp will still be false.</span></div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                    <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a902a1342c704db376899206112ced595">cmp</a>(child-&gt;data, root-&gt;parent-&gt;data)) {</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                        <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;tree invariant violated&quot;</span>};</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                    }</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                    lastchild = child;</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    child = child-&gt;next_sibling;</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                }</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                loopprotect.clear();</div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                    <span class="keywordflow">if</span> (not lastchild) {</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    }</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    <span class="keywordflow">if</span> (loopprotect.find(lastchild) == std::end(loopprotect)) {</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                        loopprotect.insert(lastchild);</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                    }</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                        <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;child reencountered when walking back&quot;</span>};</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                    }</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                    <span class="keywordflow">if</span> (lastchild == root) {</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                        foundviaprev = <span class="keyword">true</span>;</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                    }</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                    lastchild = lastchild-&gt;prev_sibling;</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;                }</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                <span class="keywordflow">if</span> (not foundvianext and not foundviaprev) {</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node not found as parent&#39;s child at all&quot;</span>};</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                }</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (not foundvianext) {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node not found via parent&#39;s next childs&quot;</span>};</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                }</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                <span class="keywordflow">else</span> <span class="keywordflow">if</span> (not foundviaprev) {</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;                    <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node not found via parent&#39;s prev childs&quot;</span>};</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;                }</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            }</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        };</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;        <span class="keywordflow">if</span> (this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>) {</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">walk_tree</a>(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>, func);</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">if</span> (found_nodes.size() != this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a45599db3b89b27ad5c53ca900a67df85">size</a>()) {</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;it : found_nodes) {</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;elem = it;</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                    <span class="keywordflow">if</span> (this-&gt;nodes.find(elem) == std::end(this-&gt;nodes)) {</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                        <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node not recorded but found&quot;</span>};</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                    }</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                }</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;                <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;it : this-&gt;nodes) {</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;                    <span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;elem = it;</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;                    <span class="keywordflow">if</span> (found_nodes.find(elem) == std::end(found_nodes)) {</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                        <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node recorded but not found&quot;</span>};</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                    }</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                }</div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node count inconsistent&quot;</span>};</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            }</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;        }</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            <span class="keywordflow">if</span> (not this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">empty</a>()) {</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                <span class="keywordflow">throw</span> Error{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;root missing but heap not empty&quot;</span>};</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            }</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        }</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">return</span> found_nodes;</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    }</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00585"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a59f56ca7e64a9a61213fb367da2be7ca">  585</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a59f56ca7e64a9a61213fb367da2be7ca">iter_all</a>(<span class="keyword">const</span> std::function&lt;<span class="keywordtype">void</span>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;)&gt; &amp;func)<span class="keyword"> const </span>{</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">walk_tree</a>(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>, func);</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    }</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00590"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">  590</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">walk_tree</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;root,</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                   <span class="keyword">const</span> std::function&lt;<span class="keywordtype">void</span>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;)&gt; &amp;func)<span class="keyword"> const </span>{</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        func(root);</div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="keywordflow">if</span> (root) {</div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <span class="keyword">auto</span> node = root-&gt;first_child;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                <span class="keywordflow">if</span> (not node) {</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                    <span class="keywordflow">break</span>;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                }</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div><div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">walk_tree</a>(node, func);</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                node = node-&gt;next_sibling;</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            }</div><div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        }</div><div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    }</div><div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;</div><div class="line"><a name="l00613"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">  613</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">push_node</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node) {</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af0b5d27df523155450ae777c9aa40f20">root_insert</a>(node);</div><div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;</div><div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="preprocessor">#if OPENAGE_PAIRINGHEAP_DEBUG</span></div><div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="keyword">auto</span> ins = this-&gt;nodes.insert(node);</div><div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">if</span> (not ins.second) {</div><div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="classopenage_1_1error_1_1_error.xhtml">Error</a>{<a class="code" href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a> &lt;&lt; <span class="stringliteral">&quot;node already known&quot;</span>};</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        }</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a> += 1;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;    }</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;</div><div class="line"><a name="l00629"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af0b5d27df523155450ae777c9aa40f20">  629</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af0b5d27df523155450ae777c9aa40f20">root_insert</a>(<span class="keyword">const</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> &amp;node) {</div><div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a>(this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> == <span class="keyword">nullptr</span>)) {</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = node;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a> = this-&gt;<a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>-&gt;link_with(node);</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        }</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    }</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00638"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a902a1342c704db376899206112ced595">  638</a></span>&#160;    compare <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a902a1342c704db376899206112ced595">cmp</a>;</div><div class="line"><a name="l00639"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">  639</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">node_count</a>;</div><div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">  640</a></span>&#160;    <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">element_t</a> <a class="code" href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">root_node</a>;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="preprocessor">#if OPENAGE_PAIRINGHEAP_DEBUG</span></div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    std::unordered_set&lt;element_t&gt; nodes;</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;};</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;} <span class="comment">// openage::datastructure</span></div><div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a3dcccc1c86bffe3bf6d852687bd8a9c4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3dcccc1c86bffe3bf6d852687bd8a9c4">openage::datastructure::PairingHeapNode::data</a></div><div class="ttdeci">T data</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00048">pairing_heap.h:48</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_af89a07b90150d0d4606787f0ac202242"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af89a07b90150d0d4606787f0ac202242">openage::datastructure::PairingHeap&lt; std::shared_ptr&lt; Event &gt;, util::SharedPtrLess&lt; Event &gt; &gt;::element_t</a></div><div class="ttdeci">std::shared_ptr&lt; node_t &gt; element_t</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00198">pairing_heap.h:198</a></div></div>
<div class="ttc" id="classopenage_1_1error_1_1_error_xhtml"><div class="ttname"><a href="classopenage_1_1error_1_1_error.xhtml">openage::error::Error</a></div><div class="ttdef"><b>Definition:</b> <a href="error_2error_8h_source.xhtml#l00051">error.h:51</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_af0b5d27df523155450ae777c9aa40f20"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#af0b5d27df523155450ae777c9aa40f20">openage::datastructure::PairingHeap::root_insert</a></div><div class="ttdeci">void root_insert(const element_t &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00629">pairing_heap.h:629</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_ad22ca21f8e7319ea14cd3e14cf5274c4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ad22ca21f8e7319ea14cd3e14cf5274c4">openage::datastructure::PairingHeap::top</a></div><div class="ttdeci">const T &amp; top() const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00358">pairing_heap.h:358</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a8f6c87e73e47397b92a2766989a30c0f"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a8f6c87e73e47397b92a2766989a30c0f">openage::datastructure::PairingHeap::unlink_node</a></div><div class="ttdeci">void unlink_node(const element_t &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00334">pairing_heap.h:334</a></div></div>
<div class="ttc" id="message_8h_xhtml_a8adfad4f54eb306fbb8aaa1b159608a5"><div class="ttname"><a href="message_8h.xhtml#a8adfad4f54eb306fbb8aaa1b159608a5">MSG</a></div><div class="ttdeci">#define MSG(LVL)</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00171">message.h:171</a></div></div>
<div class="ttc" id="namespaceopenage_1_1log_xhtml_a325b0901ddb3f2af36f93781b7dd9744"><div class="ttname"><a href="namespaceopenage_1_1log.xhtml#a325b0901ddb3f2af36f93781b7dd9744">openage::log.err</a></div><div class="ttdeci">def err(msg, *args, **kwargs)</div><div class="ttdoc">error message</div><div class="ttdef"><b>Definition:</b> <a href="log_2____init_____8py_source.xhtml#l00124">__init__.py:124</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_aa48e37e1eb9ea1cd87cf17b2f511b479"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#aa48e37e1eb9ea1cd87cf17b2f511b479">openage::datastructure::PairingHeapNode::cmp</a></div><div class="ttdeci">compare cmp</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00049">pairing_heap.h:49</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a9de129f708553f7a91cdfbacc9b48ea6"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a9de129f708553f7a91cdfbacc9b48ea6">openage::datastructure::PairingHeapNode::link_with</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; link_with(const std::shared_ptr&lt; this_type &gt; &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00099">pairing_heap.h:99</a></div></div>
<div class="ttc" id="namespaceopenage_xhtml_a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e"><div class="ttname"><a href="namespaceopenage.xhtml#a7278b1c0b8d94d06da155b0b693b2828a3734a903022249b3010be1897042568e">openage::ability_type::move</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a3f6b72619532af9b5a828dd541a225b1"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a3f6b72619532af9b5a828dd541a225b1">openage::datastructure::PairingHeapNode::add_child</a></div><div class="ttdeci">void add_child(const std::shared_ptr&lt; this_type &gt; &amp;new_child)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00079">pairing_heap.h:79</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_aa219dc574937f546b210dd0c04836219"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aa219dc574937f546b210dd0c04836219">openage::datastructure::PairingHeap::~PairingHeap</a></div><div class="ttdeci">~PairingHeap()=default</div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_ae8766c62075853897ab56f7066315813"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ae8766c62075853897ab56f7066315813">openage::datastructure::PairingHeapNode::parent</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; parent</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00185">pairing_heap.h:185</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a45599db3b89b27ad5c53ca900a67df85"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a45599db3b89b27ad5c53ca900a67df85">openage::datastructure::PairingHeap::size</a></div><div class="ttdeci">size_t size() const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00422">pairing_heap.h:422</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_a217a0bd562b98ae8c2ffce44935351e1"><div class="ttname"><a href="compiler_8h.xhtml#a217a0bd562b98ae8c2ffce44935351e1">likely</a></div><div class="ttdeci">#define likely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00052">compiler.h:52</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a902a1342c704db376899206112ced595"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a902a1342c704db376899206112ced595">openage::datastructure::PairingHeap::cmp</a></div><div class="ttdeci">compare cmp</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00638">pairing_heap.h:638</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a0b2c1f83d627f4f401d53787e9fa076f"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a0b2c1f83d627f4f401d53787e9fa076f">openage::datastructure::PairingHeapNode::become_child_of</a></div><div class="ttdeci">void become_child_of(const std::shared_ptr&lt; this_type &gt; &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00072">pairing_heap.h:72</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_ad2d2dd30261c2108d7ff21a4df43098c"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#ad2d2dd30261c2108d7ff21a4df43098c">openage::datastructure::PairingHeapNode::~PairingHeapNode</a></div><div class="ttdeci">~PairingHeapNode()=default</div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml">openage::datastructure::PairingHeap</a></div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00037">pairing_heap.h:37</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a5275316630476a1db17714404feb3d34"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a5275316630476a1db17714404feb3d34">openage::datastructure::PairingHeapNode::next_sibling</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; next_sibling</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00184">pairing_heap.h:184</a></div></div>
<div class="ttc" id="compiler_8h_xhtml_ac6c45889010c1bd68631771b64f18101"><div class="ttname"><a href="compiler_8h.xhtml#ac6c45889010c1bd68631771b64f18101">unlikely</a></div><div class="ttdeci">#define unlikely(x)</div><div class="ttdef"><b>Definition:</b> <a href="compiler_8h_source.xhtml#l00053">compiler.h:53</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a7a529d5ee64fa5002f6487d3821df5f6"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a7a529d5ee64fa5002f6487d3821df5f6">openage::datastructure::PairingHeap::empty</a></div><div class="ttdeci">bool empty() const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00429">pairing_heap.h:429</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a74c5545ea2c581782effc648a0ecefab"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a74c5545ea2c581782effc648a0ecefab">openage::datastructure::PairingHeap::top_node</a></div><div class="ttdeci">const element_t &amp; top_node() const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00367">pairing_heap.h:367</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_ac6bcfcb890dd8d546b1b4c466cf09009"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ac6bcfcb890dd8d546b1b4c466cf09009">openage::datastructure::PairingHeap::pop</a></div><div class="ttdeci">T pop()</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00236">pairing_heap.h:236</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_af1b32b518657c3a03efa60240c5634d5"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#af1b32b518657c3a03efa60240c5634d5">openage::datastructure::PairingHeapNode::PairingHeapNode</a></div><div class="ttdeci">PairingHeapNode(const T &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00052">pairing_heap.h:52</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a75e9e7602b59aeee47a2fd84a10c8f74"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a75e9e7602b59aeee47a2fd84a10c8f74">openage::datastructure::PairingHeap::push</a></div><div class="ttdeci">element_t push(const T &amp;item)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00217">pairing_heap.h:217</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_aab81daeebac3d236ced4a85117483d76"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#aab81daeebac3d236ced4a85117483d76">openage::datastructure::PairingHeap::update</a></div><div class="ttdeci">void update(const element_t &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00397">pairing_heap.h:397</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a17677ec830613746e38124b2eac7d2e6"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a17677ec830613746e38124b2eac7d2e6">openage::datastructure::PairingHeap::pop_node</a></div><div class="ttdeci">element_t pop_node()</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00246">pairing_heap.h:246</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a95fa745e6a81de8caae638621137d504"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a95fa745e6a81de8caae638621137d504">openage::datastructure::PairingHeap::walk_tree</a></div><div class="ttdeci">void walk_tree(const element_t &amp;root, const std::function&lt; void(const element_t &amp;)&gt; &amp;func) const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00590">pairing_heap.h:590</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a954463b2218a69cf977df80d4bd7d872"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a954463b2218a69cf977df80d4bd7d872">openage::datastructure::PairingHeapNode::loosen</a></div><div class="ttdeci">void loosen()</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00157">pairing_heap.h:157</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a01fb1e27e0012a6f31147c7d11a4fc08"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a01fb1e27e0012a6f31147c7d11a4fc08">openage::datastructure::PairingHeapNode::prev_sibling</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; prev_sibling</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00183">pairing_heap.h:183</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a913846c9030bbcb2502d4cc96cd56afa"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a913846c9030bbcb2502d4cc96cd56afa">openage::datastructure::PairingHeapNode::first_child</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; first_child</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00182">pairing_heap.h:182</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a59f56ca7e64a9a61213fb367da2be7ca"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a59f56ca7e64a9a61213fb367da2be7ca">openage::datastructure::PairingHeap::iter_all</a></div><div class="ttdeci">void iter_all(const std::function&lt; void(const element_t &amp;)&gt; &amp;func) const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00585">pairing_heap.h:585</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a850aad20a2be9bfe164499a4462965b4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a850aad20a2be9bfe164499a4462965b4">openage::datastructure::PairingHeap::root_node</a></div><div class="ttdeci">element_t root_node</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00640">pairing_heap.h:640</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml">openage::datastructure::PairingHeapNode</a></div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00042">pairing_heap.h:42</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a4f1e12c9a1871b3ba19edb4a73935ae4"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a4f1e12c9a1871b3ba19edb4a73935ae4">openage::datastructure::PairingHeapNode::get_data</a></div><div class="ttdeci">const T &amp; get_data() const</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00065">pairing_heap.h:65</a></div></div>
<div class="ttc" id="message_8h_xhtml_a735563036dced0b7d6cc98f97ea4978b"><div class="ttname"><a href="message_8h.xhtml#a735563036dced0b7d6cc98f97ea4978b">ERR</a></div><div class="ttdeci">#define ERR</div><div class="ttdef"><b>Definition:</b> <a href="message_8h_source.xhtml#l00179">message.h:179</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a2087411c07ffe7d5d0762a700ee4e34e"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a2087411c07ffe7d5d0762a700ee4e34e">openage::datastructure::PairingHeap::PairingHeap</a></div><div class="ttdeci">PairingHeap()</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00205">pairing_heap.h:205</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a6227d9be8c7b75e3456c25850e324327"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a6227d9be8c7b75e3456c25850e324327">openage::datastructure::PairingHeapNode::link_backwards</a></div><div class="ttdeci">std::shared_ptr&lt; this_type &gt; link_backwards()</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00134">pairing_heap.h:134</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_ab94d37206816a45bcfe49f8631cc82a9"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#ab94d37206816a45bcfe49f8631cc82a9">openage::datastructure::PairingHeap::decrease</a></div><div class="ttdeci">void decrease(const element_t &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00380">pairing_heap.h:380</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a684440bcb0466bd64164e9fe7e9df954"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a684440bcb0466bd64164e9fe7e9df954">openage::datastructure::PairingHeap::push</a></div><div class="ttdeci">element_t push(T &amp;&amp;item)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00227">pairing_heap.h:227</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a493b9b6b7e82fe0633df628a2aa248e7"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a493b9b6b7e82fe0633df628a2aa248e7">openage::datastructure::PairingHeap::push_node</a></div><div class="ttdeci">void push_node(const element_t &amp;node)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00613">pairing_heap.h:613</a></div></div>
<div class="ttc" id="namespaceopenage_1_1datastructure_xhtml"><div class="ttname"><a href="namespaceopenage_1_1datastructure.xhtml">openage::datastructure</a></div><div class="ttdef"><b>Definition:</b> <a href="concurrent__queue_8h_source.xhtml#l00011">concurrent_queue.h:11</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a012519defd709aacae622b276c3f85eb"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a012519defd709aacae622b276c3f85eb">openage::datastructure::PairingHeap::clear</a></div><div class="ttdeci">void clear()</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00411">pairing_heap.h:411</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_node_xhtml_a17ab80e5ef35e2d22599ebcfabbdf639"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap_node.xhtml#a17ab80e5ef35e2d22599ebcfabbdf639">openage::datastructure::PairingHeapNode::PairingHeapNode</a></div><div class="ttdeci">PairingHeapNode(T &amp;&amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00056">pairing_heap.h:56</a></div></div>
<div class="ttc" id="structopenage_1_1util_1_1_shared_ptr_less_xhtml"><div class="ttname"><a href="structopenage_1_1util_1_1_shared_ptr_less.xhtml">openage::util::SharedPtrLess&lt; Event &gt;</a></div></div>
<div class="ttc" id="classopenage_1_1datastructure_1_1_pairing_heap_xhtml_a42a1379cfdaf1a7f2a5ff4da9544d9f7"><div class="ttname"><a href="classopenage_1_1datastructure_1_1_pairing_heap.xhtml#a42a1379cfdaf1a7f2a5ff4da9544d9f7">openage::datastructure::PairingHeap::node_count</a></div><div class="ttdeci">size_t node_count</div><div class="ttdef"><b>Definition:</b> <a href="pairing__heap_8h_source.xhtml#l00639">pairing_heap.h:639</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_7a1433c2fe60c22d0d75c56b51397e23.xhtml">libopenage</a></li><li class="navelem"><a class="el" href="dir_7ea809f223a8f5a589c716fad2b2f668.xhtml">datastructure</a></li><li class="navelem"><a class="el" href="pairing__heap_8h.xhtml">pairing_heap.h</a></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.15 </li>
  </ul>
</div>
</body>
</html>
