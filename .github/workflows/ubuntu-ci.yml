name: Ubuntu 18.04 LTS
on: [push, pull_request]
env:
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE:  '1G'
  CCACHE_DIR: '${{ github.workspace }}/.ccache'
  CI_CFG_VERSION: 'github-linux-0.1.0-dev'

jobs:
  ubuntu-builds:
    name: Linux (${{ matrix.mode }}) - ${{ matrix.cc }}
    if:
      contains(github.repository, 'SFTtech')==false # CI for forks, don't run in the main repository
    strategy:
      fail-fast: false
      matrix:
        cc: [clang-9, clang-10, gcc]
        mode: [debug, release]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache (ccache)
        uses: actions/cache@v1.1.2
        id: cache-ccache
        with:
          path: '${{ github.workspace }}/.ccache'
          key: ${{ runner.os }}-ccache-${{ matrix.cc }}-${{ matrix.mode }}

      - name: Setup apt repositories
        run: |
            sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main' -y
        if: ${{ matrix.cc }} == clang-9

      - name: Setup apt repositories
        run: |
            sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main' -y
        if: ${{ matrix.cc }} == clang-10

      - name: Update apt repositories
        run: sudo apt-get update -q

      - name: Install Dependencies
        run: |
          sudo apt-get install -y --no-install-recommends libc++-dev ccache flex make cmake cython3 libeigen3-dev libepoxy-dev libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libogg-dev libopus-dev libopusfile-dev libpng-dev libsdl2-dev libsdl2-image-dev python3-dev python3-jinja2 python3-numpy python3-pil python3-pip python3-pygments qml-module-qtquick-controls qtdeclarative5-dev

      - name: Install C compiler
        run: |
          if [ ${{ matrix.cc }} = clang-9 ]; then
            sudo apt-get install -y --no-install-recommends ${{ matrix.cc }} libc++-9-dev libc++abi-9-dev lld-9 lldb-9 clang-tools-9 libclang-common-9-dev libclang-9-dev libclang1-9
          elif [ ${{ matrix.cc }} = clang-10 ]; then
            sudo apt-get install -y --no-install-recommends ${{ matrix.cc }} libc++-10-dev libc++abi-10-dev lld-10 lldb-10 clang-tools-10 libclang-common-10-dev libclang1-10
          elif [ ${{ matrix.cc }} = gcc ]; then
            sudo apt-get install -y --no-install-recommends ${{ matrix.cc }} g++
          fi

      - name: Show environment settings
        shell: bash
        run: |
          set -x
          uname -a
          uname -s
          uname -m
          env

      - name: Generate build files
        run: |
          CC=${{ matrix.cc }} ./configure --compiler=${{ matrix.cc }} --mode=${{ matrix.mode }} --flags="-Werror" --ccache --download-nyan -- -DCMAKE_LINK_WHAT_YOU_USE="TRUE"

      - name: Build
        id: build-nv
        run: |
          make build -j2

      - name: Build
        run: |
          make build -j2 VERBOSE=1
        if: ${{ failure() }}

      - name: Test
        run: make tests

      - name: Install
        run: make install DESTDIR=/tmp/openage
